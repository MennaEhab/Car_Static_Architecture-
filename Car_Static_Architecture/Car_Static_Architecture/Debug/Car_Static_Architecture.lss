
Car_Static_Architecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00001156  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f93  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e46  00000000  00000000  0000334f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001364  00000000  00000000  00004195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  000054fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e1  00000000  00000000  0000597c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001600  00000000  00000000  0000615d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000775d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
      74:	0c 94 6f 08 	jmp	0x10de	; 0x10de <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Car_SM_Init>:

uint8_t g_state ;



ERROR_STATUS Car_SM_Init(void){
      7c:	cf 93       	push	r28
	
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Steering_Init();
      7e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <Steering_Init>
      82:	c8 2f       	mov	r28, r24
	
	state_error |= Us_Init();
      84:	0e 94 53 06 	call	0xca6	; 0xca6 <Us_Init>
	
	g_state=STOP_STATE ;
      88:	93 e0       	ldi	r25, 0x03	; 3
      8a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <g_state>
	
	return state_error ;
}
      8e:	8c 2b       	or	r24, r28
      90:	cf 91       	pop	r28
      92:	08 95       	ret

00000094 <Car_SM_Update>:


ERROR_STATUS Car_SM_Update(void){
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	00 d0       	rcall	.+0      	; 0x9c <Car_SM_Update+0x8>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	
	uint16_t distance;
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Us_Trigger();
      a0:	0e 94 65 06 	call	0xcca	; 0xcca <Us_Trigger>
      a4:	18 2f       	mov	r17, r24
	state_error |= Us_GetDistance(&distance);
      a6:	ce 01       	movw	r24, r28
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	0e 94 8a 06 	call	0xd14	; 0xd14 <Us_GetDistance>
      ae:	18 2b       	or	r17, r24
	
	//timerDelayMs(10);
	
	//distance = 50 ;
	
	switch(g_state){
      b0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <g_state>
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	81 f1       	breq	.+96     	; 0x118 <Car_SM_Update+0x84>
      b8:	c8 f0       	brcs	.+50     	; 0xec <Car_SM_Update+0x58>
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	09 f4       	brne	.+2      	; 0xc0 <Car_SM_Update+0x2c>
      be:	41 c0       	rjmp	.+130    	; 0x142 <Car_SM_Update+0xae>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	09 f0       	breq	.+2      	; 0xc6 <Car_SM_Update+0x32>
      c4:	54 c0       	rjmp	.+168    	; 0x16e <Car_SM_Update+0xda>
		
		case STOP_STATE :
			if (distance<20){
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	9a 81       	ldd	r25, Y+2	; 0x02
      ca:	84 31       	cpi	r24, 0x14	; 20
      cc:	91 05       	cpc	r25, r1
      ce:	20 f4       	brcc	.+8      	; 0xd8 <Car_SM_Update+0x44>
				
				g_state = BACKWARD_STATE ;
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      d6:	4b c0       	rjmp	.+150    	; 0x16e <Car_SM_Update+0xda>
			}
			else if ((distance<=40) && (distance>=20)){
      d8:	44 97       	sbiw	r24, 0x14	; 20
      da:	45 97       	sbiw	r24, 0x15	; 21
      dc:	20 f4       	brcc	.+8      	; 0xe6 <Car_SM_Update+0x52>
				
				g_state =TURNING_STATE ;
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      e4:	44 c0       	rjmp	.+136    	; 0x16e <Car_SM_Update+0xda>
			}else
				g_state = FORWARD_STATE ;
      e6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
      ea:	41 c0       	rjmp	.+130    	; 0x16e <Car_SM_Update+0xda>
			break;
			
		case FORWARD_STATE :
		
			if (distance<20){
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	9a 81       	ldd	r25, Y+2	; 0x02
      f0:	84 31       	cpi	r24, 0x14	; 20
      f2:	91 05       	cpc	r25, r1
      f4:	20 f4       	brcc	.+8      	; 0xfe <Car_SM_Update+0x6a>
				g_state = BACKWARD_STATE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      fc:	38 c0       	rjmp	.+112    	; 0x16e <Car_SM_Update+0xda>
			}else if ( distance<=40 && distance>=20 )
      fe:	44 97       	sbiw	r24, 0x14	; 20
     100:	45 97       	sbiw	r24, 0x15	; 21
     102:	20 f4       	brcc	.+8      	; 0x10c <Car_SM_Update+0x78>
			{
				g_state=TURNING_STATE;
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     10a:	31 c0       	rjmp	.+98     	; 0x16e <Car_SM_Update+0xda>
			}
			else
				state_error |= Steering_SteerCar(CAR_FORWARD,30);
     10c:	6e e1       	ldi	r22, 0x1E	; 30
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Steering_SteerCar>
     114:	18 2b       	or	r17, r24
     116:	2b c0       	rjmp	.+86     	; 0x16e <Car_SM_Update+0xda>
			break;
				
		case BACKWARD_STATE:
		
			if (distance<20){
     118:	89 81       	ldd	r24, Y+1	; 0x01
     11a:	9a 81       	ldd	r25, Y+2	; 0x02
     11c:	84 31       	cpi	r24, 0x14	; 20
     11e:	91 05       	cpc	r25, r1
     120:	30 f4       	brcc	.+12     	; 0x12e <Car_SM_Update+0x9a>
				state_error |= Steering_SteerCar(CAR_BACKWARD,30);
     122:	6e e1       	ldi	r22, 0x1E	; 30
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Steering_SteerCar>
     12a:	18 2b       	or	r17, r24
     12c:	20 c0       	rjmp	.+64     	; 0x16e <Car_SM_Update+0xda>
			}else if (distance<=40&&distance>=20)
     12e:	44 97       	sbiw	r24, 0x14	; 20
     130:	45 97       	sbiw	r24, 0x15	; 21
     132:	20 f4       	brcc	.+8      	; 0x13c <Car_SM_Update+0xa8>
			{
				g_state=TURNING_STATE;
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     13a:	19 c0       	rjmp	.+50     	; 0x16e <Car_SM_Update+0xda>
			}
			 else{
				g_state = FORWARD_STATE ;
     13c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
     140:	16 c0       	rjmp	.+44     	; 0x16e <Car_SM_Update+0xda>
			}
			break;
			
		case TURNING_STATE :
		
			if (distance<=40&&distance>=20)
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	9a 81       	ldd	r25, Y+2	; 0x02
     146:	9c 01       	movw	r18, r24
     148:	24 51       	subi	r18, 0x14	; 20
     14a:	31 09       	sbc	r19, r1
     14c:	25 31       	cpi	r18, 0x15	; 21
     14e:	31 05       	cpc	r19, r1
     150:	30 f4       	brcc	.+12     	; 0x15e <Car_SM_Update+0xca>
			{
				state_error |= Steering_SteerCar(CAR_LEFT,30);
     152:	6e e1       	ldi	r22, 0x1E	; 30
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Steering_SteerCar>
     15a:	18 2b       	or	r17, r24
     15c:	08 c0       	rjmp	.+16     	; 0x16e <Car_SM_Update+0xda>
			}else if (distance <20){
     15e:	44 97       	sbiw	r24, 0x14	; 20
     160:	20 f4       	brcc	.+8      	; 0x16a <Car_SM_Update+0xd6>
				g_state = BACKWARD_STATE ;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     168:	02 c0       	rjmp	.+4      	; 0x16e <Car_SM_Update+0xda>
			}
			else
			g_state = FORWARD_STATE ;
     16a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
	}
	
	
	return state_error ;
	
}
     16e:	81 2f       	mov	r24, r17
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	1f 91       	pop	r17
     17a:	08 95       	ret

0000017c <DIO_init>:
#include "DIO.h"
#include "std_types.h"



ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
     17c:	fc 01       	movw	r30, r24
	
	 //uint8_t temp ;
	 if (DIO_info->dir == HIGH )
     17e:	82 81       	ldd	r24, Z+2	; 0x02
     180:	8f 3f       	cpi	r24, 0xFF	; 255
     182:	09 f5       	brne	.+66     	; 0x1c6 <DIO_init+0x4a>
	{
		switch(DIO_info->GPIO){
     184:	80 81       	ld	r24, Z
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	61 f0       	breq	.+24     	; 0x1a2 <DIO_init+0x26>
     18a:	28 f0       	brcs	.+10     	; 0x196 <DIO_init+0x1a>
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	79 f0       	breq	.+30     	; 0x1ae <DIO_init+0x32>
     190:	83 30       	cpi	r24, 0x03	; 3
     192:	99 f0       	breq	.+38     	; 0x1ba <DIO_init+0x3e>
     194:	36 c0       	rjmp	.+108    	; 0x202 <DIO_init+0x86>
			
			case GPIOA :
			
			PORTA_DIR = PORTA_DIR | DIO_info->pins ;
     196:	9a b3       	in	r25, 0x1a	; 26
     198:	81 81       	ldd	r24, Z+1	; 0x01
     19a:	89 2b       	or	r24, r25
     19c:	8a bb       	out	0x1a, r24	; 26
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     19e:	80 e0       	ldi	r24, 0x00	; 0
		switch(DIO_info->GPIO){
			
			case GPIOA :
			
			PORTA_DIR = PORTA_DIR | DIO_info->pins ;
			break;
     1a0:	08 95       	ret
			
			case GPIOB :
			
			PORTB_DIR = PORTB_DIR | DIO_info->pins ;
     1a2:	97 b3       	in	r25, 0x17	; 23
     1a4:	81 81       	ldd	r24, Z+1	; 0x01
     1a6:	89 2b       	or	r24, r25
     1a8:	87 bb       	out	0x17, r24	; 23
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOB :
			
			PORTB_DIR = PORTB_DIR | DIO_info->pins ;
			break;
     1ac:	08 95       	ret
			
			case GPIOC :
			
			PORTC_DIR = PORTC_DIR | DIO_info->pins ;
     1ae:	94 b3       	in	r25, 0x14	; 20
     1b0:	81 81       	ldd	r24, Z+1	; 0x01
     1b2:	89 2b       	or	r24, r25
     1b4:	84 bb       	out	0x14, r24	; 20
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1b6:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOC :
			
			PORTC_DIR = PORTC_DIR | DIO_info->pins ;
			break;
     1b8:	08 95       	ret

			case GPIOD :
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
     1ba:	91 b3       	in	r25, 0x11	; 17
     1bc:	81 81       	ldd	r24, Z+1	; 0x01
     1be:	89 2b       	or	r24, r25
     1c0:	81 bb       	out	0x11, r24	; 17
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
			break;

			case GPIOD :
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
			break;
     1c4:	08 95       	ret
			
			default :
			return E_NOK ;
		}
		
	} else if (DIO_info->dir == LOW)
     1c6:	81 11       	cpse	r24, r1
     1c8:	1e c0       	rjmp	.+60     	; 0x206 <DIO_init+0x8a>
	{
		switch(DIO_info->GPIO){
     1ca:	80 81       	ld	r24, Z
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	59 f0       	breq	.+22     	; 0x1e6 <DIO_init+0x6a>
     1d0:	83 30       	cpi	r24, 0x03	; 3
     1d2:	81 f0       	breq	.+32     	; 0x1f4 <DIO_init+0x78>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	c9 f4       	brne	.+50     	; 0x20a <DIO_init+0x8e>
		PORTA_DIR = PORTA_DIR & ~(DIO_info->pins) ;
		break;
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(DIO_info->pins) ;
     1d8:	97 b3       	in	r25, 0x17	; 23
     1da:	81 81       	ldd	r24, Z+1	; 0x01
     1dc:	80 95       	com	r24
     1de:	89 23       	and	r24, r25
     1e0:	87 bb       	out	0x17, r24	; 23
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1e2:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(DIO_info->pins) ;
		break;
     1e4:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(DIO_info->pins) ;
     1e6:	94 b3       	in	r25, 0x14	; 20
     1e8:	81 81       	ldd	r24, Z+1	; 0x01
     1ea:	80 95       	com	r24
     1ec:	89 23       	and	r24, r25
     1ee:	84 bb       	out	0x14, r24	; 20
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1f0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(DIO_info->pins) ;
		break;
     1f2:	08 95       	ret

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
     1f4:	91 b3       	in	r25, 0x11	; 17
     1f6:	81 81       	ldd	r24, Z+1	; 0x01
     1f8:	80 95       	com	r24
     1fa:	89 23       	and	r24, r25
     1fc:	81 bb       	out	0x11, r24	; 17
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1fe:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
		break;	
     200:	08 95       	ret
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
			break;
			
			default :
			return E_NOK ;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	08 95       	ret
		return E_NOK ;	
			
		}
		
	}else
		return E_NOK;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	08 95       	ret
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
		break;	
		
		default :
		return E_NOK ;	
     20a:	81 e0       	ldi	r24, 0x01	; 1
	
	return E_OK ;
	
	 
	
}
     20c:	08 95       	ret

0000020e <DIO_Write>:


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	uint8_t temp;
	if (value == HIGH ){
     20e:	4f 3f       	cpi	r20, 0xFF	; 255
     210:	f1 f4       	brne	.+60     	; 0x24e <DIO_Write+0x40>
		switch(GPIO)
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	59 f0       	breq	.+22     	; 0x22c <DIO_Write+0x1e>
     216:	28 f0       	brcs	.+10     	; 0x222 <DIO_Write+0x14>
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	79 f0       	breq	.+30     	; 0x23a <DIO_Write+0x2c>
     21c:	83 30       	cpi	r24, 0x03	; 3
     21e:	91 f0       	breq	.+36     	; 0x244 <DIO_Write+0x36>
     220:	38 c0       	rjmp	.+112    	; 0x292 <DIO_Write+0x84>
		{
			case GPIOA :
			
			PORTA_DATA  |=  pins ;
     222:	8b b3       	in	r24, 0x1b	; 27
     224:	68 2b       	or	r22, r24
     226:	6b bb       	out	0x1b, r22	; 27
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     228:	80 e0       	ldi	r24, 0x00	; 0
		switch(GPIO)
		{
			case GPIOA :
			
			PORTA_DATA  |=  pins ;
			break;
     22a:	08 95       	ret
			
			case GPIOB :
			PORTB_DATA |=  (PORTB_DATA  & ~(pins) )| (value& pins) ;
     22c:	98 b3       	in	r25, 0x18	; 24
     22e:	88 b3       	in	r24, 0x18	; 24
     230:	69 2b       	or	r22, r25
     232:	68 2b       	or	r22, r24
     234:	68 bb       	out	0x18, r22	; 24
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     236:	80 e0       	ldi	r24, 0x00	; 0
			
			case GPIOB :
			PORTB_DATA |=  (PORTB_DATA  & ~(pins) )| (value& pins) ;
			 
			 //PORTB_DATA =value;
			break;
     238:	08 95       	ret
			
			case GPIOC :
			
			PORTC_DATA |= pins ;
     23a:	85 b3       	in	r24, 0x15	; 21
     23c:	68 2b       	or	r22, r24
     23e:	65 bb       	out	0x15, r22	; 21
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     240:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOC :
			
			PORTC_DATA |= pins ;
			break;
     242:	08 95       	ret

			case GPIOD :
			
			PORTD_DATA |=  pins ;
     244:	82 b3       	in	r24, 0x12	; 18
     246:	68 2b       	or	r22, r24
     248:	62 bb       	out	0x12, r22	; 18
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     24a:	80 e0       	ldi	r24, 0x00	; 0
			break;

			case GPIOD :
			
			PORTD_DATA |=  pins ;
			break;
     24c:	08 95       	ret
			
			 default :
			return E_NOK ;

		}
		}else if(value == LOW) {
     24e:	41 11       	cpse	r20, r1
     250:	22 c0       	rjmp	.+68     	; 0x296 <DIO_Write+0x88>
			
		switch(GPIO){	
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	61 f0       	breq	.+24     	; 0x26e <DIO_Write+0x60>
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_Write+0x54>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	79 f0       	breq	.+30     	; 0x27a <DIO_Write+0x6c>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	99 f0       	breq	.+38     	; 0x286 <DIO_Write+0x78>
     260:	1c c0       	rjmp	.+56     	; 0x29a <DIO_Write+0x8c>
		
		case GPIOA :
		
		PORTA_DATA &= ~(pins) ;
     262:	8b b3       	in	r24, 0x1b	; 27
     264:	60 95       	com	r22
     266:	68 23       	and	r22, r24
     268:	6b bb       	out	0x1b, r22	; 27
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     26a:	80 e0       	ldi	r24, 0x00	; 0
		switch(GPIO){	
		
		case GPIOA :
		
		PORTA_DATA &= ~(pins) ;
		break;
     26c:	08 95       	ret
		
		case GPIOB :
		
		PORTB_DATA &=  ~(pins) ;
     26e:	88 b3       	in	r24, 0x18	; 24
     270:	60 95       	com	r22
     272:	68 23       	and	r22, r24
     274:	68 bb       	out	0x18, r22	; 24
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     276:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOB :
		
		PORTB_DATA &=  ~(pins) ;
		break;
     278:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DATA &= ~(pins) ;
     27a:	85 b3       	in	r24, 0x15	; 21
     27c:	60 95       	com	r22
     27e:	68 23       	and	r22, r24
     280:	65 bb       	out	0x15, r22	; 21
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     282:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOC :
		
		PORTC_DATA &= ~(pins) ;
		break;
     284:	08 95       	ret

		case GPIOD :
		
		PORTD_DATA &= ~(pins) ;
     286:	82 b3       	in	r24, 0x12	; 18
     288:	60 95       	com	r22
     28a:	68 23       	and	r22, r24
     28c:	62 bb       	out	0x12, r22	; 18
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     28e:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case GPIOD :
		
		PORTD_DATA &= ~(pins) ;
		break;
     290:	08 95       	ret
			
			PORTD_DATA |=  pins ;
			break;
			
			 default :
			return E_NOK ;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	08 95       	ret
		 default :
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	08 95       	ret
		
		PORTD_DATA &= ~(pins) ;
		break;
		
		 default :
		return E_NOK ;
     29a:	81 e0       	ldi	r24, 0x01	; 1
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
}
     29c:	08 95       	ret

0000029e <SetExternal_INT_Edge>:
static volatile uint8_t g_timerCH ;
static volatile uint8_t g_fallingEdgeFlag = 0 ;
static  uint8_t g_ovf_flag = 0 ;
//volatile uint8_t 

ERROR_STATUS SetExternal_INT_Edge( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <SetExternal_INT_Edge+0x8>
     2a6:	1f 92       	push	r1
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	
	DIO_Cfg_s dioCfg_INT2;
	switch(interruptCH_No){
     2ac:	62 30       	cpi	r22, 0x02	; 2
     2ae:	18 f0       	brcs	.+6      	; 0x2b6 <SetExternal_INT_Edge+0x18>
     2b0:	62 30       	cpi	r22, 0x02	; 2
     2b2:	19 f0       	breq	.+6      	; 0x2ba <SetExternal_INT_Edge+0x1c>
     2b4:	1a c0       	rjmp	.+52     	; 0x2ea <SetExternal_INT_Edge+0x4c>
		break;
		default:
		return E_NOK ;
		
	}
	return E_OK ;
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	1b c0       	rjmp	.+54     	; 0x2f0 <SetExternal_INT_Edge+0x52>
     2ba:	18 2f       	mov	r17, r24
		case ICU_CH1:
		break;
		case ICU_CH2:
			
			
			dioCfg_INT2.GPIO = GPIOB;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	89 83       	std	Y+1, r24	; 0x01
			dioCfg_INT2.pins = BIT2;
     2c0:	84 e0       	ldi	r24, 0x04	; 4
     2c2:	8a 83       	std	Y+2, r24	; 0x02
			dioCfg_INT2.dir =INPUT;
     2c4:	1b 82       	std	Y+3, r1	; 0x03
			
			DIO_init(&dioCfg_INT2);
     2c6:	ce 01       	movw	r24, r28
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
			
			if(SwICU_Edge== ICU_RISE_TO_FALL){
     2ce:	11 30       	cpi	r17, 0x01	; 1
     2d0:	29 f4       	brne	.+10     	; 0x2dc <SetExternal_INT_Edge+0x3e>
				
				SET_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
     2d2:	84 b7       	in	r24, 0x34	; 52
     2d4:	80 64       	ori	r24, 0x40	; 64
     2d6:	84 bf       	out	0x34, r24	; 52
		break;
		default:
		return E_NOK ;
		
	}
	return E_OK ;
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0a c0       	rjmp	.+20     	; 0x2f0 <SetExternal_INT_Edge+0x52>
			
			if(SwICU_Edge== ICU_RISE_TO_FALL){
				
				SET_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
				}
			else if(SwICU_Edge== ICU_FALE_TO_RISE)
     2dc:	12 30       	cpi	r17, 0x02	; 2
     2de:	39 f4       	brne	.+14     	; 0x2ee <SetExternal_INT_Edge+0x50>
			CLEAR_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
     2e0:	84 b7       	in	r24, 0x34	; 52
     2e2:	8f 7b       	andi	r24, 0xBF	; 191
     2e4:	84 bf       	out	0x34, r24	; 52
		break;
		default:
		return E_NOK ;
		
	}
	return E_OK ;
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <SetExternal_INT_Edge+0x52>
			CLEAR_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
			else
			return E_NOK ;
		break;
		default:
		return E_NOK ;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <SetExternal_INT_Edge+0x52>
				SET_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
				}
			else if(SwICU_Edge== ICU_FALE_TO_RISE)
			CLEAR_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
			else
			return E_NOK ;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return E_NOK ;
		
	}
	return E_OK ;
}
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	08 95       	ret

000002fe <SetExternal_INT_enable>:

ERROR_STATUS SetExternal_INT_enable( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){
		switch(interruptCH_No){
     2fe:	62 30       	cpi	r22, 0x02	; 2
     300:	18 f0       	brcs	.+6      	; 0x308 <SetExternal_INT_enable+0xa>
     302:	62 30       	cpi	r22, 0x02	; 2
     304:	19 f0       	breq	.+6      	; 0x30c <SetExternal_INT_enable+0xe>
     306:	07 c0       	rjmp	.+14     	; 0x316 <SetExternal_INT_enable+0x18>
				INT2_EN_GPIO|= 1<<INT2_EN_BIT ;
			break;
			default:return E_NOK ;
	
		}
		return E_OK ;
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	08 95       	ret
			break;
			case ICU_CH1:
			break;
			case ICU_CH2:
				//SET_BIT(INT2_EN_GPIO , INT2_EN_BIT);
				INT2_EN_GPIO|= 1<<INT2_EN_BIT ;
     30c:	8b b7       	in	r24, 0x3b	; 59
     30e:	80 62       	ori	r24, 0x20	; 32
     310:	8b bf       	out	0x3b, r24	; 59
			break;
			default:return E_NOK ;
	
		}
		return E_OK ;
     312:	80 e0       	ldi	r24, 0x00	; 0
			case ICU_CH1:
			break;
			case ICU_CH2:
				//SET_BIT(INT2_EN_GPIO , INT2_EN_BIT);
				INT2_EN_GPIO|= 1<<INT2_EN_BIT ;
			break;
     314:	08 95       	ret
			default:return E_NOK ;
     316:	81 e0       	ldi	r24, 0x01	; 1
	
		}
		return E_OK ;
}
     318:	08 95       	ret

0000031a <Icu_Init>:

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg){
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <Icu_Init+0x6>
     320:	00 d0       	rcall	.+0      	; 0x322 <Icu_Init+0x8>
     322:	00 d0       	rcall	.+0      	; 0x324 <Icu_Init+0xa>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
	
		Timer_cfg_s Timer_cfg ;
		
		if (Icu_Cfg == NULL)
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	b1 f0       	breq	.+44     	; 0x358 <Icu_Init+0x3e>
		{
			return E_NOK;
		}
		
		g_interruptCH_No = Icu_Cfg->ICU_Ch_No ;
     32c:	fc 01       	movw	r30, r24
     32e:	20 81       	ld	r18, Z
     330:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <g_interruptCH_No>
					//
					//
				//}
*/
		
		switch(Icu_Cfg->ICU_Ch_Timer){
     334:	81 81       	ldd	r24, Z+1	; 0x01
     336:	88 23       	and	r24, r24
     338:	21 f0       	breq	.+8      	; 0x342 <Icu_Init+0x28>
     33a:	83 30       	cpi	r24, 0x03	; 3
     33c:	78 f4       	brcc	.+30     	; 0x35c <Icu_Init+0x42>
			case ICU_TIMER_CH2 :
			break;
			default:return E_NOK ;
			
		}
		return E_OK ;
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e c0       	rjmp	.+28     	; 0x35e <Icu_Init+0x44>
*/
		
		switch(Icu_Cfg->ICU_Ch_Timer){
			case ICU_TIMER_CH0 :
			
			Timer_cfg.Timer_CH_NO = TIMER_CH0 ;
     342:	19 82       	std	Y+1, r1	; 0x01
			Timer_cfg.Timer_Mode = TIMER_MODE ;
     344:	1a 82       	std	Y+2, r1	; 0x02
			Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
     346:	1b 82       	std	Y+3, r1	; 0x03
			Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_1024 ;
     348:	87 e0       	ldi	r24, 0x07	; 7
     34a:	8c 83       	std	Y+4, r24	; 0x04
			
			Timer_Init(&Timer_cfg);
     34c:	ce 01       	movw	r24, r28
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	0e 94 49 04 	call	0x892	; 0x892 <Timer_Init>
			case ICU_TIMER_CH2 :
			break;
			default:return E_NOK ;
			
		}
		return E_OK ;
     354:	80 e0       	ldi	r24, 0x00	; 0
			Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
			Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_1024 ;
			
			Timer_Init(&Timer_cfg);
			
			break;
     356:	03 c0       	rjmp	.+6      	; 0x35e <Icu_Init+0x44>
	
		Timer_cfg_s Timer_cfg ;
		
		if (Icu_Cfg == NULL)
		{
			return E_NOK;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	01 c0       	rjmp	.+2      	; 0x35e <Icu_Init+0x44>
			break;
			case ICU_TIMER_CH1 :
			break;
			case ICU_TIMER_CH2 :
			break;
			default:return E_NOK ;
     35c:	81 e0       	ldi	r24, 0x01	; 1
			
		}
		return E_OK ;
}
     35e:	26 96       	adiw	r28, 0x06	; 6
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <Icu_ReadTime>:

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time){
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <Icu_ReadTime+0xc>
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	f6 2e       	mov	r15, r22
     382:	8a 01       	movw	r16, r20
	uint16_t no_of_ticks = 0 ;
     384:	1a 82       	std	Y+2, r1	; 0x02
     386:	19 82       	std	Y+1, r1	; 0x01
	uint16_t timerOfTicks_Us  ;
	
	g_interruptEdge = SwICU_EdgeRisiging;
     388:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <g_interruptEdge>
	g_timerCH = Icu_Channel ;
     38c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_timerCH>
	switch(Icu_Channel){
     390:	88 23       	and	r24, r24
     392:	19 f0       	breq	.+6      	; 0x39a <Icu_ReadTime+0x2a>
     394:	83 30       	cpi	r24, 0x03	; 3
     396:	c8 f5       	brcc	.+114    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     398:	0a c0       	rjmp	.+20     	; 0x3ae <Icu_ReadTime+0x3e>
			case ICU_TIMER_CH0:
			
			SetExternal_INT_Edge(Icu_EdgeToEdge,g_interruptCH_No);
     39a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_interruptCH_No>
     39e:	8f 2d       	mov	r24, r15
     3a0:	0e 94 4f 01 	call	0x29e	; 0x29e <SetExternal_INT_Edge>
			SetExternal_INT_enable(Icu_EdgeToEdge,g_interruptCH_No) ;
     3a4:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <g_interruptCH_No>
     3a8:	8f 2d       	mov	r24, r15
     3aa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <SetExternal_INT_enable>
			case ICU_TIMER_CH2 :
			break;
			default:return E_NOK ;
	}
	
	while(!g_fallingEdgeFlag) ;
     3ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_fallingEdgeFlag>
     3b2:	88 23       	and	r24, r24
     3b4:	e1 f3       	breq	.-8      	; 0x3ae <Icu_ReadTime+0x3e>
	Timer_GetValue(g_timerCH ,&no_of_ticks) ;
     3b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_timerCH>
     3ba:	be 01       	movw	r22, r28
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Timer_GetValue>
	Timer_GetStatus(TIMER_CH0 ,&g_ovf_flag );
     3c4:	60 e6       	ldi	r22, 0x60	; 96
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 bd 04 	call	0x97a	; 0x97a <Timer_GetStatus>
	if (g_ovf_flag == 1)
     3ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	21 f4       	brne	.+8      	; 0x3de <Icu_ReadTime+0x6e>
	{
		no_of_ticks=256;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
	}
	g_ovf_flag = 0 ;
     3de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	timerOfTicks_Us = no_of_ticks * tickTimeUs ;
	*Icu_Time = timerOfTicks_Us ;
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	00 24       	eor	r0, r0
     3e8:	96 95       	lsr	r25
     3ea:	87 95       	ror	r24
     3ec:	07 94       	ror	r0
     3ee:	96 95       	lsr	r25
     3f0:	87 95       	ror	r24
     3f2:	07 94       	ror	r0
     3f4:	98 2f       	mov	r25, r24
     3f6:	80 2d       	mov	r24, r0
     3f8:	a0 e0       	ldi	r26, 0x00	; 0
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	f8 01       	movw	r30, r16
     3fe:	80 83       	st	Z, r24
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	a2 83       	std	Z+2, r26	; 0x02
     404:	b3 83       	std	Z+3, r27	; 0x03
	return E_OK ;
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			break;
			case ICU_TIMER_CH1 :
			break;
			case ICU_TIMER_CH2 :
			break;
			default:return E_NOK ;
     40a:	81 e0       	ldi	r24, 0x01	; 1
	}
	g_ovf_flag = 0 ;
	timerOfTicks_Us = no_of_ticks * tickTimeUs ;
	*Icu_Time = timerOfTicks_Us ;
	return E_OK ;
}
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	ff 90       	pop	r15
     41a:	08 95       	ret

0000041c <__vector_3>:




ISR(INT2_vect){
     41c:	1f 92       	push	r1
     41e:	0f 92       	push	r0
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	0f 92       	push	r0
     424:	11 24       	eor	r1, r1
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	4f 93       	push	r20
     42c:	5f 93       	push	r21
     42e:	6f 93       	push	r22
     430:	7f 93       	push	r23
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	ef 93       	push	r30
     43c:	ff 93       	push	r31
	
		switch (g_interruptEdge){
     43e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <g_interruptEdge>
     442:	88 23       	and	r24, r24
     444:	19 f0       	breq	.+6      	; 0x44c <__vector_3+0x30>
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	a9 f0       	breq	.+42     	; 0x474 <__vector_3+0x58>
     44a:	27 c0       	rjmp	.+78     	; 0x49a <__vector_3+0x7e>
///////////////////////////rising//////////////////////////////////////////////////////////		
			case SwICU_EdgeRisiging :
			DIO_Write(GPIOA,BIT1,HIGH);
     44c:	4f ef       	ldi	r20, 0xFF	; 255
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			
			switch(g_timerCH){
     456:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_timerCH>
     45a:	81 11       	cpse	r24, r1
     45c:	1e c0       	rjmp	.+60     	; 0x49a <__vector_3+0x7e>
				case ICU_TIMER_CH0 :
				//timer_Start();
				Timer_Start(TIMER_CH0,256);
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	71 e0       	ldi	r23, 0x01	; 1
     462:	0e 94 2b 05 	call	0xa56	; 0xa56 <Timer_Start>
				//update the control to start at faling edge
				MCUCSR &= ~(1<<6) ;
     466:	84 b7       	in	r24, 0x34	; 52
     468:	8f 7b       	andi	r24, 0xBF	; 191
     46a:	84 bf       	out	0x34, r24	; 52
				//Led_On(LED_0) ;
				g_interruptEdge = SwICU_EdgeFalling;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_interruptEdge>
				break;
     472:	13 c0       	rjmp	.+38     	; 0x49a <__vector_3+0x7e>
			}
			
			break;
/////////////////////////////falling/////////////////////////////////////////////////////			
			case SwICU_EdgeFalling :
			DIO_Write(GPIOA,BIT1,LOW);
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	62 e0       	ldi	r22, 0x02	; 2
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			switch(g_timerCH){
     47e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_timerCH>
     482:	81 11       	cpse	r24, r1
     484:	0a c0       	rjmp	.+20     	; 0x49a <__vector_3+0x7e>
				
				case ICU_TIMER_CH0 :
				
				Timer_Stop(TIMER_CH0);
     486:	0e 94 a4 04 	call	0x948	; 0x948 <Timer_Stop>
				
				MCUCSR |= 1<<6 ;
     48a:	84 b7       	in	r24, 0x34	; 52
     48c:	80 64       	ori	r24, 0x40	; 64
     48e:	84 bf       	out	0x34, r24	; 52
				//Led_Off(LED_0) ;
				g_interruptEdge = SwICU_EdgeRisiging;
     490:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <g_interruptEdge>
				g_fallingEdgeFlag = 1 ;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_fallingEdgeFlag>
				break;
		}
	break;
}
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <main>:
#include "TimerDelay.h"
#include "Steering.h"
#include "car_sm.h"

int main(void)
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <main+0x6>
     4c2:	1f 92       	push	r1
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
Pwm_Start(PWM_CH1A,50,100) ;
Pwm_Start(PWM_CH1B,50,100) ;*/



timerDelayMs(1000);
     4c8:	88 ee       	ldi	r24, 0xE8	; 232
     4ca:	93 e0       	ldi	r25, 0x03	; 3
     4cc:	0e 94 17 06 	call	0xc2e	; 0xc2e <timerDelayMs>

sei();
     4d0:	78 94       	sei

//Icu_cfg_s icuCfg;
	DIO_Cfg_s dioCfgrem;
	
	dioCfgrem.GPIO = GPIOB;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	89 83       	std	Y+1, r24	; 0x01
	dioCfgrem.pins = BIT7|BIT6|BIT5|BIT4;
     4d6:	80 ef       	ldi	r24, 0xF0	; 240
     4d8:	8a 83       	std	Y+2, r24	; 0x02
	dioCfgrem.dir =OUTPUT;
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_init(&dioCfgrem);
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
	//uint16_t distance;
	/*
	Icu_ReadTime(ICU_TIMER_CH0,ICU_RISE_TO_FALL,&time_);*/
	//Us_Init();
	
	Car_SM_Init();
     4e6:	0e 94 3e 00 	call	0x7c	; 0x7c <Car_SM_Init>
	
    while(1)
    {
		Car_SM_Update();
     4ea:	0e 94 4a 00 	call	0x94	; 0x94 <Car_SM_Update>
     4ee:	fd cf       	rjmp	.-6      	; 0x4ea <main+0x2e>

000004f0 <Motor_Init>:
 */ 

#include "motor.h"
#include "PWM.h"

 ERROR_STATUS Motor_Init(uint8_t Motor_Number){
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	27 97       	sbiw	r28, 0x07	; 7
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
	 
	 DIO_Cfg_s dioCfg_M;
	  Pwm_Cfg_s pwm_cfgA ;
	 Pwm_Cfg_s pwm_cfgB ;
	 
	 	switch (Motor_Number)
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	19 f0       	breq	.+6      	; 0x50e <Motor_Init+0x1e>
     508:	82 30       	cpi	r24, 0x02	; 2
     50a:	d1 f0       	breq	.+52     	; 0x540 <Motor_Init+0x50>
     50c:	32 c0       	rjmp	.+100    	; 0x572 <Motor_Init+0x82>
	 	{
		 	case MOTOR_1:
			
			 pwm_cfgA.Channel = PWM_CH1A ;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	8c 83       	std	Y+4, r24	; 0x04
			 pwm_cfgA.Prescaler = PWM_PRESCALER_1024 ;
     512:	86 e0       	ldi	r24, 0x06	; 6
     514:	8d 83       	std	Y+5, r24	; 0x05
			 Pwm_Init(&pwm_cfgA);
     516:	ce 01       	movw	r24, r28
     518:	04 96       	adiw	r24, 0x04	; 4
     51a:	0e 94 3b 03 	call	0x676	; 0x676 <Pwm_Init>
			 dioCfg_M.GPIO=MOTOR_OUT_1A_GPIO;
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	89 83       	std	Y+1, r24	; 0x01
			 dioCfg_M.pins=MOTOR_OUT_1A_BIT|MOTOR_OUT_1B_BIT|MOTOR_EN_1_BIT;
     522:	8c e1       	ldi	r24, 0x1C	; 28
     524:	8a 83       	std	Y+2, r24	; 0x02
			 dioCfg_M.dir=OUTPUT;
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	8b 83       	std	Y+3, r24	; 0x03
			 
			 
		 	 DIO_init (&dioCfg_M);
     52a:	ce 01       	movw	r24, r28
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>

		 	 DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	6a 81       	ldd	r22, Y+2	; 0x02
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>

			 default:
			 return E_NOK ;
			 break;
	 	}
	 return E_OK ;
     53c:	80 e0       	ldi	r24, 0x00	; 0
		 	 DIO_init (&dioCfg_M);

		 	 DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);

		 	
		 	break;
     53e:	1a c0       	rjmp	.+52     	; 0x574 <Motor_Init+0x84>
		 	
		 	case MOTOR_2:
			 
			 pwm_cfgB.Channel = PWM_CH1B ;
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	8e 83       	std	Y+6, r24	; 0x06
			 pwm_cfgB.Prescaler = PWM_PRESCALER_1024 ;
     544:	86 e0       	ldi	r24, 0x06	; 6
     546:	8f 83       	std	Y+7, r24	; 0x07
			 Pwm_Init(&pwm_cfgB);
     548:	ce 01       	movw	r24, r28
     54a:	06 96       	adiw	r24, 0x06	; 6
     54c:	0e 94 3b 03 	call	0x676	; 0x676 <Pwm_Init>
			 dioCfg_M.GPIO=MOTOR_OUT_2A_GPIO;
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	89 83       	std	Y+1, r24	; 0x01
			 dioCfg_M.pins=MOTOR_OUT_2A_BIT|MOTOR_OUT_2B_BIT|MOTOR_EN_2_BIT;
     554:	80 ee       	ldi	r24, 0xE0	; 224
     556:	8a 83       	std	Y+2, r24	; 0x02
			 dioCfg_M.dir=OUTPUT;
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	8b 83       	std	Y+3, r24	; 0x03
			 
			 
			 DIO_init (&dioCfg_M);
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>

			 DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	6a 81       	ldd	r22, Y+2	; 0x02
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>

			 default:
			 return E_NOK ;
			 break;
	 	}
	 return E_OK ;
     56e:	80 e0       	ldi	r24, 0x00	; 0
			 
			 DIO_init (&dioCfg_M);

			 DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);

			 break;
     570:	01 c0       	rjmp	.+2      	; 0x574 <Motor_Init+0x84>

			 default:
			 return E_NOK ;
     572:	81 e0       	ldi	r24, 0x01	; 1
			 break;
	 	}
	 return E_OK ;
 }
     574:	27 96       	adiw	r28, 0x07	; 7
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <Motor_Direction>:

ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
	
	
	
		switch (Motor_Number)
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	19 f0       	breq	.+6      	; 0x590 <Motor_Direction+0xa>
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	59 f1       	breq	.+86     	; 0x5e4 <Motor_Direction+0x5e>
     58e:	54 c0       	rjmp	.+168    	; 0x638 <Motor_Direction+0xb2>
		{
			//////////motor1///////////
			case MOTOR_1:
			switch (Motor_Direction)
     590:	61 30       	cpi	r22, 0x01	; 1
     592:	21 f0       	breq	.+8      	; 0x59c <Motor_Direction+0x16>
     594:	d8 f0       	brcs	.+54     	; 0x5cc <Motor_Direction+0x46>
     596:	62 30       	cpi	r22, 0x02	; 2
     598:	69 f0       	breq	.+26     	; 0x5b4 <Motor_Direction+0x2e>
     59a:	50 c0       	rjmp	.+160    	; 0x63c <Motor_Direction+0xb6>
			{
				case MOTOR_FORWARD:
				DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	68 e0       	ldi	r22, 0x08	; 8
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
				DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , HIGH);
     5a6:	4f ef       	ldi	r20, 0xFF	; 255
     5a8:	64 e0       	ldi	r22, 0x04	; 4
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			default:
			return E_NOK ;
			break;
		}
		
		return E_OK ;
     5b0:	80 e0       	ldi	r24, 0x00	; 0
			switch (Motor_Direction)
			{
				case MOTOR_FORWARD:
				DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
				DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , HIGH);
				break;
     5b2:	08 95       	ret
				
				case MOTOR_BACKWARD:
				
				DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , HIGH);
     5b4:	4f ef       	ldi	r20, 0xFF	; 255
     5b6:	68 e0       	ldi	r22, 0x08	; 8
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
				DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	64 e0       	ldi	r22, 0x04	; 4
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			default:
			return E_NOK ;
			break;
		}
		
		return E_OK ;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
				
				case MOTOR_BACKWARD:
				
				DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , HIGH);
				DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
				break;
     5ca:	08 95       	ret
				
				case MOTOR_STOP:
				
				DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	68 e0       	ldi	r22, 0x08	; 8
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
				DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	64 e0       	ldi	r22, 0x04	; 4
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			default:
			return E_NOK ;
			break;
		}
		
		return E_OK ;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
				
				case MOTOR_STOP:
				
				DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
				DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
				break;
     5e2:	08 95       	ret
			}
			break;
			
			////////motor2//////////
			case MOTOR_2:
			switch (Motor_Direction)
     5e4:	61 30       	cpi	r22, 0x01	; 1
     5e6:	21 f0       	breq	.+8      	; 0x5f0 <Motor_Direction+0x6a>
     5e8:	d8 f0       	brcs	.+54     	; 0x620 <Motor_Direction+0x9a>
     5ea:	62 30       	cpi	r22, 0x02	; 2
     5ec:	69 f0       	breq	.+26     	; 0x608 <Motor_Direction+0x82>
     5ee:	28 c0       	rjmp	.+80     	; 0x640 <Motor_Direction+0xba>
			{
				case MOTOR_FORWARD:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , HIGH);
     5f0:	4f ef       	ldi	r20, 0xFF	; 255
     5f2:	60 e4       	ldi	r22, 0x40	; 64
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	60 e8       	ldi	r22, 0x80	; 128
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			default:
			return E_NOK ;
			break;
		}
		
		return E_OK ;
     604:	80 e0       	ldi	r24, 0x00	; 0
			switch (Motor_Direction)
			{
				case MOTOR_FORWARD:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , HIGH);
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
				break;
     606:	08 95       	ret
				case MOTOR_BACKWARD:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	60 e4       	ldi	r22, 0x40	; 64
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , HIGH);
     612:	4f ef       	ldi	r20, 0xFF	; 255
     614:	60 e8       	ldi	r22, 0x80	; 128
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			default:
			return E_NOK ;
			break;
		}
		
		return E_OK ;
     61c:	80 e0       	ldi	r24, 0x00	; 0
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
				break;
				case MOTOR_BACKWARD:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , HIGH);
				break;
     61e:	08 95       	ret
				case MOTOR_STOP:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	60 e4       	ldi	r22, 0x40	; 64
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	60 e8       	ldi	r22, 0x80	; 128
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
			default:
			return E_NOK ;
			break;
		}
		
		return E_OK ;
     634:	80 e0       	ldi	r24, 0x00	; 0
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , HIGH);
				break;
				case MOTOR_STOP:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
				break;
     636:	08 95       	ret
				break;
			}
			break;
			
			default:
			return E_NOK ;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	08 95       	ret
			break;
		}
		
		return E_OK ;
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	08 95       	ret
				case MOTOR_STOP:
				DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
				DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
				break;
				default:
				return E_NOK ;
     640:	81 e0       	ldi	r24, 0x01	; 1
			return E_NOK ;
			break;
		}
		
		return E_OK ;
}
     642:	08 95       	ret

00000644 <Motor_Start>:

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
     644:	cf 93       	push	r28
     646:	c6 2f       	mov	r28, r22
	switch(Motor_Number){
     648:	81 30       	cpi	r24, 0x01	; 1
     64a:	19 f0       	breq	.+6      	; 0x652 <Motor_Start+0xe>
     64c:	82 30       	cpi	r24, 0x02	; 2
     64e:	41 f0       	breq	.+16     	; 0x660 <Motor_Start+0x1c>
     650:	0f c0       	rjmp	.+30     	; 0x670 <Motor_Start+0x2c>
		
		case MOTOR_1 :
		Pwm_Start(PWM_CH1A,Mot_Speed,100);
     652:	24 e6       	ldi	r18, 0x64	; 100
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 8e 03 	call	0x71c	; 0x71c <Pwm_Start>
		case MOTOR_2 :
		Pwm_Start(PWM_CH1B,Mot_Speed,100);
     660:	24 e6       	ldi	r18, 0x64	; 100
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	6c 2f       	mov	r22, r28
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	0e 94 8e 03 	call	0x71c	; 0x71c <Pwm_Start>
		default :
		return E_NOK ;
	}
	return E_OK ;
}
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <Pwm_Init>:
uint16_t g_Prescale_mask = 0 ;
#define PWM_PRE_SCALE 1024
#define PWM_PRE_scale_MASK T1_PRESCALER_1024


extern ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg){
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	00 d0       	rcall	.+0      	; 0x680 <Pwm_Init+0xa>
     680:	1f 92       	push	r1
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
	
		if (Pwm_Cfg==NULL)
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	e1 f1       	breq	.+120    	; 0x702 <Pwm_Init+0x8c>
     68a:	8c 01       	movw	r16, r24
		{
			return E_NOK ;
		}
	
		DIO_Cfg_s dioCfg;
		dioCfg.GPIO=PWM_GPIO1;
     68c:	83 e0       	ldi	r24, 0x03	; 3
     68e:	89 83       	std	Y+1, r24	; 0x01
		dioCfg.pins=PWM_BIT1|PWM_BIT2;
     690:	80 e3       	ldi	r24, 0x30	; 48
     692:	8a 83       	std	Y+2, r24	; 0x02
		dioCfg.dir=OUTPUT;
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	8b 83       	std	Y+3, r24	; 0x03
		DIO_init(&dioCfg);
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
		
		//gpioPinDirection(PWM_GPIO1 ,PWM_BIT1 , OUTPUT);
		//gpioPinDirection(PWM_GPIO2 ,PWM_BIT2 , OUTPUT);
	
	
	switch(Pwm_Cfg->Prescaler){
     6a0:	f8 01       	movw	r30, r16
     6a2:	81 81       	ldd	r24, Z+1	; 0x01
     6a4:	86 30       	cpi	r24, 0x06	; 6
     6a6:	40 f0       	brcs	.+16     	; 0x6b8 <Pwm_Init+0x42>
     6a8:	86 30       	cpi	r24, 0x06	; 6
     6aa:	69 f5       	brne	.+90     	; 0x706 <Pwm_Init+0x90>
		break; 
		case PWM_PRESCALER_256 :
		
		break;
		case PWM_PRESCALER_1024 :
		g_Prescale_mask = TIMER1_PRESCALER_1024_MASK ;
     6ac:	85 e0       	ldi	r24, 0x05	; 5
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <g_Prescale_mask+0x1>
     6b4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <g_Prescale_mask>
		break;
		default: 
		return E_NOK ;
	}
	
	switch(Pwm_Cfg->Channel){
     6b8:	f8 01       	movw	r30, r16
     6ba:	80 81       	ld	r24, Z
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	39 f0       	breq	.+14     	; 0x6ce <Pwm_Init+0x58>
     6c0:	20 f0       	brcs	.+8      	; 0x6ca <Pwm_Init+0x54>
     6c2:	82 30       	cpi	r24, 0x02	; 2
     6c4:	89 f0       	breq	.+34     	; 0x6e8 <Pwm_Init+0x72>
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	01 f5       	brne	.+64     	; 0x70a <Pwm_Init+0x94>
		return E_NOK ;
		
		
	}
	
	return E_OK ;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	1f c0       	rjmp	.+62     	; 0x70c <Pwm_Init+0x96>
		case PWM_CH0:
		
		break;
		case PWM_CH1A :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
     6ce:	8e b5       	in	r24, 0x2e	; 46
     6d0:	9f b5       	in	r25, 0x2f	; 47
     6d2:	80 61       	ori	r24, 0x10	; 16
     6d4:	92 60       	ori	r25, 0x02	; 2
     6d6:	9f bd       	out	0x2f, r25	; 47
     6d8:	8e bd       	out	0x2e, r24	; 46
		TCCR1 |= T1_OC1A_CLEAR ;
     6da:	8e b5       	in	r24, 0x2e	; 46
     6dc:	9f b5       	in	r25, 0x2f	; 47
     6de:	90 68       	ori	r25, 0x80	; 128
     6e0:	9f bd       	out	0x2f, r25	; 47
     6e2:	8e bd       	out	0x2e, r24	; 46
		return E_NOK ;
		
		
	}
	
	return E_OK ;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
		TCCR1 |= T1_OC1A_CLEAR ;
		
		
		break;
     6e6:	12 c0       	rjmp	.+36     	; 0x70c <Pwm_Init+0x96>
		case PWM_CH1B :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
     6e8:	8e b5       	in	r24, 0x2e	; 46
     6ea:	9f b5       	in	r25, 0x2f	; 47
     6ec:	80 61       	ori	r24, 0x10	; 16
     6ee:	92 60       	ori	r25, 0x02	; 2
     6f0:	9f bd       	out	0x2f, r25	; 47
     6f2:	8e bd       	out	0x2e, r24	; 46
		TCCR1 |= T1_OC1B_CLEAR ;
     6f4:	8e b5       	in	r24, 0x2e	; 46
     6f6:	9f b5       	in	r25, 0x2f	; 47
     6f8:	90 62       	ori	r25, 0x20	; 32
     6fa:	9f bd       	out	0x2f, r25	; 47
     6fc:	8e bd       	out	0x2e, r24	; 46
		return E_NOK ;
		
		
	}
	
	return E_OK ;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
		case PWM_CH1B :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
		TCCR1 |= T1_OC1B_CLEAR ;
		
		break;
     700:	05 c0       	rjmp	.+10     	; 0x70c <Pwm_Init+0x96>

extern ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg){
	
		if (Pwm_Cfg==NULL)
		{
			return E_NOK ;
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	03 c0       	rjmp	.+6      	; 0x70c <Pwm_Init+0x96>
		break;
		case PWM_PRESCALER_1024 :
		g_Prescale_mask = TIMER1_PRESCALER_1024_MASK ;
		break;
		default: 
		return E_NOK ;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	01 c0       	rjmp	.+2      	; 0x70c <Pwm_Init+0x96>
		break;
		case PWM_CH2 :
		
		break;
		default:
		return E_NOK ;
     70a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return E_OK ;
	
	
}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <Pwm_Start>:

extern ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy){
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	d8 2f       	mov	r29, r24
     72a:	c6 2f       	mov	r28, r22
	
		
	uint16_t ICR_TOP ;
	uint16_t duty_cycle_tick ;
	
	ICR_TOP = F_CPU / (2.0 * PWM_PRE_SCALE * Frequncy) ;
     72c:	ca 01       	movw	r24, r20
     72e:	b9 01       	movw	r22, r18
     730:	0e 94 52 07 	call	0xea4	; 0xea4 <__floatunsisf>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	55 e4       	ldi	r21, 0x45	; 69
     73c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__mulsf3>
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	74 e2       	ldi	r23, 0x24	; 36
     748:	84 e7       	ldi	r24, 0x74	; 116
     74a:	9b e4       	ldi	r25, 0x4B	; 75
     74c:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divsf3>
     750:	0e 94 23 07 	call	0xe46	; 0xe46 <__fixunssfsi>
     754:	6b 01       	movw	r12, r22
     756:	7c 01       	movw	r14, r24
	
	
	duty_cycle_tick = ICR_TOP *Duty/100.0 ;
     758:	8c 2f       	mov	r24, r28
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	8c 9d       	mul	r24, r12
     75e:	b0 01       	movw	r22, r0
     760:	8d 9d       	mul	r24, r13
     762:	70 0d       	add	r23, r0
     764:	9c 9d       	mul	r25, r12
     766:	70 0d       	add	r23, r0
     768:	11 24       	eor	r1, r1
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 52 07 	call	0xea4	; 0xea4 <__floatunsisf>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	48 ec       	ldi	r20, 0xC8	; 200
     778:	52 e4       	ldi	r21, 0x42	; 66
     77a:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divsf3>
     77e:	0e 94 23 07 	call	0xe46	; 0xe46 <__fixunssfsi>
	
		
		switch(Channel){
     782:	d1 30       	cpi	r29, 0x01	; 1
     784:	39 f0       	breq	.+14     	; 0x794 <Pwm_Start+0x78>
     786:	20 f0       	brcs	.+8      	; 0x790 <Pwm_Start+0x74>
     788:	d2 30       	cpi	r29, 0x02	; 2
     78a:	a1 f0       	breq	.+40     	; 0x7b4 <Pwm_Start+0x98>
     78c:	d3 30       	cpi	r29, 0x03	; 3
     78e:	11 f5       	brne	.+68     	; 0x7d4 <Pwm_Start+0xb8>
			default:
			return E_NOK ;
			
			
		}
		return E_OK ;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	21 c0       	rjmp	.+66     	; 0x7d6 <Pwm_Start+0xba>
			case PWM_CH0:
			
			break;
			case PWM_CH1A :
			
			ICR1 = ICR_TOP ;
     794:	d7 bc       	out	0x27, r13	; 39
     796:	c6 bc       	out	0x26, r12	; 38
			OCR1A = duty_cycle_tick ;
     798:	7b bd       	out	0x2b, r23	; 43
     79a:	6a bd       	out	0x2a, r22	; 42
			
			TCCR1|=g_Prescale_mask ;
     79c:	2e b5       	in	r18, 0x2e	; 46
     79e:	3f b5       	in	r19, 0x2f	; 47
     7a0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <g_Prescale_mask>
     7a4:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <g_Prescale_mask+0x1>
     7a8:	82 2b       	or	r24, r18
     7aa:	93 2b       	or	r25, r19
     7ac:	9f bd       	out	0x2f, r25	; 47
     7ae:	8e bd       	out	0x2e, r24	; 46
			default:
			return E_NOK ;
			
			
		}
		return E_OK ;
     7b0:	80 e0       	ldi	r24, 0x00	; 0
			OCR1A = duty_cycle_tick ;
			
			TCCR1|=g_Prescale_mask ;
			
			
			break;
     7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <Pwm_Start+0xba>
			case PWM_CH1B :
			
			ICR1 = ICR_TOP ;
     7b4:	d7 bc       	out	0x27, r13	; 39
     7b6:	c6 bc       	out	0x26, r12	; 38
			OCR1B = duty_cycle_tick ;
     7b8:	79 bd       	out	0x29, r23	; 41
     7ba:	68 bd       	out	0x28, r22	; 40
			TCCR1|=g_Prescale_mask ;
     7bc:	2e b5       	in	r18, 0x2e	; 46
     7be:	3f b5       	in	r19, 0x2f	; 47
     7c0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <g_Prescale_mask>
     7c4:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <g_Prescale_mask+0x1>
     7c8:	82 2b       	or	r24, r18
     7ca:	93 2b       	or	r25, r19
     7cc:	9f bd       	out	0x2f, r25	; 47
     7ce:	8e bd       	out	0x2e, r24	; 46
			default:
			return E_NOK ;
			
			
		}
		return E_OK ;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
			
			ICR1 = ICR_TOP ;
			OCR1B = duty_cycle_tick ;
			TCCR1|=g_Prescale_mask ;
			
			break;
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <Pwm_Start+0xba>
			case PWM_CH2 :
			
			break;
			default:
			return E_NOK ;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
			
		}
		return E_OK ;
	
	
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	08 95       	ret

000007e4 <Steering_Init>:
#include "Steering.h"
#include "motor.h"

ERROR_STATUS Steering_Init(void){
	
	Motor_Init(MOTOR_1);
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Motor_Init>
	Motor_Init(MOTOR_2);
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Motor_Init>
	return E_OK ;
}
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret

000007f4 <Steering_SteerCar>:


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	c6 2f       	mov	r28, r22
	
	ERROR_STATUS state_error = E_OK ;
	

	
	switch(Steering_CarCmd){
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	f9 f0       	breq	.+62     	; 0x83c <Steering_SteerCar+0x48>
     7fe:	28 f4       	brcc	.+10     	; 0x80a <Steering_SteerCar+0x16>
     800:	88 23       	and	r24, r24
     802:	41 f0       	breq	.+16     	; 0x814 <Steering_SteerCar+0x20>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	81 f0       	breq	.+32     	; 0x828 <Steering_SteerCar+0x34>
     808:	37 c0       	rjmp	.+110    	; 0x878 <__stack+0x19>
     80a:	83 30       	cpi	r24, 0x03	; 3
     80c:	09 f1       	breq	.+66     	; 0x850 <Steering_SteerCar+0x5c>
     80e:	84 30       	cpi	r24, 0x04	; 4
     810:	49 f1       	breq	.+82     	; 0x864 <__stack+0x5>
     812:	32 c0       	rjmp	.+100    	; 0x878 <__stack+0x19>
		case CAR_STOP:
		Motor_Direction(MOTOR_1,MOTOR_STOP);
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_STOP);
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	
	ERROR_STATUS state_error = E_OK ;
     824:	d0 e0       	ldi	r29, 0x00	; 0
	
	switch(Steering_CarCmd){
		case CAR_STOP:
		Motor_Direction(MOTOR_1,MOTOR_STOP);
		Motor_Direction(MOTOR_2,MOTOR_STOP);
		break;
     826:	29 c0       	rjmp	.+82     	; 0x87a <__stack+0x1b>
		case CAR_FORWARD:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	
	ERROR_STATUS state_error = E_OK ;
     838:	d0 e0       	ldi	r29, 0x00	; 0
		Motor_Direction(MOTOR_2,MOTOR_STOP);
		break;
		case CAR_FORWARD:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
		break;
     83a:	1f c0       	rjmp	.+62     	; 0x87a <__stack+0x1b>
		case CAR_BACKWARD:
		Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
     83c:	62 e0       	ldi	r22, 0x02	; 2
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     844:	62 e0       	ldi	r22, 0x02	; 2
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	
	ERROR_STATUS state_error = E_OK ;
     84c:	d0 e0       	ldi	r29, 0x00	; 0
		Motor_Direction(MOTOR_2,MOTOR_FORWARD);
		break;
		case CAR_BACKWARD:
		Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		break;
     84e:	15 c0       	rjmp	.+42     	; 0x87a <__stack+0x1b>
		case CAR_RIGHT:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     858:	62 e0       	ldi	r22, 0x02	; 2
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	
	ERROR_STATUS state_error = E_OK ;
     860:	d0 e0       	ldi	r29, 0x00	; 0
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		break;
		case CAR_RIGHT:
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		break;
     862:	0b c0       	rjmp	.+22     	; 0x87a <__stack+0x1b>
		case CAR_LEFT:
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 c3 02 	call	0x586	; 0x586 <Motor_Direction>
}


ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
	
	ERROR_STATUS state_error = E_OK ;
     874:	d0 e0       	ldi	r29, 0x00	; 0
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		break;
		case CAR_LEFT:
		Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
		Motor_Direction(MOTOR_1,MOTOR_FORWARD);
		break;
     876:	01 c0       	rjmp	.+2      	; 0x87a <__stack+0x1b>
		default:
		state_error=E_NOK;
     878:	d1 e0       	ldi	r29, 0x01	; 1
		
	}
		Motor_Start(MOTOR_1,speed);
     87a:	6c 2f       	mov	r22, r28
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	0e 94 22 03 	call	0x644	; 0x644 <Motor_Start>
		Motor_Start(MOTOR_2,speed);
     882:	6c 2f       	mov	r22, r28
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	0e 94 22 03 	call	0x644	; 0x644 <Motor_Start>
		return state_error ;
	
}
     88a:	8d 2f       	mov	r24, r29
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <Timer_Init>:
uint8_t g_ModeTimer2 = 0 ;


//////mode normal mode only

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
     892:	fc 01       	movw	r30, r24
	
	switch(Timer_cfg->Timer_CH_NO){
     894:	80 81       	ld	r24, Z
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	d9 f0       	breq	.+54     	; 0x8d0 <Timer_Init+0x3e>
     89a:	18 f0       	brcs	.+6      	; 0x8a2 <Timer_Init+0x10>
     89c:	82 30       	cpi	r24, 0x02	; 2
     89e:	91 f1       	breq	.+100    	; 0x904 <Timer_Init+0x72>
     8a0:	4b c0       	rjmp	.+150    	; 0x938 <Timer_Init+0xa6>
////////////////////////////////TIMER 0 //////////////////////////////////////
		case TIMER_CH0 :
			TCCR0 = ZERO_VALUE ;
     8a2:	13 be       	out	0x33, r1	; 51
	
		/*set the PreScale config*/
		
		g_prescaleTimer0 = Timer_cfg->Timer_Prescaler ;
     8a4:	83 81       	ldd	r24, Z+3	; 0x03
     8a6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <g_prescaleTimer0>
		g_ModeTimer0 = Timer_cfg->Timer_Mode ;
     8aa:	81 81       	ldd	r24, Z+1	; 0x01
     8ac:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <g_ModeTimer0>
		
	#ifdef NORMAL_MODE
	
			/*set normal or compare mode*/
				
			TCCR0 |= T0_NORMAL_MODE_MASK ;
     8b0:	83 b7       	in	r24, 0x33	; 51
     8b2:	83 bf       	out	0x33, r24	; 51
				
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	81 11       	cpse	r24, r1
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <Timer_Init+0x30>
			{
				TIMSK |=TIMER0_POLLING_MODE_MASK ;
     8ba:	89 b7       	in	r24, 0x39	; 57
     8bc:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	08 95       	ret
				
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
			{
				TIMSK |=TIMER0_POLLING_MODE_MASK ;
			}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	d9 f5       	brne	.+118    	; 0x93c <Timer_Init+0xaa>
				TIMSK |=TIMER0_INTERRUPT_NORMAL_MASK;
     8c6:	89 b7       	in	r24, 0x39	; 57
     8c8:	81 60       	ori	r24, 0x01	; 1
     8ca:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret
		
//////////////////////////TIMER 1 //////////////////////////////

		case TIMER_CH1 :
		
			TCCR1 = ZERO_VALUE;
     8d0:	1f bc       	out	0x2f, r1	; 47
     8d2:	1e bc       	out	0x2e, r1	; 46
			
			/*set the PreScale config*/
			
			g_prescaleTimer1 = Timer_cfg->Timer_Prescaler ;
     8d4:	83 81       	ldd	r24, Z+3	; 0x03
     8d6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <g_prescaleTimer1>
			g_ModeTimer1 = Timer_cfg->Timer_Mode ;
     8da:	81 81       	ldd	r24, Z+1	; 0x01
     8dc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <g_ModeTimer1>
		
			#ifdef NORMAL_MODE
			
				/*set normal or compare mode*/
				
				TCCR1 |= T1_NORMAL_MODE_MASK ;
     8e0:	8e b5       	in	r24, 0x2e	; 46
     8e2:	9f b5       	in	r25, 0x2f	; 47
     8e4:	9f bd       	out	0x2f, r25	; 47
     8e6:	8e bd       	out	0x2e, r24	; 46
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	81 11       	cpse	r24, r1
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <Timer_Init+0x64>
				{
					TIMSK |=TIMER1_POLLING_MODE_MASK ;
     8ee:	89 b7       	in	r24, 0x39	; 57
     8f0:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	08 95       	ret
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
				{
					TIMSK |=TIMER1_POLLING_MODE_MASK ;
					}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	19 f5       	brne	.+70     	; 0x940 <Timer_Init+0xae>
					TIMSK |=TIMER1_INTERRUPT_NORMAL_MASK;
     8fa:	89 b7       	in	r24, 0x39	; 57
     8fc:	84 60       	ori	r24, 0x04	; 4
     8fe:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 95       	ret
		break;
///////////////////////TIMER 2 //////////////////////////

		case TIMER_CH2 :
		
			TCCR2 = ZERO_VALUE;
     904:	15 bc       	out	0x25, r1	; 37
			
			/*UNKNOWN*/
			ASSR &= 0xF0 ;
     906:	82 b5       	in	r24, 0x22	; 34
     908:	80 7f       	andi	r24, 0xF0	; 240
     90a:	82 bd       	out	0x22, r24	; 34

			/*set the PreScale config*/
			
			g_prescaleTimer2 = Timer_cfg->Timer_Prescaler ;
     90c:	83 81       	ldd	r24, Z+3	; 0x03
     90e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_prescaleTimer2>
			g_ModeTimer2 = Timer_cfg->Timer_Mode ;
     912:	81 81       	ldd	r24, Z+1	; 0x01
     914:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_ModeTimer2>
			
			#ifdef NORMAL_MODE
			
			/*set normal or compare mode*/
			
			TCCR2 |= T2_NORMAL_MODE_MASK ;
     918:	85 b5       	in	r24, 0x25	; 37
     91a:	85 bd       	out	0x25, r24	; 37
			
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     91c:	82 81       	ldd	r24, Z+2	; 0x02
     91e:	81 11       	cpse	r24, r1
     920:	04 c0       	rjmp	.+8      	; 0x92a <Timer_Init+0x98>
			{
				TIMSK |=TIMER2_POLLING_MODE_MASK ;
     922:	89 b7       	in	r24, 0x39	; 57
     924:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	08 95       	ret
			
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
			{
				TIMSK |=TIMER2_POLLING_MODE_MASK ;
				}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	59 f4       	brne	.+22     	; 0x944 <Timer_Init+0xb2>
				TIMSK |=TIMER2_INTERRUPT_NORMAL_MASK;
     92e:	89 b7       	in	r24, 0x39	; 57
     930:	80 64       	ori	r24, 0x40	; 64
     932:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
		
		break;
///////////////////////ERROR //////////////////////////

		default :
		return E_NOK ;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	08 95       	ret
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	08 95       	ret
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	08 95       	ret
     944:	80 e0       	ldi	r24, 0x00	; 0
}
     946:	08 95       	ret

00000948 <Timer_Stop>:
	
}

ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO){
	
	switch (Timer_CH_NO)
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	49 f0       	breq	.+18     	; 0x95e <Timer_Stop+0x16>
     94c:	18 f0       	brcs	.+6      	; 0x954 <Timer_Stop+0xc>
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	69 f0       	breq	.+26     	; 0x96c <Timer_Stop+0x24>
     952:	11 c0       	rjmp	.+34     	; 0x976 <Timer_Stop+0x2e>
	{
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
     954:	83 b7       	in	r24, 0x33	; 51
     956:	88 7f       	andi	r24, 0xF8	; 248
     958:	83 bf       	out	0x33, r24	; 51
		break;
		default:
		return E_NOK ;
		break;
	}
	return E_OK ;
     95a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch (Timer_CH_NO)
	{
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
		break;
     95c:	08 95       	ret
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
     95e:	8e b5       	in	r24, 0x2e	; 46
     960:	9f b5       	in	r25, 0x2f	; 47
     962:	88 7f       	andi	r24, 0xF8	; 248
     964:	9f bd       	out	0x2f, r25	; 47
     966:	8e bd       	out	0x2e, r24	; 46
		break;
		default:
		return E_NOK ;
		break;
	}
	return E_OK ;
     968:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
		break;
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
		break;
     96a:	08 95       	ret
		case TIMER_CH2 :
		TCCR2 &=TIMER2_NO_CLOCK_MASK;
     96c:	85 b5       	in	r24, 0x25	; 37
     96e:	88 7f       	andi	r24, 0xF8	; 248
     970:	85 bd       	out	0x25, r24	; 37
		break;
		default:
		return E_NOK ;
		break;
	}
	return E_OK ;
     972:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
		break;
		case TIMER_CH2 :
		TCCR2 &=TIMER2_NO_CLOCK_MASK;
		break;
     974:	08 95       	ret
		default:
		return E_NOK ;
     976:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return E_OK ;
	
	
}
     978:	08 95       	ret

0000097a <Timer_GetStatus>:

ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, uint8_t* Data){
	
	if (Data == NULL)
     97a:	61 15       	cp	r22, r1
     97c:	71 05       	cpc	r23, r1
     97e:	99 f1       	breq	.+102    	; 0x9e6 <Timer_GetStatus+0x6c>
	{
		return E_NOK ;
	}
	
	
	switch (Timer_CH_NO )
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	99 f0       	breq	.+38     	; 0x9aa <Timer_GetStatus+0x30>
     984:	18 f0       	brcs	.+6      	; 0x98c <Timer_GetStatus+0x12>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	f9 f0       	breq	.+62     	; 0x9c8 <Timer_GetStatus+0x4e>
     98a:	2f c0       	rjmp	.+94     	; 0x9ea <Timer_GetStatus+0x70>
	{
		case TIMER_CH0 :
			if((TIFR&T0_OVF_FLAG_MASK) > ZERO_VALUE)
     98c:	08 b6       	in	r0, 0x38	; 56
     98e:	00 fe       	sbrs	r0, 0
     990:	08 c0       	rjmp	.+16     	; 0x9a2 <Timer_GetStatus+0x28>
			{
				(*Data) = TRUE ;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	fb 01       	movw	r30, r22
     996:	80 83       	st	Z, r24
				TIFR |=T0_OVF_FLAG_MASK ;
     998:	88 b7       	in	r24, 0x38	; 56
     99a:	81 60       	ori	r24, 0x01	; 1
     99c:	88 bf       	out	0x38, r24	; 56
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	08 95       	ret
			if((TIFR&T0_OVF_FLAG_MASK) > ZERO_VALUE)
			{
				(*Data) = TRUE ;
				TIFR |=T0_OVF_FLAG_MASK ;
			}else
			(*Data) = FALSE ;
     9a2:	fb 01       	movw	r30, r22
     9a4:	10 82       	st	Z, r1
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	08 95       	ret
			}else
			(*Data) = FALSE ;
		break;
		
		case TIMER_CH1 :
			if((TIFR&T1_OVF_FLAG_MASK) > ZERO_VALUE)
     9aa:	08 b6       	in	r0, 0x38	; 56
     9ac:	02 fe       	sbrs	r0, 2
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <Timer_GetStatus+0x46>
			{
				(*Data) = TRUE ;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	fb 01       	movw	r30, r22
     9b4:	80 83       	st	Z, r24
				TIFR |=T1_OVF_FLAG_MASK ;
     9b6:	88 b7       	in	r24, 0x38	; 56
     9b8:	84 60       	ori	r24, 0x04	; 4
     9ba:	88 bf       	out	0x38, r24	; 56
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	08 95       	ret
			if((TIFR&T1_OVF_FLAG_MASK) > ZERO_VALUE)
			{
				(*Data) = TRUE ;
				TIFR |=T1_OVF_FLAG_MASK ;
			}else
			(*Data) = FALSE ;
     9c0:	fb 01       	movw	r30, r22
     9c2:	10 82       	st	Z, r1
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	08 95       	ret
			}else
			(*Data) = FALSE ;
			break;
			
		case TIMER_CH2 :
		if((TIFR&T2_OVF_FLAG_MASK) > ZERO_VALUE)
     9c8:	08 b6       	in	r0, 0x38	; 56
     9ca:	06 fe       	sbrs	r0, 6
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <Timer_GetStatus+0x64>
		{
			(*Data) = TRUE ;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	fb 01       	movw	r30, r22
     9d2:	80 83       	st	Z, r24
			TIFR |=T2_OVF_FLAG_MASK ;
     9d4:	88 b7       	in	r24, 0x38	; 56
     9d6:	80 64       	ori	r24, 0x40	; 64
     9d8:	88 bf       	out	0x38, r24	; 56
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	08 95       	ret
		if((TIFR&T2_OVF_FLAG_MASK) > ZERO_VALUE)
		{
			(*Data) = TRUE ;
			TIFR |=T2_OVF_FLAG_MASK ;
		}else
		(*Data) = FALSE ;
     9de:	fb 01       	movw	r30, r22
     9e0:	10 82       	st	Z, r1
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	08 95       	ret

ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, uint8_t* Data){
	
	if (Data == NULL)
	{
		return E_NOK ;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	08 95       	ret
		}else
		(*Data) = FALSE ;
		break;
		
	default: 
	return E_NOK ;	
     9ea:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	return E_OK ;
	
}
     9ec:	08 95       	ret

000009ee <Timer_GetValue>:


ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data){
	if (Data == NULL)
     9ee:	61 15       	cp	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	d9 f0       	breq	.+54     	; 0xa2a <Timer_GetValue+0x3c>
	{
		return E_NOK ;
	}
	
		switch (Timer_CH_NO)
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	59 f0       	breq	.+22     	; 0xa0e <Timer_GetValue+0x20>
     9f8:	18 f0       	brcs	.+6      	; 0xa00 <Timer_GetValue+0x12>
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	79 f0       	breq	.+30     	; 0xa1c <Timer_GetValue+0x2e>
     9fe:	17 c0       	rjmp	.+46     	; 0xa2e <Timer_GetValue+0x40>
		{
			case TIMER_CH0 :
			(*Data) = TCNT0 ;
     a00:	82 b7       	in	r24, 0x32	; 50
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	fb 01       	movw	r30, r22
     a06:	91 83       	std	Z+1, r25	; 0x01
     a08:	80 83       	st	Z, r24
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
	
		switch (Timer_CH_NO)
		{
			case TIMER_CH0 :
			(*Data) = TCNT0 ;
			break;
     a0c:	08 95       	ret
			case TIMER_CH1 :
			(*Data) = TCNT1 ;
     a0e:	8c b5       	in	r24, 0x2c	; 44
     a10:	9d b5       	in	r25, 0x2d	; 45
     a12:	fb 01       	movw	r30, r22
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a18:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH0 :
			(*Data) = TCNT0 ;
			break;
			case TIMER_CH1 :
			(*Data) = TCNT1 ;
			break;
     a1a:	08 95       	ret
			case TIMER_CH2 :
			(*Data) = TCNT2 ;
     a1c:	84 b5       	in	r24, 0x24	; 36
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	fb 01       	movw	r30, r22
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	80 83       	st	Z, r24
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a26:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH1 :
			(*Data) = TCNT1 ;
			break;
			case TIMER_CH2 :
			(*Data) = TCNT2 ;
			break;
     a28:	08 95       	ret


ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data){
	if (Data == NULL)
	{
		return E_NOK ;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	08 95       	ret
			break;
			case TIMER_CH2 :
			(*Data) = TCNT2 ;
			break;
			default:
			return E_NOK ;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
		return E_OK ;
	
}
     a30:	08 95       	ret

00000a32 <Timer_SetValue>:

ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data){
	
	
		switch (Timer_CH_NO)
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	39 f0       	breq	.+14     	; 0xa44 <Timer_SetValue+0x12>
     a36:	18 f0       	brcs	.+6      	; 0xa3e <Timer_SetValue+0xc>
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	41 f0       	breq	.+16     	; 0xa4c <Timer_SetValue+0x1a>
     a3c:	0a c0       	rjmp	.+20     	; 0xa52 <Timer_SetValue+0x20>
		{
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
     a3e:	62 bf       	out	0x32, r22	; 50
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a40:	80 e0       	ldi	r24, 0x00	; 0
	
		switch (Timer_CH_NO)
		{
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
			break;
     a42:	08 95       	ret
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
     a44:	7d bd       	out	0x2d, r23	; 45
     a46:	6c bd       	out	0x2c, r22	; 44
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a48:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
			break;
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
			break;
     a4a:	08 95       	ret
			case TIMER_CH2 :
			 TCNT2 =(Data) ;
     a4c:	64 bd       	out	0x24, r22	; 36
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a4e:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
			break;
			case TIMER_CH2 :
			 TCNT2 =(Data) ;
			break;
     a50:	08 95       	ret
			default:
			return E_NOK ;
     a52:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
		return E_OK ;
		
}
     a54:	08 95       	ret

00000a56 <Timer_Start>:



	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
     a56:	cf 93       	push	r28
     a58:	c8 2f       	mov	r28, r24
	
		#ifdef NORMAL_MODE 
		      Timer_SetValue(Timer_CH_NO,256-Timer_Count)	;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	9c 01       	movw	r18, r24
     a60:	26 1b       	sub	r18, r22
     a62:	37 0b       	sbc	r19, r23
     a64:	b9 01       	movw	r22, r18
     a66:	8c 2f       	mov	r24, r28
     a68:	0e 94 19 05 	call	0xa32	; 0xa32 <Timer_SetValue>
			}
		
			
		#endif
	
		switch (Timer_CH_NO)
     a6c:	c1 30       	cpi	r28, 0x01	; 1
     a6e:	09 f4       	brne	.+2      	; 0xa72 <Timer_Start+0x1c>
     a70:	48 c0       	rjmp	.+144    	; 0xb02 <Timer_Start+0xac>
     a72:	20 f0       	brcs	.+8      	; 0xa7c <Timer_Start+0x26>
     a74:	c2 30       	cpi	r28, 0x02	; 2
     a76:	09 f4       	brne	.+2      	; 0xa7a <Timer_Start+0x24>
     a78:	98 c0       	rjmp	.+304    	; 0xbaa <Timer_Start+0x154>
     a7a:	ca c0       	rjmp	.+404    	; 0xc10 <Timer_Start+0x1ba>
		{
			case TIMER_CH0 :
			if (g_ModeTimer0 ==TIMER_MODE)
     a7c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <g_ModeTimer0>
     a80:	81 11       	cpse	r24, r1
     a82:	30 c0       	rjmp	.+96     	; 0xae4 <Timer_Start+0x8e>
			{
				switch (g_prescaleTimer0)
     a84:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_prescaleTimer0>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	c1 f0       	breq	.+48     	; 0xabc <Timer_Start+0x66>
     a8c:	28 f4       	brcc	.+10     	; 0xa98 <Timer_Start+0x42>
     a8e:	88 23       	and	r24, r24
     a90:	59 f0       	breq	.+22     	; 0xaa8 <Timer_Start+0x52>
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	71 f0       	breq	.+28     	; 0xab2 <Timer_Start+0x5c>
     a96:	be c0       	rjmp	.+380    	; 0xc14 <Timer_Start+0x1be>
     a98:	86 30       	cpi	r24, 0x06	; 6
     a9a:	d1 f0       	breq	.+52     	; 0xad0 <Timer_Start+0x7a>
     a9c:	87 30       	cpi	r24, 0x07	; 7
     a9e:	e9 f0       	breq	.+58     	; 0xada <Timer_Start+0x84>
     aa0:	84 30       	cpi	r24, 0x04	; 4
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <Timer_Start+0x50>
     aa4:	b7 c0       	rjmp	.+366    	; 0xc14 <Timer_Start+0x1be>
     aa6:	0f c0       	rjmp	.+30     	; 0xac6 <Timer_Start+0x70>
				{
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
     aa8:	83 b7       	in	r24, 0x33	; 51
     aaa:	88 6f       	ori	r24, 0xF8	; 248
     aac:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     aae:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer0)
				{
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
					break;
     ab0:	bc c0       	rjmp	.+376    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
     ab2:	83 b7       	in	r24, 0x33	; 51
     ab4:	81 60       	ori	r24, 0x01	; 1
     ab6:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
					break;
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
					break;
     aba:	b7 c0       	rjmp	.+366    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
     abc:	83 b7       	in	r24, 0x33	; 51
     abe:	82 60       	ori	r24, 0x02	; 2
     ac0:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
					break;
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
					break;
     ac4:	b2 c0       	rjmp	.+356    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_64:
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
     ac6:	83 b7       	in	r24, 0x33	; 51
     ac8:	83 60       	ori	r24, 0x03	; 3
     aca:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     acc:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
					break;
					case TIMER_PRESCALER_64:
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
					break;
     ace:	ad c0       	rjmp	.+346    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_256:
					TCCR0 |= TIMER0_PRESCALER_256_MASK ;
     ad0:	83 b7       	in	r24, 0x33	; 51
     ad2:	84 60       	ori	r24, 0x04	; 4
     ad4:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
					break;
					case TIMER_PRESCALER_256:
					TCCR0 |= TIMER0_PRESCALER_256_MASK ;

					break;
     ad8:	a8 c0       	rjmp	.+336    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR0 |= TIMER0_PRESCALER_1024_MASK ;
     ada:	83 b7       	in	r24, 0x33	; 51
     adc:	85 60       	ori	r24, 0x05	; 5
     ade:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     ae0:	80 e0       	ldi	r24, 0x00	; 0

					break;
					case TIMER_PRESCALER_1024:
					TCCR0 |= TIMER0_PRESCALER_1024_MASK ;

					break;
     ae2:	a3 c0       	rjmp	.+326    	; 0xc2a <Timer_Start+0x1d4>
					
					
				}
				
			}else if (g_ModeTimer0 == COUNTER_RISING_MODE){
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	29 f4       	brne	.+10     	; 0xaf2 <Timer_Start+0x9c>
				
				TCCR0|= COUNTER_RISING_MODE_MASK ;
     ae8:	83 b7       	in	r24, 0x33	; 51
     aea:	87 60       	ori	r24, 0x07	; 7
     aec:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	9c c0       	rjmp	.+312    	; 0xc2a <Timer_Start+0x1d4>
				
			}else if (g_ModeTimer0 == COUNTER_RISING_MODE){
				
				TCCR0|= COUNTER_RISING_MODE_MASK ;
				
			}else if (g_ModeTimer0 == COUNTER_FALLING_MODE){
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	09 f0       	breq	.+2      	; 0xaf8 <Timer_Start+0xa2>
     af6:	90 c0       	rjmp	.+288    	; 0xc18 <Timer_Start+0x1c2>
				
				TCCR0 |= COUNTER_FALLING_MODE_MASK ;
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	86 60       	ori	r24, 0x06	; 6
     afc:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	94 c0       	rjmp	.+296    	; 0xc2a <Timer_Start+0x1d4>
////////////// channel one /////////////////////

			case TIMER_CH1 :
			
			
			if (g_ModeTimer1 ==TIMER_MODE)
     b02:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <g_ModeTimer1>
     b06:	81 11       	cpse	r24, r1
     b08:	3d c0       	rjmp	.+122    	; 0xb84 <Timer_Start+0x12e>
			{
				switch (g_prescaleTimer1)
     b0a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <g_prescaleTimer1>
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	e9 f0       	breq	.+58     	; 0xb4c <Timer_Start+0xf6>
     b12:	28 f4       	brcc	.+10     	; 0xb1e <Timer_Start+0xc8>
     b14:	88 23       	and	r24, r24
     b16:	59 f0       	breq	.+22     	; 0xb2e <Timer_Start+0xd8>
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	89 f0       	breq	.+34     	; 0xb3e <Timer_Start+0xe8>
     b1c:	7f c0       	rjmp	.+254    	; 0xc1c <Timer_Start+0x1c6>
     b1e:	86 30       	cpi	r24, 0x06	; 6
     b20:	19 f1       	breq	.+70     	; 0xb68 <Timer_Start+0x112>
     b22:	87 30       	cpi	r24, 0x07	; 7
     b24:	41 f1       	breq	.+80     	; 0xb76 <Timer_Start+0x120>
     b26:	84 30       	cpi	r24, 0x04	; 4
     b28:	09 f0       	breq	.+2      	; 0xb2c <Timer_Start+0xd6>
     b2a:	78 c0       	rjmp	.+240    	; 0xc1c <Timer_Start+0x1c6>
     b2c:	16 c0       	rjmp	.+44     	; 0xb5a <Timer_Start+0x104>
				{
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
     b2e:	8e b5       	in	r24, 0x2e	; 46
     b30:	9f b5       	in	r25, 0x2f	; 47
     b32:	88 6f       	ori	r24, 0xF8	; 248
     b34:	9f 6f       	ori	r25, 0xFF	; 255
     b36:	9f bd       	out	0x2f, r25	; 47
     b38:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer1)
				{
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
					break;
     b3c:	76 c0       	rjmp	.+236    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
     b3e:	8e b5       	in	r24, 0x2e	; 46
     b40:	9f b5       	in	r25, 0x2f	; 47
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	9f bd       	out	0x2f, r25	; 47
     b46:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b48:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
					break;
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
					break;
     b4a:	6f c0       	rjmp	.+222    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
     b4c:	8e b5       	in	r24, 0x2e	; 46
     b4e:	9f b5       	in	r25, 0x2f	; 47
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	9f bd       	out	0x2f, r25	; 47
     b54:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b56:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
					break;
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
					break;
     b58:	68 c0       	rjmp	.+208    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_64:
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
     b5a:	8e b5       	in	r24, 0x2e	; 46
     b5c:	9f b5       	in	r25, 0x2f	; 47
     b5e:	83 60       	ori	r24, 0x03	; 3
     b60:	9f bd       	out	0x2f, r25	; 47
     b62:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b64:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
					break;
					case TIMER_PRESCALER_64:
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
					break;
     b66:	61 c0       	rjmp	.+194    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_256:
					TCCR1 |= TIMER1_PRESCALER_256_MASK ;
     b68:	8e b5       	in	r24, 0x2e	; 46
     b6a:	9f b5       	in	r25, 0x2f	; 47
     b6c:	84 60       	ori	r24, 0x04	; 4
     b6e:	9f bd       	out	0x2f, r25	; 47
     b70:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b72:	80 e0       	ldi	r24, 0x00	; 0
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
					break;
					case TIMER_PRESCALER_256:
					TCCR1 |= TIMER1_PRESCALER_256_MASK ;

					break;
     b74:	5a c0       	rjmp	.+180    	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR1 |= TIMER1_PRESCALER_1024_MASK ;
     b76:	8e b5       	in	r24, 0x2e	; 46
     b78:	9f b5       	in	r25, 0x2f	; 47
     b7a:	85 60       	ori	r24, 0x05	; 5
     b7c:	9f bd       	out	0x2f, r25	; 47
     b7e:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b80:	80 e0       	ldi	r24, 0x00	; 0

					break;
					case TIMER_PRESCALER_1024:
					TCCR1 |= TIMER1_PRESCALER_1024_MASK ;

					break;
     b82:	53 c0       	rjmp	.+166    	; 0xc2a <Timer_Start+0x1d4>
					
					
				}
				
				}else if (g_ModeTimer1 == COUNTER_RISING_MODE){
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	39 f4       	brne	.+14     	; 0xb96 <Timer_Start+0x140>
				
				TCCR1|= COUNTER_RISING_MODE_MASK ;
     b88:	8e b5       	in	r24, 0x2e	; 46
     b8a:	9f b5       	in	r25, 0x2f	; 47
     b8c:	87 60       	ori	r24, 0x07	; 7
     b8e:	9f bd       	out	0x2f, r25	; 47
     b90:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	4a c0       	rjmp	.+148    	; 0xc2a <Timer_Start+0x1d4>
				
				}else if (g_ModeTimer1 == COUNTER_RISING_MODE){
				
				TCCR1|= COUNTER_RISING_MODE_MASK ;
				
				}else if (g_ModeTimer1 == COUNTER_FALLING_MODE){
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	09 f0       	breq	.+2      	; 0xb9c <Timer_Start+0x146>
     b9a:	42 c0       	rjmp	.+132    	; 0xc20 <Timer_Start+0x1ca>
				
				TCCR1 |= COUNTER_FALLING_MODE_MASK ;
     b9c:	8e b5       	in	r24, 0x2e	; 46
     b9e:	9f b5       	in	r25, 0x2f	; 47
     ba0:	86 60       	ori	r24, 0x06	; 6
     ba2:	9f bd       	out	0x2f, r25	; 47
     ba4:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	40 c0       	rjmp	.+128    	; 0xc2a <Timer_Start+0x1d4>
			break;
			
//////////////// channel two /////////////////////
			case TIMER_CH2 :
			
			if (g_ModeTimer2 ==TIMER_MODE)
     baa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <g_ModeTimer2>
     bae:	81 11       	cpse	r24, r1
     bb0:	39 c0       	rjmp	.+114    	; 0xc24 <Timer_Start+0x1ce>
			{
				switch (g_prescaleTimer2)
     bb2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_prescaleTimer2>
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	b9 f0       	breq	.+46     	; 0xbe8 <Timer_Start+0x192>
     bba:	28 f4       	brcc	.+10     	; 0xbc6 <Timer_Start+0x170>
     bbc:	88 23       	and	r24, r24
     bbe:	51 f0       	breq	.+20     	; 0xbd4 <Timer_Start+0x17e>
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	69 f0       	breq	.+26     	; 0xbde <Timer_Start+0x188>
     bc4:	31 c0       	rjmp	.+98     	; 0xc28 <Timer_Start+0x1d2>
     bc6:	86 30       	cpi	r24, 0x06	; 6
     bc8:	c9 f0       	breq	.+50     	; 0xbfc <Timer_Start+0x1a6>
     bca:	87 30       	cpi	r24, 0x07	; 7
     bcc:	e1 f0       	breq	.+56     	; 0xc06 <Timer_Start+0x1b0>
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	59 f5       	brne	.+86     	; 0xc28 <Timer_Start+0x1d2>
     bd2:	0f c0       	rjmp	.+30     	; 0xbf2 <Timer_Start+0x19c>
				{
					case TIMER_NO_CLOCK :
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
     bd4:	85 b5       	in	r24, 0x25	; 37
     bd6:	88 6f       	ori	r24, 0xF8	; 248
     bd8:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     bda:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer2)
				{
					case TIMER_NO_CLOCK :
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
					break;
     bdc:	26 c0       	rjmp	.+76     	; 0xc2a <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_NO:
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
     bde:	85 b5       	in	r24, 0x25	; 37
     be0:	81 60       	ori	r24, 0x01	; 1
     be2:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     be4:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
					break;
					
					case TIMER_PRESCALER_NO:
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
					break;
     be6:	21 c0       	rjmp	.+66     	; 0xc2a <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_8 :
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
     be8:	85 b5       	in	r24, 0x25	; 37
     bea:	82 60       	ori	r24, 0x02	; 2
     bec:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     bee:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
					break;
					
					case TIMER_PRESCALER_8 :
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
					break;
     bf0:	1c c0       	rjmp	.+56     	; 0xc2a <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_64:
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
     bf2:	85 b5       	in	r24, 0x25	; 37
     bf4:	84 60       	ori	r24, 0x04	; 4
     bf6:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     bf8:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
					break;
					
					case TIMER_PRESCALER_64:
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
					break;
     bfa:	17 c0       	rjmp	.+46     	; 0xc2a <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_256:
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
     bfc:	85 b5       	in	r24, 0x25	; 37
     bfe:	86 60       	ori	r24, 0x06	; 6
     c00:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c02:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
					break;
					
					case TIMER_PRESCALER_256:
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
					break;
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
     c06:	85 b5       	in	r24, 0x25	; 37
     c08:	87 60       	ori	r24, 0x07	; 7
     c0a:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
					break;
					
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
					break;
     c0e:	0d c0       	rjmp	.+26     	; 0xc2a <Timer_Start+0x1d4>
			return E_NOK ;
			// end if 
			break;	
			
			default: 
			return E_NOK ;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	0b c0       	rjmp	.+22     	; 0xc2a <Timer_Start+0x1d4>
			break;
		}/// end switch case channels
		
	return E_OK ;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	09 c0       	rjmp	.+18     	; 0xc2a <Timer_Start+0x1d4>
			}else if (g_ModeTimer0 == COUNTER_FALLING_MODE){
				
				TCCR0 |= COUNTER_FALLING_MODE_MASK ;
				
			}else
				return E_NOK ;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	07 c0       	rjmp	.+14     	; 0xc2a <Timer_Start+0x1d4>
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	05 c0       	rjmp	.+10     	; 0xc2a <Timer_Start+0x1d4>
				}else if (g_ModeTimer1 == COUNTER_FALLING_MODE){
				
				TCCR1 |= COUNTER_FALLING_MODE_MASK ;
				
				}else 
				return E_NOK ; 
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <Timer_Start+0x1d4>
					break;	
					
				}///end switch case prescale
				
			}else
			return E_NOK ;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
					break;
					
					default: 
					return E_NOK ;
     c28:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}/// end switch case channels
		
	return E_OK ;
	
}
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <timerDelayMs>:
 * Created: 2/17/2020 5:16:33 PM
 *  Author: MENA
 */ 
#include "Timer.h"
#include "TimerDelay.h"
void timerDelayMs(uint16_t u16_delay_in_ms){
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	27 97       	sbiw	r28, 0x07	; 7
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	8c 01       	movw	r16, r24
	
	uint8_t ovf_flag = 0 ;
     c48:	19 82       	std	Y+1, r1	; 0x01
	Timer_cfg_s Timer_cfg ;
	Timer_cfg.Timer_CH_NO = TIMER_CH2 ;
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	8a 83       	std	Y+2, r24	; 0x02
	Timer_cfg.Timer_Mode = TIMER_MODE ;
     c4e:	1b 82       	std	Y+3, r1	; 0x03
	Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
     c50:	1c 82       	std	Y+4, r1	; 0x04
	Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64 ;
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	8d 83       	std	Y+5, r24	; 0x05
	
	Timer_Init(&Timer_cfg) ;
     c56:	ce 01       	movw	r24, r28
     c58:	02 96       	adiw	r24, 0x02	; 2
     c5a:	0e 94 49 04 	call	0x892	; 0x892 <Timer_Init>
	// base 5 since 250 tick is 1 milisec + error 12
		
		// no of ticks for one milli sec
		
		Timer_Start(Timer_cfg.Timer_CH_NO , 239 );
     c5e:	6f ee       	ldi	r22, 0xEF	; 239
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	0e 94 2b 05 	call	0xa56	; 0xa56 <Timer_Start>
		
		while (u16_delay_in_ms)
     c68:	01 15       	cp	r16, r1
     c6a:	11 05       	cpc	r17, r1
     c6c:	71 f0       	breq	.+28     	; 0xc8a <timerDelayMs+0x5c>
		{
			Timer_GetStatus (Timer_cfg.Timer_CH_NO , &ovf_flag);
     c6e:	be 01       	movw	r22, r28
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	0e 94 bd 04 	call	0x97a	; 0x97a <Timer_GetStatus>
			if(ovf_flag == TRUE)
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	11 f4       	brne	.+4      	; 0xc84 <timerDelayMs+0x56>
			{
				u16_delay_in_ms -- ;
     c80:	01 50       	subi	r16, 0x01	; 1
     c82:	11 09       	sbc	r17, r1
		
		// no of ticks for one milli sec
		
		Timer_Start(Timer_cfg.Timer_CH_NO , 239 );
		
		while (u16_delay_in_ms)
     c84:	01 15       	cp	r16, r1
     c86:	11 05       	cpc	r17, r1
     c88:	91 f7       	brne	.-28     	; 0xc6e <timerDelayMs+0x40>
			{
				u16_delay_in_ms -- ;
			}
			
		}
		Timer_Stop(Timer_cfg.Timer_CH_NO);
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	0e 94 a4 04 	call	0x948	; 0x948 <Timer_Stop>
	
	
     c90:	27 96       	adiw	r28, 0x07	; 7
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <Us_Init>:
 */ 

#include "Us.h"
#include "TimerDelay.h"

ERROR_STATUS Us_Init(void){
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	00 d0       	rcall	.+0      	; 0xcac <Us_Init+0x6>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
	
		Icu_cfg_s icuCfg;
		icuCfg.ICU_Ch_Timer = ICU_TIMER_CH0;
     cb0:	1a 82       	std	Y+2, r1	; 0x02
		icuCfg.ICU_Ch_No = ICU_CH2;
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	89 83       	std	Y+1, r24	; 0x01
		Icu_Init(&icuCfg);
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	0e 94 8d 01 	call	0x31a	; 0x31a <Icu_Init>
		return E_OK ;
}
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <Us_Trigger>:

ERROR_STATUS Us_Trigger(void){
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <Us_Trigger+0x6>
     cd0:	1f 92       	push	r1
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s dioCfgtrig;
	
	dioCfgtrig.GPIO = GPIOC;
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	89 83       	std	Y+1, r24	; 0x01
	dioCfgtrig.pins = BIT7;
     cda:	80 e8       	ldi	r24, 0x80	; 128
     cdc:	8a 83       	std	Y+2, r24	; 0x02
	dioCfgtrig.dir =OUTPUT;
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init(&dioCfgtrig);
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_init>
	
	//trigger
DIO_Write(GPIOC,BIT7,HIGH)	;
     cea:	4f ef       	ldi	r20, 0xFF	; 255
     cec:	60 e8       	ldi	r22, 0x80	; 128
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
	timerDelayMs(10);
     cf4:	8a e0       	ldi	r24, 0x0A	; 10
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 17 06 	call	0xc2e	; 0xc2e <timerDelayMs>
	
DIO_Write(GPIOC,BIT7,LOW)	;
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	60 e8       	ldi	r22, 0x80	; 128
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	0e 94 07 01 	call	0x20e	; 0x20e <DIO_Write>
	
	return E_OK ;
	
}
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <Us_GetDistance>:



ERROR_STATUS Us_GetDistance(uint16_t *Distance){
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <Us_GetDistance+0xa>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <Us_GetDistance+0xc>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	8c 01       	movw	r16, r24
	
		
		uint32_t timerOfTicks_Us  ;
		
		Icu_ReadTime(ICU_TIMER_CH0,ICU_RISE_TO_FALL,&timerOfTicks_Us);
     d26:	ae 01       	movw	r20, r28
     d28:	4f 5f       	subi	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 b8 01 	call	0x370	; 0x370 <Icu_ReadTime>
		
		
		*Distance = timerOfTicks_Us/58 ;
     d34:	69 81       	ldd	r22, Y+1	; 0x01
     d36:	7a 81       	ldd	r23, Y+2	; 0x02
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	2a e3       	ldi	r18, 0x3A	; 58
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 4d 08 	call	0x109a	; 0x109a <__udivmodsi4>
     d48:	f8 01       	movw	r30, r16
     d4a:	31 83       	std	Z+1, r19	; 0x01
     d4c:	20 83       	st	Z, r18
	
		//Distance = 3 ;
		return E_OK;
	
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	08 95       	ret

00000d62 <__divsf3>:
     d62:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__divsf3x>
     d66:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
     d6a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fp_pscB>
     d6e:	58 f0       	brcs	.+22     	; 0xd86 <__divsf3+0x24>
     d70:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscA>
     d74:	40 f0       	brcs	.+16     	; 0xd86 <__divsf3+0x24>
     d76:	29 f4       	brne	.+10     	; 0xd82 <__divsf3+0x20>
     d78:	5f 3f       	cpi	r21, 0xFF	; 255
     d7a:	29 f0       	breq	.+10     	; 0xd86 <__divsf3+0x24>
     d7c:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
     d80:	51 11       	cpse	r21, r1
     d82:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>
     d86:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_nan>

00000d8a <__divsf3x>:
     d8a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_split3>
     d8e:	68 f3       	brcs	.-38     	; 0xd6a <__divsf3+0x8>

00000d90 <__divsf3_pse>:
     d90:	99 23       	and	r25, r25
     d92:	b1 f3       	breq	.-20     	; 0xd80 <__divsf3+0x1e>
     d94:	55 23       	and	r21, r21
     d96:	91 f3       	breq	.-28     	; 0xd7c <__divsf3+0x1a>
     d98:	95 1b       	sub	r25, r21
     d9a:	55 0b       	sbc	r21, r21
     d9c:	bb 27       	eor	r27, r27
     d9e:	aa 27       	eor	r26, r26
     da0:	62 17       	cp	r22, r18
     da2:	73 07       	cpc	r23, r19
     da4:	84 07       	cpc	r24, r20
     da6:	38 f0       	brcs	.+14     	; 0xdb6 <__divsf3_pse+0x26>
     da8:	9f 5f       	subi	r25, 0xFF	; 255
     daa:	5f 4f       	sbci	r21, 0xFF	; 255
     dac:	22 0f       	add	r18, r18
     dae:	33 1f       	adc	r19, r19
     db0:	44 1f       	adc	r20, r20
     db2:	aa 1f       	adc	r26, r26
     db4:	a9 f3       	breq	.-22     	; 0xda0 <__divsf3_pse+0x10>
     db6:	35 d0       	rcall	.+106    	; 0xe22 <__divsf3_pse+0x92>
     db8:	0e 2e       	mov	r0, r30
     dba:	3a f0       	brmi	.+14     	; 0xdca <__divsf3_pse+0x3a>
     dbc:	e0 e8       	ldi	r30, 0x80	; 128
     dbe:	32 d0       	rcall	.+100    	; 0xe24 <__divsf3_pse+0x94>
     dc0:	91 50       	subi	r25, 0x01	; 1
     dc2:	50 40       	sbci	r21, 0x00	; 0
     dc4:	e6 95       	lsr	r30
     dc6:	00 1c       	adc	r0, r0
     dc8:	ca f7       	brpl	.-14     	; 0xdbc <__divsf3_pse+0x2c>
     dca:	2b d0       	rcall	.+86     	; 0xe22 <__divsf3_pse+0x92>
     dcc:	fe 2f       	mov	r31, r30
     dce:	29 d0       	rcall	.+82     	; 0xe22 <__divsf3_pse+0x92>
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	88 1f       	adc	r24, r24
     dd6:	bb 1f       	adc	r27, r27
     dd8:	26 17       	cp	r18, r22
     dda:	37 07       	cpc	r19, r23
     ddc:	48 07       	cpc	r20, r24
     dde:	ab 07       	cpc	r26, r27
     de0:	b0 e8       	ldi	r27, 0x80	; 128
     de2:	09 f0       	breq	.+2      	; 0xde6 <__divsf3_pse+0x56>
     de4:	bb 0b       	sbc	r27, r27
     de6:	80 2d       	mov	r24, r0
     de8:	bf 01       	movw	r22, r30
     dea:	ff 27       	eor	r31, r31
     dec:	93 58       	subi	r25, 0x83	; 131
     dee:	5f 4f       	sbci	r21, 0xFF	; 255
     df0:	3a f0       	brmi	.+14     	; 0xe00 <__divsf3_pse+0x70>
     df2:	9e 3f       	cpi	r25, 0xFE	; 254
     df4:	51 05       	cpc	r21, r1
     df6:	78 f0       	brcs	.+30     	; 0xe16 <__divsf3_pse+0x86>
     df8:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
     dfc:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>
     e00:	5f 3f       	cpi	r21, 0xFF	; 255
     e02:	e4 f3       	brlt	.-8      	; 0xdfc <__divsf3_pse+0x6c>
     e04:	98 3e       	cpi	r25, 0xE8	; 232
     e06:	d4 f3       	brlt	.-12     	; 0xdfc <__divsf3_pse+0x6c>
     e08:	86 95       	lsr	r24
     e0a:	77 95       	ror	r23
     e0c:	67 95       	ror	r22
     e0e:	b7 95       	ror	r27
     e10:	f7 95       	ror	r31
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	c9 f7       	brne	.-14     	; 0xe08 <__divsf3_pse+0x78>
     e16:	88 0f       	add	r24, r24
     e18:	91 1d       	adc	r25, r1
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	97 f9       	bld	r25, 7
     e20:	08 95       	ret
     e22:	e1 e0       	ldi	r30, 0x01	; 1
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	bb 1f       	adc	r27, r27
     e2c:	62 17       	cp	r22, r18
     e2e:	73 07       	cpc	r23, r19
     e30:	84 07       	cpc	r24, r20
     e32:	ba 07       	cpc	r27, r26
     e34:	20 f0       	brcs	.+8      	; 0xe3e <__divsf3_pse+0xae>
     e36:	62 1b       	sub	r22, r18
     e38:	73 0b       	sbc	r23, r19
     e3a:	84 0b       	sbc	r24, r20
     e3c:	ba 0b       	sbc	r27, r26
     e3e:	ee 1f       	adc	r30, r30
     e40:	88 f7       	brcc	.-30     	; 0xe24 <__divsf3_pse+0x94>
     e42:	e0 95       	com	r30
     e44:	08 95       	ret

00000e46 <__fixunssfsi>:
     e46:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_splitA>
     e4a:	88 f0       	brcs	.+34     	; 0xe6e <__fixunssfsi+0x28>
     e4c:	9f 57       	subi	r25, 0x7F	; 127
     e4e:	98 f0       	brcs	.+38     	; 0xe76 <__fixunssfsi+0x30>
     e50:	b9 2f       	mov	r27, r25
     e52:	99 27       	eor	r25, r25
     e54:	b7 51       	subi	r27, 0x17	; 23
     e56:	b0 f0       	brcs	.+44     	; 0xe84 <__fixunssfsi+0x3e>
     e58:	e1 f0       	breq	.+56     	; 0xe92 <__fixunssfsi+0x4c>
     e5a:	66 0f       	add	r22, r22
     e5c:	77 1f       	adc	r23, r23
     e5e:	88 1f       	adc	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	1a f0       	brmi	.+6      	; 0xe6a <__fixunssfsi+0x24>
     e64:	ba 95       	dec	r27
     e66:	c9 f7       	brne	.-14     	; 0xe5a <__fixunssfsi+0x14>
     e68:	14 c0       	rjmp	.+40     	; 0xe92 <__fixunssfsi+0x4c>
     e6a:	b1 30       	cpi	r27, 0x01	; 1
     e6c:	91 f0       	breq	.+36     	; 0xe92 <__fixunssfsi+0x4c>
     e6e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_zero>
     e72:	b1 e0       	ldi	r27, 0x01	; 1
     e74:	08 95       	ret
     e76:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__fp_zero>
     e7a:	67 2f       	mov	r22, r23
     e7c:	78 2f       	mov	r23, r24
     e7e:	88 27       	eor	r24, r24
     e80:	b8 5f       	subi	r27, 0xF8	; 248
     e82:	39 f0       	breq	.+14     	; 0xe92 <__fixunssfsi+0x4c>
     e84:	b9 3f       	cpi	r27, 0xF9	; 249
     e86:	cc f3       	brlt	.-14     	; 0xe7a <__fixunssfsi+0x34>
     e88:	86 95       	lsr	r24
     e8a:	77 95       	ror	r23
     e8c:	67 95       	ror	r22
     e8e:	b3 95       	inc	r27
     e90:	d9 f7       	brne	.-10     	; 0xe88 <__fixunssfsi+0x42>
     e92:	3e f4       	brtc	.+14     	; 0xea2 <__fixunssfsi+0x5c>
     e94:	90 95       	com	r25
     e96:	80 95       	com	r24
     e98:	70 95       	com	r23
     e9a:	61 95       	neg	r22
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	08 95       	ret

00000ea4 <__floatunsisf>:
     ea4:	e8 94       	clt
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <__floatsisf+0x12>

00000ea8 <__floatsisf>:
     ea8:	97 fb       	bst	r25, 7
     eaa:	3e f4       	brtc	.+14     	; 0xeba <__floatsisf+0x12>
     eac:	90 95       	com	r25
     eae:	80 95       	com	r24
     eb0:	70 95       	com	r23
     eb2:	61 95       	neg	r22
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	99 23       	and	r25, r25
     ebc:	a9 f0       	breq	.+42     	; 0xee8 <__floatsisf+0x40>
     ebe:	f9 2f       	mov	r31, r25
     ec0:	96 e9       	ldi	r25, 0x96	; 150
     ec2:	bb 27       	eor	r27, r27
     ec4:	93 95       	inc	r25
     ec6:	f6 95       	lsr	r31
     ec8:	87 95       	ror	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b7 95       	ror	r27
     ed0:	f1 11       	cpse	r31, r1
     ed2:	f8 cf       	rjmp	.-16     	; 0xec4 <__floatsisf+0x1c>
     ed4:	fa f4       	brpl	.+62     	; 0xf14 <__floatsisf+0x6c>
     ed6:	bb 0f       	add	r27, r27
     ed8:	11 f4       	brne	.+4      	; 0xede <__floatsisf+0x36>
     eda:	60 ff       	sbrs	r22, 0
     edc:	1b c0       	rjmp	.+54     	; 0xf14 <__floatsisf+0x6c>
     ede:	6f 5f       	subi	r22, 0xFF	; 255
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	8f 4f       	sbci	r24, 0xFF	; 255
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	16 c0       	rjmp	.+44     	; 0xf14 <__floatsisf+0x6c>
     ee8:	88 23       	and	r24, r24
     eea:	11 f0       	breq	.+4      	; 0xef0 <__floatsisf+0x48>
     eec:	96 e9       	ldi	r25, 0x96	; 150
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <__floatsisf+0x6a>
     ef0:	77 23       	and	r23, r23
     ef2:	21 f0       	breq	.+8      	; 0xefc <__floatsisf+0x54>
     ef4:	9e e8       	ldi	r25, 0x8E	; 142
     ef6:	87 2f       	mov	r24, r23
     ef8:	76 2f       	mov	r23, r22
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <__floatsisf+0x5e>
     efc:	66 23       	and	r22, r22
     efe:	71 f0       	breq	.+28     	; 0xf1c <__floatsisf+0x74>
     f00:	96 e8       	ldi	r25, 0x86	; 134
     f02:	86 2f       	mov	r24, r22
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	2a f0       	brmi	.+10     	; 0xf14 <__floatsisf+0x6c>
     f0a:	9a 95       	dec	r25
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	88 1f       	adc	r24, r24
     f12:	da f7       	brpl	.-10     	; 0xf0a <__floatsisf+0x62>
     f14:	88 0f       	add	r24, r24
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	97 f9       	bld	r25, 7
     f1c:	08 95       	ret

00000f1e <__fp_inf>:
     f1e:	97 f9       	bld	r25, 7
     f20:	9f 67       	ori	r25, 0x7F	; 127
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	08 95       	ret

00000f2a <__fp_nan>:
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	80 ec       	ldi	r24, 0xC0	; 192
     f2e:	08 95       	ret

00000f30 <__fp_pscA>:
     f30:	00 24       	eor	r0, r0
     f32:	0a 94       	dec	r0
     f34:	16 16       	cp	r1, r22
     f36:	17 06       	cpc	r1, r23
     f38:	18 06       	cpc	r1, r24
     f3a:	09 06       	cpc	r0, r25
     f3c:	08 95       	ret

00000f3e <__fp_pscB>:
     f3e:	00 24       	eor	r0, r0
     f40:	0a 94       	dec	r0
     f42:	12 16       	cp	r1, r18
     f44:	13 06       	cpc	r1, r19
     f46:	14 06       	cpc	r1, r20
     f48:	05 06       	cpc	r0, r21
     f4a:	08 95       	ret

00000f4c <__fp_round>:
     f4c:	09 2e       	mov	r0, r25
     f4e:	03 94       	inc	r0
     f50:	00 0c       	add	r0, r0
     f52:	11 f4       	brne	.+4      	; 0xf58 <__fp_round+0xc>
     f54:	88 23       	and	r24, r24
     f56:	52 f0       	brmi	.+20     	; 0xf6c <__fp_round+0x20>
     f58:	bb 0f       	add	r27, r27
     f5a:	40 f4       	brcc	.+16     	; 0xf6c <__fp_round+0x20>
     f5c:	bf 2b       	or	r27, r31
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__fp_round+0x18>
     f60:	60 ff       	sbrs	r22, 0
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <__fp_round+0x20>
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <__fp_split3>:
     f6e:	57 fd       	sbrc	r21, 7
     f70:	90 58       	subi	r25, 0x80	; 128
     f72:	44 0f       	add	r20, r20
     f74:	55 1f       	adc	r21, r21
     f76:	59 f0       	breq	.+22     	; 0xf8e <__fp_splitA+0x10>
     f78:	5f 3f       	cpi	r21, 0xFF	; 255
     f7a:	71 f0       	breq	.+28     	; 0xf98 <__fp_splitA+0x1a>
     f7c:	47 95       	ror	r20

00000f7e <__fp_splitA>:
     f7e:	88 0f       	add	r24, r24
     f80:	97 fb       	bst	r25, 7
     f82:	99 1f       	adc	r25, r25
     f84:	61 f0       	breq	.+24     	; 0xf9e <__fp_splitA+0x20>
     f86:	9f 3f       	cpi	r25, 0xFF	; 255
     f88:	79 f0       	breq	.+30     	; 0xfa8 <__fp_splitA+0x2a>
     f8a:	87 95       	ror	r24
     f8c:	08 95       	ret
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	14 06       	cpc	r1, r20
     f94:	55 1f       	adc	r21, r21
     f96:	f2 cf       	rjmp	.-28     	; 0xf7c <__fp_split3+0xe>
     f98:	46 95       	lsr	r20
     f9a:	f1 df       	rcall	.-30     	; 0xf7e <__fp_splitA>
     f9c:	08 c0       	rjmp	.+16     	; 0xfae <__fp_splitA+0x30>
     f9e:	16 16       	cp	r1, r22
     fa0:	17 06       	cpc	r1, r23
     fa2:	18 06       	cpc	r1, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	f1 cf       	rjmp	.-30     	; 0xf8a <__fp_splitA+0xc>
     fa8:	86 95       	lsr	r24
     faa:	71 05       	cpc	r23, r1
     fac:	61 05       	cpc	r22, r1
     fae:	08 94       	sec
     fb0:	08 95       	ret

00000fb2 <__fp_zero>:
     fb2:	e8 94       	clt

00000fb4 <__fp_szero>:
     fb4:	bb 27       	eor	r27, r27
     fb6:	66 27       	eor	r22, r22
     fb8:	77 27       	eor	r23, r23
     fba:	cb 01       	movw	r24, r22
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret

00000fc0 <__mulsf3>:
     fc0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__mulsf3x>
     fc4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
     fc8:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscA>
     fcc:	38 f0       	brcs	.+14     	; 0xfdc <__mulsf3+0x1c>
     fce:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fp_pscB>
     fd2:	20 f0       	brcs	.+8      	; 0xfdc <__mulsf3+0x1c>
     fd4:	95 23       	and	r25, r21
     fd6:	11 f0       	breq	.+4      	; 0xfdc <__mulsf3+0x1c>
     fd8:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
     fdc:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_nan>
     fe0:	11 24       	eor	r1, r1
     fe2:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>

00000fe6 <__mulsf3x>:
     fe6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__fp_split3>
     fea:	70 f3       	brcs	.-36     	; 0xfc8 <__mulsf3+0x8>

00000fec <__mulsf3_pse>:
     fec:	95 9f       	mul	r25, r21
     fee:	c1 f3       	breq	.-16     	; 0xfe0 <__mulsf3+0x20>
     ff0:	95 0f       	add	r25, r21
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	55 1f       	adc	r21, r21
     ff6:	62 9f       	mul	r22, r18
     ff8:	f0 01       	movw	r30, r0
     ffa:	72 9f       	mul	r23, r18
     ffc:	bb 27       	eor	r27, r27
     ffe:	f0 0d       	add	r31, r0
    1000:	b1 1d       	adc	r27, r1
    1002:	63 9f       	mul	r22, r19
    1004:	aa 27       	eor	r26, r26
    1006:	f0 0d       	add	r31, r0
    1008:	b1 1d       	adc	r27, r1
    100a:	aa 1f       	adc	r26, r26
    100c:	64 9f       	mul	r22, r20
    100e:	66 27       	eor	r22, r22
    1010:	b0 0d       	add	r27, r0
    1012:	a1 1d       	adc	r26, r1
    1014:	66 1f       	adc	r22, r22
    1016:	82 9f       	mul	r24, r18
    1018:	22 27       	eor	r18, r18
    101a:	b0 0d       	add	r27, r0
    101c:	a1 1d       	adc	r26, r1
    101e:	62 1f       	adc	r22, r18
    1020:	73 9f       	mul	r23, r19
    1022:	b0 0d       	add	r27, r0
    1024:	a1 1d       	adc	r26, r1
    1026:	62 1f       	adc	r22, r18
    1028:	83 9f       	mul	r24, r19
    102a:	a0 0d       	add	r26, r0
    102c:	61 1d       	adc	r22, r1
    102e:	22 1f       	adc	r18, r18
    1030:	74 9f       	mul	r23, r20
    1032:	33 27       	eor	r19, r19
    1034:	a0 0d       	add	r26, r0
    1036:	61 1d       	adc	r22, r1
    1038:	23 1f       	adc	r18, r19
    103a:	84 9f       	mul	r24, r20
    103c:	60 0d       	add	r22, r0
    103e:	21 1d       	adc	r18, r1
    1040:	82 2f       	mov	r24, r18
    1042:	76 2f       	mov	r23, r22
    1044:	6a 2f       	mov	r22, r26
    1046:	11 24       	eor	r1, r1
    1048:	9f 57       	subi	r25, 0x7F	; 127
    104a:	50 40       	sbci	r21, 0x00	; 0
    104c:	9a f0       	brmi	.+38     	; 0x1074 <__mulsf3_pse+0x88>
    104e:	f1 f0       	breq	.+60     	; 0x108c <__mulsf3_pse+0xa0>
    1050:	88 23       	and	r24, r24
    1052:	4a f0       	brmi	.+18     	; 0x1066 <__mulsf3_pse+0x7a>
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	bb 1f       	adc	r27, r27
    105a:	66 1f       	adc	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	50 40       	sbci	r21, 0x00	; 0
    1064:	a9 f7       	brne	.-22     	; 0x1050 <__mulsf3_pse+0x64>
    1066:	9e 3f       	cpi	r25, 0xFE	; 254
    1068:	51 05       	cpc	r21, r1
    106a:	80 f0       	brcs	.+32     	; 0x108c <__mulsf3_pse+0xa0>
    106c:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_inf>
    1070:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__fp_szero>
    1074:	5f 3f       	cpi	r21, 0xFF	; 255
    1076:	e4 f3       	brlt	.-8      	; 0x1070 <__mulsf3_pse+0x84>
    1078:	98 3e       	cpi	r25, 0xE8	; 232
    107a:	d4 f3       	brlt	.-12     	; 0x1070 <__mulsf3_pse+0x84>
    107c:	86 95       	lsr	r24
    107e:	77 95       	ror	r23
    1080:	67 95       	ror	r22
    1082:	b7 95       	ror	r27
    1084:	f7 95       	ror	r31
    1086:	e7 95       	ror	r30
    1088:	9f 5f       	subi	r25, 0xFF	; 255
    108a:	c1 f7       	brne	.-16     	; 0x107c <__mulsf3_pse+0x90>
    108c:	fe 2b       	or	r31, r30
    108e:	88 0f       	add	r24, r24
    1090:	91 1d       	adc	r25, r1
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret

0000109a <__udivmodsi4>:
    109a:	a1 e2       	ldi	r26, 0x21	; 33
    109c:	1a 2e       	mov	r1, r26
    109e:	aa 1b       	sub	r26, r26
    10a0:	bb 1b       	sub	r27, r27
    10a2:	fd 01       	movw	r30, r26
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <__udivmodsi4_ep>

000010a6 <__udivmodsi4_loop>:
    10a6:	aa 1f       	adc	r26, r26
    10a8:	bb 1f       	adc	r27, r27
    10aa:	ee 1f       	adc	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	a2 17       	cp	r26, r18
    10b0:	b3 07       	cpc	r27, r19
    10b2:	e4 07       	cpc	r30, r20
    10b4:	f5 07       	cpc	r31, r21
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__udivmodsi4_ep>
    10b8:	a2 1b       	sub	r26, r18
    10ba:	b3 0b       	sbc	r27, r19
    10bc:	e4 0b       	sbc	r30, r20
    10be:	f5 0b       	sbc	r31, r21

000010c0 <__udivmodsi4_ep>:
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	1a 94       	dec	r1
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <__udivmodsi4_loop>
    10cc:	60 95       	com	r22
    10ce:	70 95       	com	r23
    10d0:	80 95       	com	r24
    10d2:	90 95       	com	r25
    10d4:	9b 01       	movw	r18, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	bd 01       	movw	r22, r26
    10da:	cf 01       	movw	r24, r30
    10dc:	08 95       	ret

000010de <_exit>:
    10de:	f8 94       	cli

000010e0 <__stop_program>:
    10e0:	ff cf       	rjmp	.-2      	; 0x10e0 <__stop_program>

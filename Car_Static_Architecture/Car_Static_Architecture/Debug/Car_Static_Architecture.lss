
Car_Static_Architecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  0000117c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000215d  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9a  00000000  00000000  0000352d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001362  00000000  00000000  000043c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  0000572c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000823  00000000  00000000  00005bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d85  00000000  00000000  000063d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
      74:	0c 94 82 08 	jmp	0x1104	; 0x1104 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Car_SM_Init>:
 * Description--: Initiate the car state machine with state"stop_state",
 * -------------- And initiate steering and ultrasonic functions
*/


ERROR_STATUS Car_SM_Init(void){
      7c:	cf 93       	push	r28
	
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Steering_Init();
      7e:	0e 94 c0 00 	call	0x180	; 0x180 <Steering_Init>
      82:	c8 2f       	mov	r28, r24
	
	state_error |= Us_Init();
      84:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Us_Init>
	
	g_state=STOP_STATE ;
      88:	93 e0       	ldi	r25, 0x03	; 3
      8a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <g_state>
	
	return state_error ;
}
      8e:	8c 2b       	or	r24, r28
      90:	cf 91       	pop	r28
      92:	08 95       	ret

00000094 <Car_SM_Update>:
 * Description--: changes car state according to the ultrasonic input
 * -------------- And represents the motors output for each state
*/


ERROR_STATUS Car_SM_Update(void){
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	00 d0       	rcall	.+0      	; 0x9c <Car_SM_Update+0x8>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	
	uint16_t distance;
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Us_Trigger();
      a0:	0e 94 0b 02 	call	0x416	; 0x416 <Us_Trigger>
      a4:	18 2f       	mov	r17, r24
	state_error |= Us_GetDistance(&distance);
      a6:	ce 01       	movw	r24, r28
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	0e 94 35 02 	call	0x46a	; 0x46a <Us_GetDistance>
      ae:	18 2b       	or	r17, r24
	
	
	
	switch(g_state){
      b0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <g_state>
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	81 f1       	breq	.+96     	; 0x118 <Car_SM_Update+0x84>
      b8:	c8 f0       	brcs	.+50     	; 0xec <Car_SM_Update+0x58>
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	09 f4       	brne	.+2      	; 0xc0 <Car_SM_Update+0x2c>
      be:	41 c0       	rjmp	.+130    	; 0x142 <Car_SM_Update+0xae>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	09 f0       	breq	.+2      	; 0xc6 <Car_SM_Update+0x32>
      c4:	55 c0       	rjmp	.+170    	; 0x170 <Car_SM_Update+0xdc>
		
		case STOP_STATE :
			if (distance<DISTANCE_BACKWARDING){
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	9a 81       	ldd	r25, Y+2	; 0x02
      ca:	84 31       	cpi	r24, 0x14	; 20
      cc:	91 05       	cpc	r25, r1
      ce:	20 f4       	brcc	.+8      	; 0xd8 <Car_SM_Update+0x44>
				
				g_state = BACKWARD_STATE ;
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      d6:	4d c0       	rjmp	.+154    	; 0x172 <Car_SM_Update+0xde>
			}
			else if ((distance <= DISTANCE_TURNNING) && ( distance >= DISTANCE_BACKWARDING)){
      d8:	44 97       	sbiw	r24, 0x14	; 20
      da:	45 97       	sbiw	r24, 0x15	; 21
      dc:	20 f4       	brcc	.+8      	; 0xe6 <Car_SM_Update+0x52>
				
				g_state =TURNING_STATE ;
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      e4:	46 c0       	rjmp	.+140    	; 0x172 <Car_SM_Update+0xde>
			}else
				g_state = FORWARD_STATE ;
      e6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
      ea:	43 c0       	rjmp	.+134    	; 0x172 <Car_SM_Update+0xde>
			break;
			
		case FORWARD_STATE :
		
			if (distance<DISTANCE_BACKWARDING){
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	9a 81       	ldd	r25, Y+2	; 0x02
      f0:	84 31       	cpi	r24, 0x14	; 20
      f2:	91 05       	cpc	r25, r1
      f4:	20 f4       	brcc	.+8      	; 0xfe <Car_SM_Update+0x6a>
				g_state = BACKWARD_STATE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      fc:	3a c0       	rjmp	.+116    	; 0x172 <Car_SM_Update+0xde>
			}else if ( distance<=DISTANCE_TURNNING && distance >= DISTANCE_BACKWARDING )
      fe:	44 97       	sbiw	r24, 0x14	; 20
     100:	45 97       	sbiw	r24, 0x15	; 21
     102:	20 f4       	brcc	.+8      	; 0x10c <Car_SM_Update+0x78>
			{
				g_state=TURNING_STATE;
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     10a:	33 c0       	rjmp	.+102    	; 0x172 <Car_SM_Update+0xde>
			}
			else
				state_error |= Steering_SteerCar(CAR_FORWARD,CAR_SPEED);
     10c:	6e e1       	ldi	r22, 0x1E	; 30
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 cb 00 	call	0x196	; 0x196 <Steering_SteerCar>
     114:	18 2b       	or	r17, r24
     116:	2d c0       	rjmp	.+90     	; 0x172 <Car_SM_Update+0xde>
			break;
				
		case BACKWARD_STATE:
		
			if (distance<DISTANCE_BACKWARDING){
     118:	89 81       	ldd	r24, Y+1	; 0x01
     11a:	9a 81       	ldd	r25, Y+2	; 0x02
     11c:	84 31       	cpi	r24, 0x14	; 20
     11e:	91 05       	cpc	r25, r1
     120:	30 f4       	brcc	.+12     	; 0x12e <Car_SM_Update+0x9a>
				state_error |= Steering_SteerCar(CAR_BACKWARD,CAR_SPEED);
     122:	6e e1       	ldi	r22, 0x1E	; 30
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	0e 94 cb 00 	call	0x196	; 0x196 <Steering_SteerCar>
     12a:	18 2b       	or	r17, r24
     12c:	22 c0       	rjmp	.+68     	; 0x172 <Car_SM_Update+0xde>
			}else if (distance <= DISTANCE_TURNNING && distance>=DISTANCE_BACKWARDING )
     12e:	44 97       	sbiw	r24, 0x14	; 20
     130:	45 97       	sbiw	r24, 0x15	; 21
     132:	20 f4       	brcc	.+8      	; 0x13c <Car_SM_Update+0xa8>
			{
				g_state=TURNING_STATE;
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     13a:	1b c0       	rjmp	.+54     	; 0x172 <Car_SM_Update+0xde>
			}
			 else{
				g_state = FORWARD_STATE ;
     13c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
     140:	18 c0       	rjmp	.+48     	; 0x172 <Car_SM_Update+0xde>
			}
			break;
			
		case TURNING_STATE :
		
			if (distance <= DISTANCE_TURNNING && distance >= DISTANCE_BACKWARDING )
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	9a 81       	ldd	r25, Y+2	; 0x02
     146:	9c 01       	movw	r18, r24
     148:	24 51       	subi	r18, 0x14	; 20
     14a:	31 09       	sbc	r19, r1
     14c:	25 31       	cpi	r18, 0x15	; 21
     14e:	31 05       	cpc	r19, r1
     150:	30 f4       	brcc	.+12     	; 0x15e <Car_SM_Update+0xca>
			{
				state_error |= Steering_SteerCar(CAR_LEFT,CAR_SPEED);
     152:	6e e1       	ldi	r22, 0x1E	; 30
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	0e 94 cb 00 	call	0x196	; 0x196 <Steering_SteerCar>
     15a:	18 2b       	or	r17, r24
     15c:	0a c0       	rjmp	.+20     	; 0x172 <Car_SM_Update+0xde>
			}else if (distance <DISTANCE_BACKWARDING){
     15e:	44 97       	sbiw	r24, 0x14	; 20
     160:	20 f4       	brcc	.+8      	; 0x16a <Car_SM_Update+0xd6>
				g_state = BACKWARD_STATE ;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     168:	04 c0       	rjmp	.+8      	; 0x172 <Car_SM_Update+0xde>
			}
			else
			g_state = FORWARD_STATE ;
     16a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
     16e:	01 c0       	rjmp	.+2      	; 0x172 <Car_SM_Update+0xde>
			
			break;
			
		default: 
		
		state_error |= E_NOK ;
     170:	11 60       	ori	r17, 0x01	; 1
	}
	
	
	return state_error ;
	
}
     172:	81 2f       	mov	r24, r17
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	08 95       	ret

00000180 <Steering_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module , initialize MOTOR_1 & MOTOR_2 
 * 							
 */

ERROR_STATUS Steering_Init(void){
     180:	cf 93       	push	r28
	
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Motor_Init(MOTOR_1);
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	0e 94 20 01 	call	0x240	; 0x240 <Motor_Init>
     188:	c8 2f       	mov	r28, r24
	state_error |= Motor_Init(MOTOR_2);
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	0e 94 20 01 	call	0x240	; 0x240 <Motor_Init>
	return state_error;
}
     190:	8c 2b       	or	r24, r28
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <Steering_SteerCar>:
 * Return: The error status of the function.			
 * Description: This function controls the command and the speed of the car.
 * 							
 */

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	d6 2f       	mov	r29, r22
	ERROR_STATUS state_error = E_OK ;
	
/****************************  set motor direction ********************************************/

	
	switch(Steering_CarCmd){
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	09 f1       	breq	.+66     	; 0x1e2 <Steering_SteerCar+0x4c>
     1a0:	28 f4       	brcc	.+10     	; 0x1ac <Steering_SteerCar+0x16>
     1a2:	88 23       	and	r24, r24
     1a4:	41 f0       	breq	.+16     	; 0x1b6 <Steering_SteerCar+0x20>
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	89 f0       	breq	.+34     	; 0x1cc <Steering_SteerCar+0x36>
     1aa:	3c c0       	rjmp	.+120    	; 0x224 <Steering_SteerCar+0x8e>
     1ac:	83 30       	cpi	r24, 0x03	; 3
     1ae:	21 f1       	breq	.+72     	; 0x1f8 <Steering_SteerCar+0x62>
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	69 f1       	breq	.+90     	; 0x20e <Steering_SteerCar+0x78>
     1b4:	37 c0       	rjmp	.+110    	; 0x224 <Steering_SteerCar+0x8e>
		case CAR_STOP:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_STOP);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     1be:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_STOP);
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     1c8:	c8 2b       	or	r28, r24
		break;
     1ca:	2d c0       	rjmp	.+90     	; 0x226 <Steering_SteerCar+0x90>
		case CAR_FORWARD:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     1cc:	61 e0       	ldi	r22, 0x01	; 1
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     1d4:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     1de:	c8 2b       	or	r28, r24
		break;
     1e0:	22 c0       	rjmp	.+68     	; 0x226 <Steering_SteerCar+0x90>
		case CAR_BACKWARD:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
     1e2:	62 e0       	ldi	r22, 0x02	; 2
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     1ea:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     1ec:	62 e0       	ldi	r22, 0x02	; 2
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     1f4:	c8 2b       	or	r28, r24
		break;
     1f6:	17 c0       	rjmp	.+46     	; 0x226 <Steering_SteerCar+0x90>
		case CAR_RIGHT:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     1f8:	61 e0       	ldi	r22, 0x01	; 1
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     200:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     20a:	c8 2b       	or	r28, r24
		break;
     20c:	0c c0       	rjmp	.+24     	; 0x226 <Steering_SteerCar+0x90>
		case CAR_LEFT:
		state_error |= Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     20e:	62 e0       	ldi	r22, 0x02	; 2
     210:	82 e0       	ldi	r24, 0x02	; 2
     212:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     216:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <Motor_Direction>
     220:	c8 2b       	or	r28, r24
		break;
     222:	01 c0       	rjmp	.+2      	; 0x226 <Steering_SteerCar+0x90>
		default:
		state_error |= E_NOK;
     224:	c1 e0       	ldi	r28, 0x01	; 1
		
	}
	
	/****************************  start motor direction ********************************************/

		state_error |= Motor_Start(MOTOR_1,speed);
     226:	6d 2f       	mov	r22, r29
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Motor_Start>
     22e:	c8 2b       	or	r28, r24
		state_error |= Motor_Start(MOTOR_2,speed);
     230:	6d 2f       	mov	r22, r29
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Motor_Start>
		return state_error ;
	
}
     238:	8c 2b       	or	r24, r28
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <Motor_Init>:
 * Return		: ERROR_STATUS
 * Description	: Initialize (Enable, IN1, IN2) pins as digital outputs.
 */


 ERROR_STATUS Motor_Init(uint8_t Motor_Number){
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	27 97       	sbiw	r28, 0x07	; 7
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
	 
	 DIO_Cfg_s dioCfg_M;
	  Pwm_Cfg_s pwm_cfgA ;
	 Pwm_Cfg_s pwm_cfgB ;
	 
	 	switch (Motor_Number)
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	19 f0       	breq	.+6      	; 0x260 <Motor_Init+0x20>
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	e1 f0       	breq	.+56     	; 0x296 <Motor_Init+0x56>
     25e:	36 c0       	rjmp	.+108    	; 0x2cc <Motor_Init+0x8c>
	 	{
		 	case MOTOR_1:
			
			 pwm_cfgA.Channel = PWM_CH1A ;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	8c 83       	std	Y+4, r24	; 0x04
			 pwm_cfgA.Prescaler = PWM_PRESCALER_1024 ;
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	8d 83       	std	Y+5, r24	; 0x05
			 a_u8_error_state |= Pwm_Init(&pwm_cfgA);
     268:	ce 01       	movw	r24, r28
     26a:	04 96       	adiw	r24, 0x04	; 4
     26c:	0e 94 0e 03 	call	0x61c	; 0x61c <Pwm_Init>
     270:	18 2f       	mov	r17, r24
			 dioCfg_M.GPIO=MOTOR_OUT_1A_GPIO;
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	89 83       	std	Y+1, r24	; 0x01
			 dioCfg_M.pins=MOTOR_OUT_1A_BIT|MOTOR_OUT_1B_BIT|MOTOR_EN_1_BIT;
     276:	8c e1       	ldi	r24, 0x1C	; 28
     278:	8a 83       	std	Y+2, r24	; 0x02
			 dioCfg_M.dir=OUTPUT;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	8b 83       	std	Y+3, r24	; 0x03
			 
			 
		 	 a_u8_error_state |=  DIO_init (&dioCfg_M);
     27e:	ce 01       	movw	r24, r28
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
     286:	18 2b       	or	r17, r24

		 	 a_u8_error_state |= DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	6a 81       	ldd	r22, Y+2	; 0x02
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     292:	81 2b       	or	r24, r17

		 	
		 	break;
     294:	1c c0       	rjmp	.+56     	; 0x2ce <Motor_Init+0x8e>
		 	
		 	case MOTOR_2:
			 
			 pwm_cfgB.Channel = PWM_CH1B ;
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	8e 83       	std	Y+6, r24	; 0x06
			 pwm_cfgB.Prescaler = PWM_PRESCALER_1024 ;
     29a:	86 e0       	ldi	r24, 0x06	; 6
     29c:	8f 83       	std	Y+7, r24	; 0x07
			 a_u8_error_state |= Pwm_Init(&pwm_cfgB);
     29e:	ce 01       	movw	r24, r28
     2a0:	06 96       	adiw	r24, 0x06	; 6
     2a2:	0e 94 0e 03 	call	0x61c	; 0x61c <Pwm_Init>
     2a6:	18 2f       	mov	r17, r24
			 dioCfg_M.GPIO=MOTOR_OUT_2A_GPIO;
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	89 83       	std	Y+1, r24	; 0x01
			 dioCfg_M.pins=MOTOR_OUT_2A_BIT|MOTOR_OUT_2B_BIT|MOTOR_EN_2_BIT;
     2ac:	80 ee       	ldi	r24, 0xE0	; 224
     2ae:	8a 83       	std	Y+2, r24	; 0x02
			 dioCfg_M.dir=OUTPUT;
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	8b 83       	std	Y+3, r24	; 0x03
			 
			 
			 a_u8_error_state |= DIO_init (&dioCfg_M);
     2b4:	ce 01       	movw	r24, r28
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
     2bc:	18 2b       	or	r17, r24

			 a_u8_error_state |= DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	6a 81       	ldd	r22, Y+2	; 0x02
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     2c8:	81 2b       	or	r24, r17

			 break;
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <Motor_Init+0x8e>

			 default:
			 a_u8_error_state |=  E_NOK ;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
			 break;
	 	}
	 return a_u8_error_state  ;
 }
     2ce:	27 96       	adiw	r28, 0x07	; 7
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	08 95       	ret

000002e2 <Motor_Direction>:
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/


ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
     2e2:	cf 93       	push	r28
	
		 uint8_t a_u8_error_state = E_OK ;
	
		switch (Motor_Number)
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	19 f0       	breq	.+6      	; 0x2ee <Motor_Direction+0xc>
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	71 f1       	breq	.+92     	; 0x348 <Motor_Direction+0x66>
     2ec:	5a c0       	rjmp	.+180    	; 0x3a2 <Motor_Direction+0xc0>
		{
			//////////motor1///////////
			case MOTOR_1:
			switch (Motor_Direction)
     2ee:	61 30       	cpi	r22, 0x01	; 1
     2f0:	21 f0       	breq	.+8      	; 0x2fa <Motor_Direction+0x18>
     2f2:	e8 f0       	brcs	.+58     	; 0x32e <Motor_Direction+0x4c>
     2f4:	62 30       	cpi	r22, 0x02	; 2
     2f6:	71 f0       	breq	.+28     	; 0x314 <Motor_Direction+0x32>
     2f8:	56 c0       	rjmp	.+172    	; 0x3a6 <Motor_Direction+0xc4>
			{
				case MOTOR_FORWARD:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	68 e0       	ldi	r22, 0x08	; 8
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     304:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , HIGH);
     306:	4f ef       	ldi	r20, 0xFF	; 255
     308:	64 e0       	ldi	r22, 0x04	; 4
     30a:	83 e0       	ldi	r24, 0x03	; 3
     30c:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     310:	8c 2b       	or	r24, r28
				break;
     312:	4c c0       	rjmp	.+152    	; 0x3ac <Motor_Direction+0xca>
				
				case MOTOR_BACKWARD:
				
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , HIGH);
     314:	4f ef       	ldi	r20, 0xFF	; 255
     316:	68 e0       	ldi	r22, 0x08	; 8
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     31e:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	64 e0       	ldi	r22, 0x04	; 4
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     32a:	8c 2b       	or	r24, r28
				break;
     32c:	3f c0       	rjmp	.+126    	; 0x3ac <Motor_Direction+0xca>
				
				case MOTOR_STOP:
				
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	68 e0       	ldi	r22, 0x08	; 8
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     338:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	64 e0       	ldi	r22, 0x04	; 4
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     344:	8c 2b       	or	r24, r28
				break;
     346:	32 c0       	rjmp	.+100    	; 0x3ac <Motor_Direction+0xca>
			}
			break;
			
			////////motor2//////////
			case MOTOR_2:
			switch (Motor_Direction)
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	21 f0       	breq	.+8      	; 0x354 <Motor_Direction+0x72>
     34c:	e8 f0       	brcs	.+58     	; 0x388 <Motor_Direction+0xa6>
     34e:	62 30       	cpi	r22, 0x02	; 2
     350:	71 f0       	breq	.+28     	; 0x36e <Motor_Direction+0x8c>
     352:	2b c0       	rjmp	.+86     	; 0x3aa <Motor_Direction+0xc8>
			{
				case MOTOR_FORWARD:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , HIGH);
     354:	4f ef       	ldi	r20, 0xFF	; 255
     356:	60 e4       	ldi	r22, 0x40	; 64
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     35e:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	60 e8       	ldi	r22, 0x80	; 128
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     36a:	8c 2b       	or	r24, r28
				break;
     36c:	1f c0       	rjmp	.+62     	; 0x3ac <Motor_Direction+0xca>
				case MOTOR_BACKWARD:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	60 e4       	ldi	r22, 0x40	; 64
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     378:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , HIGH);
     37a:	4f ef       	ldi	r20, 0xFF	; 255
     37c:	60 e8       	ldi	r22, 0x80	; 128
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     384:	8c 2b       	or	r24, r28
				break;
     386:	12 c0       	rjmp	.+36     	; 0x3ac <Motor_Direction+0xca>
				case MOTOR_STOP:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	60 e4       	ldi	r22, 0x40	; 64
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     392:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	60 e8       	ldi	r22, 0x80	; 128
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     39e:	8c 2b       	or	r24, r28
				break;
     3a0:	05 c0       	rjmp	.+10     	; 0x3ac <Motor_Direction+0xca>
				break;
			}
			break;
			
			default:
			a_u8_error_state |=  E_NOK ;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <Motor_Direction+0xca>
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
				break;
				
				default:
				a_u8_error_state |= E_NOK ;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	01 c0       	rjmp	.+2      	; 0x3ac <Motor_Direction+0xca>
				case MOTOR_STOP:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
				break;
				default:
				a_u8_error_state |=  E_NOK ;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
			a_u8_error_state |=  E_NOK ;
			break;
		}
		
		return a_u8_error_state  ;
}
     3ac:	cf 91       	pop	r28
     3ae:	08 95       	ret

000003b0 <Motor_Start>:
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Start the motor.
*/

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	d6 2f       	mov	r29, r22
	
	 uint8_t a_u8_error_state = E_OK ;
	
	switch(Motor_Number){
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	19 f0       	breq	.+6      	; 0x3c0 <Motor_Start+0x10>
     3ba:	82 30       	cpi	r24, 0x02	; 2
     3bc:	51 f0       	breq	.+20     	; 0x3d2 <Motor_Start+0x22>
     3be:	14 c0       	rjmp	.+40     	; 0x3e8 <Motor_Start+0x38>
		
		case MOTOR_1 :
		a_u8_error_state |= Pwm_Start(PWM_CH1A,Mot_Speed,CAR_FREQUANCY);
     3c0:	24 e6       	ldi	r18, 0x64	; 100
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Pwm_Start>
     3ce:	c8 2f       	mov	r28, r24
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <Motor_Start+0x24>
 * Description: Start the motor.
*/

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
	
	 uint8_t a_u8_error_state = E_OK ;
     3d2:	c0 e0       	ldi	r28, 0x00	; 0
	switch(Motor_Number){
		
		case MOTOR_1 :
		a_u8_error_state |= Pwm_Start(PWM_CH1A,Mot_Speed,CAR_FREQUANCY);
		case MOTOR_2 :
		a_u8_error_state |= Pwm_Start(PWM_CH1B,Mot_Speed,CAR_FREQUANCY);
     3d4:	24 e6       	ldi	r18, 0x64	; 100
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	6d 2f       	mov	r22, r29
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Pwm_Start>
     3e4:	8c 2b       	or	r24, r28
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <Motor_Start+0x3a>
 * Description: Start the motor.
*/

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
	
	 uint8_t a_u8_error_state = E_OK ;
     3e8:	80 e0       	ldi	r24, 0x00	; 0
		a_u8_error_state |= Pwm_Start(PWM_CH1B,Mot_Speed,CAR_FREQUANCY);
		default :
		a_u8_error_state |= E_NOK ;
	}
	return a_u8_error_state  ;
}
     3ea:	81 60       	ori	r24, 0x01	; 1
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/


ERROR_STATUS Us_Init(void){
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <Us_Init+0x6>
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	
		Icu_cfg_s icuCfg;
		icuCfg.ICU_Ch_Timer = ICU_TIMER_CH0;
     3fc:	1a 82       	std	Y+2, r1	; 0x02
		icuCfg.ICU_Ch_No = ICU_CH2;
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	89 83       	std	Y+1, r24	; 0x01
		Icu_Init(&icuCfg);
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	0e 94 8b 05 	call	0xb16	; 0xb16 <Icu_Init>
		return E_OK ;
}
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <Us_Trigger>:
 *************************************************************************************************/




ERROR_STATUS Us_Trigger(void){
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	00 d0       	rcall	.+0      	; 0x41e <Us_Trigger+0x8>
     41e:	1f 92       	push	r1
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
	
	DIO_Cfg_s dioCfgtrig;
	
	/*initialize trigger pin */
	
	dioCfgtrig.GPIO = GPIOC;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	89 83       	std	Y+1, r24	; 0x01
	dioCfgtrig.pins = BIT7;
     428:	80 e8       	ldi	r24, 0x80	; 128
     42a:	8a 83       	std	Y+2, r24	; 0x02
	dioCfgtrig.dir =OUTPUT;
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	8b 83       	std	Y+3, r24	; 0x03
	a_u8_error_state |= DIO_init(&dioCfgtrig);
     430:	ce 01       	movw	r24, r28
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
     438:	18 2f       	mov	r17, r24
	
	/*send trigger*/
	
	a_u8_error_state |=DIO_Write(GPIOC,BIT7,HIGH)	;
     43a:	4f ef       	ldi	r20, 0xFF	; 255
     43c:	60 e8       	ldi	r22, 0x80	; 128
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
     444:	18 2b       	or	r17, r24
	a_u8_error_state |=timerDelayMs(10);
     446:	8a e0       	ldi	r24, 0x0A	; 10
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 81 06 	call	0xd02	; 0xd02 <timerDelayMs>
     44e:	18 2b       	or	r17, r24
	
	a_u8_error_state |=DIO_Write(GPIOC,BIT7,LOW)	;
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	60 e8       	ldi	r22, 0x80	; 128
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	0e 94 c6 02 	call	0x58c	; 0x58c <DIO_Write>
	
	return a_u8_error_state;
	
}
     45a:	81 2b       	or	r24, r17
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	08 95       	ret

0000046a <Us_GetDistance>:
 *                    Distance parameter.                                                         *
 *************************************************************************************************/



ERROR_STATUS Us_GetDistance(uint16_t *Distance){
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	00 d0       	rcall	.+0      	; 0x476 <Us_GetDistance+0xc>
     476:	00 d0       	rcall	.+0      	; 0x478 <Us_GetDistance+0xe>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	
		uint8_t a_u8_error_state = E_OK ;
		uint32_t a_u32_timeOfTicks_Us  ;
		
		if (Distance==NULL)
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	b9 f0       	breq	.+46     	; 0x4ae <Us_GetDistance+0x44>
     480:	8c 01       	movw	r16, r24
			a_u8_error_state |= E_NOK ;
		}else{
			
			// read timer from ICU
			
			a_u8_error_state |= Icu_ReadTime(ICU_TIMER_CH0,ICU_RISE_TO_FALL,&a_u32_timeOfTicks_Us);
     482:	ae 01       	movw	r20, r28
     484:	4f 5f       	subi	r20, 0xFF	; 255
     486:	5f 4f       	sbci	r21, 0xFF	; 255
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	0e 94 b1 05 	call	0xb62	; 0xb62 <Icu_ReadTime>
     490:	f8 2e       	mov	r15, r24
			
			
			/* timeofticks is  time in microsecond returned from ICU (pulse time)*/
			
			
			*Distance = a_u32_timeOfTicks_Us/58 ;
     492:	69 81       	ldd	r22, Y+1	; 0x01
     494:	7a 81       	ldd	r23, Y+2	; 0x02
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	9c 81       	ldd	r25, Y+4	; 0x04
     49a:	2a e3       	ldi	r18, 0x3A	; 58
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 e0       	ldi	r20, 0x00	; 0
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__udivmodsi4>
     4a6:	f8 01       	movw	r30, r16
     4a8:	31 83       	std	Z+1, r19	; 0x01
     4aa:	20 83       	st	Z, r18
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <Us_GetDistance+0x48>
		uint8_t a_u8_error_state = E_OK ;
		uint32_t a_u32_timeOfTicks_Us  ;
		
		if (Distance==NULL)
		{
			a_u8_error_state |= E_NOK ;
     4ae:	ff 24       	eor	r15, r15
     4b0:	f3 94       	inc	r15
		
	
		
		return a_u8_error_state ;
	
     4b2:	8f 2d       	mov	r24, r15
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	08 95       	ret

000004c8 <main>:
#include "TimerDelay.h"
#include "Steering.h"
#include "car_sm.h"

int main(void)
{
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <main+0x6>
     4ce:	1f 92       	push	r1
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */


timerDelayMs(1000);
     4d4:	88 ee       	ldi	r24, 0xE8	; 232
     4d6:	93 e0       	ldi	r25, 0x03	; 3
     4d8:	0e 94 81 06 	call	0xd02	; 0xd02 <timerDelayMs>



	DIO_Cfg_s dioCfgrem;
	
	dioCfgrem.GPIO = GPIOB;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	89 83       	std	Y+1, r24	; 0x01
	dioCfgrem.pins = BIT7|BIT6|BIT5|BIT4;
     4e0:	80 ef       	ldi	r24, 0xF0	; 240
     4e2:	8a 83       	std	Y+2, r24	; 0x02
	dioCfgrem.dir =OUTPUT;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_init(&dioCfgrem);
     4e8:	ce 01       	movw	r24, r28
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>

	
	
	Car_SM_Init();
     4f0:	0e 94 3e 00 	call	0x7c	; 0x7c <Car_SM_Init>
	
    while(1)
    {
		Car_SM_Update();
     4f4:	0e 94 4a 00 	call	0x94	; 0x94 <Car_SM_Update>
     4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <main+0x2c>

000004fa <DIO_init>:
*In/Out:
*Description: This function can set the direction of a full port, a nibble
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
     4fa:	fc 01       	movw	r30, r24
	
	 uint8_t a_u8_error_state = E_OK ;
	 
	 if (DIO_info->dir == HIGH )
     4fc:	82 81       	ldd	r24, Z+2	; 0x02
     4fe:	8f 3f       	cpi	r24, 0xFF	; 255
     500:	09 f5       	brne	.+66     	; 0x544 <DIO_init+0x4a>
	{
		switch(DIO_info->GPIO){
     502:	80 81       	ld	r24, Z
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	61 f0       	breq	.+24     	; 0x520 <DIO_init+0x26>
     508:	28 f0       	brcs	.+10     	; 0x514 <DIO_init+0x1a>
     50a:	82 30       	cpi	r24, 0x02	; 2
     50c:	79 f0       	breq	.+30     	; 0x52c <DIO_init+0x32>
     50e:	83 30       	cpi	r24, 0x03	; 3
     510:	99 f0       	breq	.+38     	; 0x538 <DIO_init+0x3e>
     512:	36 c0       	rjmp	.+108    	; 0x580 <DIO_init+0x86>
			
			case GPIOA :
			
			PORTA_DIR = PORTA_DIR | DIO_info->pins ;
     514:	9a b3       	in	r25, 0x1a	; 26
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	89 2b       	or	r24, r25
     51a:	8a bb       	out	0x1a, r24	; 26
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	 uint8_t a_u8_error_state = E_OK ;
     51c:	80 e0       	ldi	r24, 0x00	; 0
		switch(DIO_info->GPIO){
			
			case GPIOA :
			
			PORTA_DIR = PORTA_DIR | DIO_info->pins ;
			break;
     51e:	08 95       	ret
			
			case GPIOB :
			
			PORTB_DIR = PORTB_DIR | DIO_info->pins ;
     520:	97 b3       	in	r25, 0x17	; 23
     522:	81 81       	ldd	r24, Z+1	; 0x01
     524:	89 2b       	or	r24, r25
     526:	87 bb       	out	0x17, r24	; 23
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	 uint8_t a_u8_error_state = E_OK ;
     528:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOB :
			
			PORTB_DIR = PORTB_DIR | DIO_info->pins ;
			break;
     52a:	08 95       	ret
			
			case GPIOC :
			
			PORTC_DIR = PORTC_DIR | DIO_info->pins ;
     52c:	94 b3       	in	r25, 0x14	; 20
     52e:	81 81       	ldd	r24, Z+1	; 0x01
     530:	89 2b       	or	r24, r25
     532:	84 bb       	out	0x14, r24	; 20
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	 uint8_t a_u8_error_state = E_OK ;
     534:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOC :
			
			PORTC_DIR = PORTC_DIR | DIO_info->pins ;
			break;
     536:	08 95       	ret

			case GPIOD :
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
     538:	91 b3       	in	r25, 0x11	; 17
     53a:	81 81       	ldd	r24, Z+1	; 0x01
     53c:	89 2b       	or	r24, r25
     53e:	81 bb       	out	0x11, r24	; 17
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	 uint8_t a_u8_error_state = E_OK ;
     540:	80 e0       	ldi	r24, 0x00	; 0
			break;

			case GPIOD :
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
			break;
     542:	08 95       	ret
			
			default :
			a_u8_error_state |= E_NOK ;
		}
		
	} else if (DIO_info->dir == LOW)
     544:	81 11       	cpse	r24, r1
     546:	1e c0       	rjmp	.+60     	; 0x584 <DIO_init+0x8a>
	{
		switch(DIO_info->GPIO){
     548:	80 81       	ld	r24, Z
     54a:	82 30       	cpi	r24, 0x02	; 2
     54c:	59 f0       	breq	.+22     	; 0x564 <DIO_init+0x6a>
     54e:	83 30       	cpi	r24, 0x03	; 3
     550:	81 f0       	breq	.+32     	; 0x572 <DIO_init+0x78>
     552:	81 30       	cpi	r24, 0x01	; 1
     554:	c9 f4       	brne	.+50     	; 0x588 <DIO_init+0x8e>
		PORTA_DIR = PORTA_DIR & ~(DIO_info->pins) ;
		break;
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(DIO_info->pins) ;
     556:	97 b3       	in	r25, 0x17	; 23
     558:	81 81       	ldd	r24, Z+1	; 0x01
     55a:	80 95       	com	r24
     55c:	89 23       	and	r24, r25
     55e:	87 bb       	out	0x17, r24	; 23
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	 uint8_t a_u8_error_state = E_OK ;
     560:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(DIO_info->pins) ;
		break;
     562:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(DIO_info->pins) ;
     564:	94 b3       	in	r25, 0x14	; 20
     566:	81 81       	ldd	r24, Z+1	; 0x01
     568:	80 95       	com	r24
     56a:	89 23       	and	r24, r25
     56c:	84 bb       	out	0x14, r24	; 20
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	 uint8_t a_u8_error_state = E_OK ;
     56e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(DIO_info->pins) ;
		break;
     570:	08 95       	ret

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
     572:	91 b3       	in	r25, 0x11	; 17
     574:	81 81       	ldd	r24, Z+1	; 0x01
     576:	80 95       	com	r24
     578:	89 23       	and	r24, r25
     57a:	81 bb       	out	0x11, r24	; 17
* 			  or even one pin.
*/

ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
	
	 uint8_t a_u8_error_state = E_OK ;
     57c:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
		break;	
     57e:	08 95       	ret
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
			break;
			
			default :
			a_u8_error_state |= E_NOK ;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	08 95       	ret
		a_u8_error_state |= E_NOK ;	
			
		}
		
	}else
		a_u8_error_state |= E_NOK;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	08 95       	ret
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
		break;	
		
		default :
		a_u8_error_state |= E_NOK ;	
     588:	81 e0       	ldi	r24, 0x01	; 1
	
	return a_u8_error_state  ;
	
	 
	
}
     58a:	08 95       	ret

0000058c <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
	
	if (value == HIGH ){
     58c:	4f 3f       	cpi	r20, 0xFF	; 255
     58e:	f1 f4       	brne	.+60     	; 0x5cc <DIO_Write+0x40>
		switch(GPIO)
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	59 f0       	breq	.+22     	; 0x5aa <DIO_Write+0x1e>
     594:	28 f0       	brcs	.+10     	; 0x5a0 <DIO_Write+0x14>
     596:	82 30       	cpi	r24, 0x02	; 2
     598:	79 f0       	breq	.+30     	; 0x5b8 <DIO_Write+0x2c>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	91 f0       	breq	.+36     	; 0x5c2 <DIO_Write+0x36>
     59e:	38 c0       	rjmp	.+112    	; 0x610 <DIO_Write+0x84>
		{
			case GPIOA :
			
			PORTA_DATA  |=  pins ;
     5a0:	8b b3       	in	r24, 0x1b	; 27
     5a2:	68 2b       	or	r22, r24
     5a4:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
		switch(GPIO)
		{
			case GPIOA :
			
			PORTA_DATA  |=  pins ;
			break;
     5a8:	08 95       	ret
			
			case GPIOB :
			PORTB_DATA |=  (PORTB_DATA  & ~(pins) )| (value& pins) ;
     5aa:	98 b3       	in	r25, 0x18	; 24
     5ac:	88 b3       	in	r24, 0x18	; 24
     5ae:	69 2b       	or	r22, r25
     5b0:	68 2b       	or	r22, r24
     5b2:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
			
			case GPIOB :
			PORTB_DATA |=  (PORTB_DATA  & ~(pins) )| (value& pins) ;
			 
			 //PORTB_DATA =value;
			break;
     5b6:	08 95       	ret
			
			case GPIOC :
			
			PORTC_DATA |= pins ;
     5b8:	85 b3       	in	r24, 0x15	; 21
     5ba:	68 2b       	or	r22, r24
     5bc:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     5be:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOC :
			
			PORTC_DATA |= pins ;
			break;
     5c0:	08 95       	ret

			case GPIOD :
			
			PORTD_DATA |=  pins ;
     5c2:	82 b3       	in	r24, 0x12	; 18
     5c4:	68 2b       	or	r22, r24
     5c6:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
			break;

			case GPIOD :
			
			PORTD_DATA |=  pins ;
			break;
     5ca:	08 95       	ret
			
			 default :
			a_u8_error_state |= E_NOK ;

		}
		}else if(value == LOW) {
     5cc:	41 11       	cpse	r20, r1
     5ce:	22 c0       	rjmp	.+68     	; 0x614 <DIO_Write+0x88>
			
		switch(GPIO){	
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	61 f0       	breq	.+24     	; 0x5ec <DIO_Write+0x60>
     5d4:	28 f0       	brcs	.+10     	; 0x5e0 <DIO_Write+0x54>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	79 f0       	breq	.+30     	; 0x5f8 <DIO_Write+0x6c>
     5da:	83 30       	cpi	r24, 0x03	; 3
     5dc:	99 f0       	breq	.+38     	; 0x604 <DIO_Write+0x78>
     5de:	1c c0       	rjmp	.+56     	; 0x618 <DIO_Write+0x8c>
		
		case GPIOA :
		
		PORTA_DATA &= ~(pins) ;
     5e0:	8b b3       	in	r24, 0x1b	; 27
     5e2:	60 95       	com	r22
     5e4:	68 23       	and	r22, r24
     5e6:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     5e8:	80 e0       	ldi	r24, 0x00	; 0
		switch(GPIO){	
		
		case GPIOA :
		
		PORTA_DATA &= ~(pins) ;
		break;
     5ea:	08 95       	ret
		
		case GPIOB :
		
		PORTB_DATA &=  ~(pins) ;
     5ec:	88 b3       	in	r24, 0x18	; 24
     5ee:	60 95       	com	r22
     5f0:	68 23       	and	r22, r24
     5f2:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     5f4:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOB :
		
		PORTB_DATA &=  ~(pins) ;
		break;
     5f6:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DATA &= ~(pins) ;
     5f8:	85 b3       	in	r24, 0x15	; 21
     5fa:	60 95       	com	r22
     5fc:	68 23       	and	r22, r24
     5fe:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     600:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOC :
		
		PORTC_DATA &= ~(pins) ;
		break;
     602:	08 95       	ret

		case GPIOD :
		
		PORTD_DATA &= ~(pins) ;
     604:	82 b3       	in	r24, 0x12	; 18
     606:	60 95       	com	r22
     608:	68 23       	and	r22, r24
     60a:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	
	uint8_t a_u8_error_state = E_OK ;
     60c:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case GPIOD :
		
		PORTD_DATA &= ~(pins) ;
		break;
     60e:	08 95       	ret
			
			PORTD_DATA |=  pins ;
			break;
			
			 default :
			a_u8_error_state |= E_NOK ;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	08 95       	ret
		 default :
		a_u8_error_state |= E_NOK ;
		
			} 
		}else 
		a_u8_error_state |= E_NOK ;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	08 95       	ret
		
		PORTD_DATA &= ~(pins) ;
		break;
		
		 default :
		a_u8_error_state |= E_NOK ;
     618:	81 e0       	ldi	r24, 0x01	; 1
		
			} 
		}else 
		a_u8_error_state |= E_NOK ;
	return a_u8_error_state  ;
}
     61a:	08 95       	ret

0000061c <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/

extern ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg){
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	00 d0       	rcall	.+0      	; 0x626 <Pwm_Init+0xa>
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	8c 01       	movw	r16, r24
	
	
	/// set two oc pins output 
	
		DIO_Cfg_s dioCfg;
		dioCfg.GPIO=PWM_GPIO1;
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	89 83       	std	Y+1, r24	; 0x01
		dioCfg.pins=PWM_BIT1|PWM_BIT2;
     632:	80 e3       	ldi	r24, 0x30	; 48
     634:	8a 83       	std	Y+2, r24	; 0x02
		dioCfg.dir=OUTPUT;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	8b 83       	std	Y+3, r24	; 0x03
		a_u8_error_state |= DIO_init(&dioCfg);
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	01 15       	cp	r16, r1
     646:	11 05       	cpc	r17, r1
     648:	09 f0       	breq	.+2      	; 0x64c <Pwm_Init+0x30>
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	89 2b       	or	r24, r25
		
		
	
	
	switch(Pwm_Cfg->Prescaler){
     64e:	f8 01       	movw	r30, r16
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	96 30       	cpi	r25, 0x06	; 6
     654:	50 f0       	brcs	.+20     	; 0x66a <Pwm_Init+0x4e>
     656:	96 30       	cpi	r25, 0x06	; 6
     658:	39 f4       	brne	.+14     	; 0x668 <Pwm_Init+0x4c>
		
		break;
		case PWM_PRESCALER_1024 :
		//set prescale mask global to use in start
		
		g_Prescale_mask = TIMER1_PRESCALER_1024_MASK ;
     65a:	25 e0       	ldi	r18, 0x05	; 5
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     662:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
     666:	01 c0       	rjmp	.+2      	; 0x66a <Pwm_Init+0x4e>
		default: 
		a_u8_error_state |= E_NOK ;
     668:	81 60       	ori	r24, 0x01	; 1
	}
	
	switch(Pwm_Cfg->Channel){
     66a:	f8 01       	movw	r30, r16
     66c:	90 81       	ld	r25, Z
     66e:	91 30       	cpi	r25, 0x01	; 1
     670:	31 f0       	breq	.+12     	; 0x67e <Pwm_Init+0x62>
     672:	f0 f0       	brcs	.+60     	; 0x6b0 <Pwm_Init+0x94>
     674:	92 30       	cpi	r25, 0x02	; 2
     676:	79 f0       	breq	.+30     	; 0x696 <Pwm_Init+0x7a>
     678:	93 30       	cpi	r25, 0x03	; 3
     67a:	c9 f4       	brne	.+50     	; 0x6ae <Pwm_Init+0x92>
     67c:	19 c0       	rjmp	.+50     	; 0x6b0 <Pwm_Init+0x94>
		case PWM_CH0:
		
		break;
		case PWM_CH1A :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
     67e:	2e b5       	in	r18, 0x2e	; 46
     680:	3f b5       	in	r19, 0x2f	; 47
     682:	20 61       	ori	r18, 0x10	; 16
     684:	32 60       	ori	r19, 0x02	; 2
     686:	3f bd       	out	0x2f, r19	; 47
     688:	2e bd       	out	0x2e, r18	; 46
		TCCR1 |= T1_OC1A_CLEAR ;
     68a:	2e b5       	in	r18, 0x2e	; 46
     68c:	3f b5       	in	r19, 0x2f	; 47
     68e:	30 68       	ori	r19, 0x80	; 128
     690:	3f bd       	out	0x2f, r19	; 47
     692:	2e bd       	out	0x2e, r18	; 46
		
		
		break;
     694:	0d c0       	rjmp	.+26     	; 0x6b0 <Pwm_Init+0x94>
		case PWM_CH1B :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
     696:	2e b5       	in	r18, 0x2e	; 46
     698:	3f b5       	in	r19, 0x2f	; 47
     69a:	20 61       	ori	r18, 0x10	; 16
     69c:	32 60       	ori	r19, 0x02	; 2
     69e:	3f bd       	out	0x2f, r19	; 47
     6a0:	2e bd       	out	0x2e, r18	; 46
		TCCR1 |= T1_OC1B_CLEAR ;
     6a2:	2e b5       	in	r18, 0x2e	; 46
     6a4:	3f b5       	in	r19, 0x2f	; 47
     6a6:	30 62       	ori	r19, 0x20	; 32
     6a8:	3f bd       	out	0x2f, r19	; 47
     6aa:	2e bd       	out	0x2e, r18	; 46
		
		break;
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <Pwm_Init+0x94>
		case PWM_CH2 :
		
		break;
		default:
		a_u8_error_state |= E_NOK ;
     6ae:	81 60       	ori	r24, 0x01	; 1
	}
	
	return a_u8_error_state  ;
	
	
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	08 95       	ret

000006c0 <Pwm_Start>:
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/



extern ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy){
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	d8 2f       	mov	r29, r24
     6ce:	c6 2f       	mov	r28, r22
	uint16_t ICR_TOP ;
	uint16_t duty_cycle_tick ;
	
	//function to calculate the icr top from the freq and pre scale (fromdata sheet)
	
	ICR_TOP = F_CPU / (2.0 * PWM_PRE_SCALE * Frequncy) ;
     6d0:	ca 01       	movw	r24, r20
     6d2:	b9 01       	movw	r22, r18
     6d4:	0e 94 65 07 	call	0xeca	; 0xeca <__floatunsisf>
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	55 e4       	ldi	r21, 0x45	; 69
     6e0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__mulsf3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	74 e2       	ldi	r23, 0x24	; 36
     6ec:	84 e7       	ldi	r24, 0x74	; 116
     6ee:	9b e4       	ldi	r25, 0x4B	; 75
     6f0:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divsf3>
     6f4:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fixunssfsi>
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
	
	//to calculate ticks needed to add in the OCR to reach the required duty 
	//ticks for high 
	
	duty_cycle_tick = ICR_TOP *Duty/100.0 ;
     6fc:	8c 2f       	mov	r24, r28
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	8c 9d       	mul	r24, r12
     702:	b0 01       	movw	r22, r0
     704:	8d 9d       	mul	r24, r13
     706:	70 0d       	add	r23, r0
     708:	9c 9d       	mul	r25, r12
     70a:	70 0d       	add	r23, r0
     70c:	11 24       	eor	r1, r1
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 65 07 	call	0xeca	; 0xeca <__floatunsisf>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	48 ec       	ldi	r20, 0xC8	; 200
     71c:	52 e4       	ldi	r21, 0x42	; 66
     71e:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divsf3>
     722:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fixunssfsi>
	
		
		switch(Channel){
     726:	d1 30       	cpi	r29, 0x01	; 1
     728:	39 f0       	breq	.+14     	; 0x738 <Pwm_Start+0x78>
     72a:	30 f1       	brcs	.+76     	; 0x778 <Pwm_Start+0xb8>
     72c:	d2 30       	cpi	r29, 0x02	; 2
     72e:	a1 f0       	breq	.+40     	; 0x758 <Pwm_Start+0x98>
     730:	d3 30       	cpi	r29, 0x03	; 3
     732:	11 f1       	breq	.+68     	; 0x778 <Pwm_Start+0xb8>
			break;
			case PWM_CH2 :
			
			break;
			default:
			a_u8_error_state |= E_NOK ;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	21 c0       	rjmp	.+66     	; 0x77a <Pwm_Start+0xba>
			case PWM_CH0:
			
			break;
			case PWM_CH1A :
			
			ICR1 = ICR_TOP ;
     738:	d7 bc       	out	0x27, r13	; 39
     73a:	c6 bc       	out	0x26, r12	; 38
			OCR1A = duty_cycle_tick ;
     73c:	7b bd       	out	0x2b, r23	; 43
     73e:	6a bd       	out	0x2a, r22	; 42
			
			TCCR1|=g_Prescale_mask ;
     740:	2e b5       	in	r18, 0x2e	; 46
     742:	3f b5       	in	r19, 0x2f	; 47
     744:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     748:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     74c:	82 2b       	or	r24, r18
     74e:	93 2b       	or	r25, r19
     750:	9f bd       	out	0x2f, r25	; 47
     752:	8e bd       	out	0x2e, r24	; 46



extern ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy){
	
	uint8_t a_u8_error_state = E_OK ;
     754:	80 e0       	ldi	r24, 0x00	; 0
			OCR1A = duty_cycle_tick ;
			
			TCCR1|=g_Prescale_mask ;
			
			
			break;
     756:	11 c0       	rjmp	.+34     	; 0x77a <Pwm_Start+0xba>
			case PWM_CH1B :
			
			ICR1 = ICR_TOP ;
     758:	d7 bc       	out	0x27, r13	; 39
     75a:	c6 bc       	out	0x26, r12	; 38
			OCR1B = duty_cycle_tick ;
     75c:	79 bd       	out	0x29, r23	; 41
     75e:	68 bd       	out	0x28, r22	; 40
			TCCR1|=g_Prescale_mask ;
     760:	2e b5       	in	r18, 0x2e	; 46
     762:	3f b5       	in	r19, 0x2f	; 47
     764:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     768:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     76c:	82 2b       	or	r24, r18
     76e:	93 2b       	or	r25, r19
     770:	9f bd       	out	0x2f, r25	; 47
     772:	8e bd       	out	0x2e, r24	; 46



extern ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy){
	
	uint8_t a_u8_error_state = E_OK ;
     774:	80 e0       	ldi	r24, 0x00	; 0
			
			ICR1 = ICR_TOP ;
			OCR1B = duty_cycle_tick ;
			TCCR1|=g_Prescale_mask ;
			
			break;
     776:	01 c0       	rjmp	.+2      	; 0x77a <Pwm_Start+0xba>



extern ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy){
	
	uint8_t a_u8_error_state = E_OK ;
     778:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		return a_u8_error_state  ;
	
	
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret

00000788 <Timer_Init>:
 */




ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
     788:	fc 01       	movw	r30, r24
	
	uint8_t a_u8_error_state = E_OK ;
	
	switch(Timer_cfg->Timer_CH_NO){
     78a:	80 81       	ld	r24, Z
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	d9 f0       	breq	.+54     	; 0x7c6 <Timer_Init+0x3e>
     790:	18 f0       	brcs	.+6      	; 0x798 <Timer_Init+0x10>
     792:	82 30       	cpi	r24, 0x02	; 2
     794:	91 f1       	breq	.+100    	; 0x7fa <Timer_Init+0x72>
     796:	4b c0       	rjmp	.+150    	; 0x82e <Timer_Init+0xa6>
		
/******************** TIMER 0 ***************************/
		case TIMER_CH0 :
			TCCR0 = ZERO_VALUE ;
     798:	13 be       	out	0x33, r1	; 51
	
			/*set the PreScale config*/
		
			g_prescaleTimer0 = Timer_cfg->Timer_Prescaler ;
     79a:	83 81       	ldd	r24, Z+3	; 0x03
     79c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_prescaleTimer0>
			g_ModeTimer0 = Timer_cfg->Timer_Mode ;
     7a0:	81 81       	ldd	r24, Z+1	; 0x01
     7a2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_ModeTimer0>
		
			#ifdef NORMAL_MODE
	
				/*set normal or compare mode*/
				
				TCCR0 |= T0_NORMAL_MODE_MASK ;
     7a6:	83 b7       	in	r24, 0x33	; 51
     7a8:	83 bf       	out	0x33, r24	; 51
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     7aa:	82 81       	ldd	r24, Z+2	; 0x02
     7ac:	81 11       	cpse	r24, r1
     7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <Timer_Init+0x30>
				{
					TIMSK |=TIMER0_POLLING_MODE_MASK ;
     7b0:	89 b7       	in	r24, 0x39	; 57
     7b2:	89 bf       	out	0x39, r24	; 57



ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
	
	uint8_t a_u8_error_state = E_OK ;
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	08 95       	ret
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
				{
					TIMSK |=TIMER0_POLLING_MODE_MASK ;
				}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	d9 f5       	brne	.+118    	; 0x832 <Timer_Init+0xaa>
					TIMSK |=TIMER0_INTERRUPT_NORMAL_MASK;
     7bc:	89 b7       	in	r24, 0x39	; 57
     7be:	81 60       	ori	r24, 0x01	; 1
     7c0:	89 bf       	out	0x39, r24	; 57



ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
	
	uint8_t a_u8_error_state = E_OK ;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	08 95       	ret
		
/**************************** TIMER 1 ********************************/

		case TIMER_CH1 :
		
			TCCR1 = ZERO_VALUE;
     7c6:	1f bc       	out	0x2f, r1	; 47
     7c8:	1e bc       	out	0x2e, r1	; 46
			
			/*set the PreScale config*/
			
			g_prescaleTimer1 = Timer_cfg->Timer_Prescaler ;
     7ca:	83 81       	ldd	r24, Z+3	; 0x03
     7cc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <g_prescaleTimer1>
			g_ModeTimer1 = Timer_cfg->Timer_Mode ;
     7d0:	81 81       	ldd	r24, Z+1	; 0x01
     7d2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_ModeTimer1>
		
			#ifdef NORMAL_MODE
			
				/*set normal or compare mode*/
				
				TCCR1 |= T1_NORMAL_MODE_MASK ;
     7d6:	8e b5       	in	r24, 0x2e	; 46
     7d8:	9f b5       	in	r25, 0x2f	; 47
     7da:	9f bd       	out	0x2f, r25	; 47
     7dc:	8e bd       	out	0x2e, r24	; 46
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     7de:	82 81       	ldd	r24, Z+2	; 0x02
     7e0:	81 11       	cpse	r24, r1
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <Timer_Init+0x64>
				{
					TIMSK |=TIMER1_POLLING_MODE_MASK ;
     7e4:	89 b7       	in	r24, 0x39	; 57
     7e6:	89 bf       	out	0x39, r24	; 57



ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
	
	uint8_t a_u8_error_state = E_OK ;
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	08 95       	ret
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
				{
					TIMSK |=TIMER1_POLLING_MODE_MASK ;
					}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	19 f5       	brne	.+70     	; 0x836 <Timer_Init+0xae>
					TIMSK |=TIMER1_INTERRUPT_NORMAL_MASK;
     7f0:	89 b7       	in	r24, 0x39	; 57
     7f2:	84 60       	ori	r24, 0x04	; 4
     7f4:	89 bf       	out	0x39, r24	; 57



ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
	
	uint8_t a_u8_error_state = E_OK ;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	08 95       	ret
		break;
///////////////////////TIMER 2 //////////////////////////

		case TIMER_CH2 :
		
			TCCR2 = ZERO_VALUE;
     7fa:	15 bc       	out	0x25, r1	; 37
			
			/*set synchronous or asynchronous */
			
			ASSR &= 0xF0 ;
     7fc:	82 b5       	in	r24, 0x22	; 34
     7fe:	80 7f       	andi	r24, 0xF0	; 240
     800:	82 bd       	out	0x22, r24	; 34

			/*set the PreScale config*/
			
			g_prescaleTimer2 = Timer_cfg->Timer_Prescaler ;
     802:	83 81       	ldd	r24, Z+3	; 0x03
     804:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <g_prescaleTimer2>
			g_ModeTimer2 = Timer_cfg->Timer_Mode ;
     808:	81 81       	ldd	r24, Z+1	; 0x01
     80a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_ModeTimer2>
			
			#ifdef NORMAL_MODE
			
			/*set normal or compare mode*/
			
			TCCR2 |= T2_NORMAL_MODE_MASK ;
     80e:	85 b5       	in	r24, 0x25	; 37
     810:	85 bd       	out	0x25, r24	; 37
			
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	81 11       	cpse	r24, r1
     816:	04 c0       	rjmp	.+8      	; 0x820 <Timer_Init+0x98>
			{
				TIMSK |=TIMER2_POLLING_MODE_MASK ;
     818:	89 b7       	in	r24, 0x39	; 57
     81a:	89 bf       	out	0x39, r24	; 57



ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
	
	uint8_t a_u8_error_state = E_OK ;
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret
			
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
			{
				TIMSK |=TIMER2_POLLING_MODE_MASK ;
				}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	59 f4       	brne	.+22     	; 0x83a <Timer_Init+0xb2>
				TIMSK |=TIMER2_INTERRUPT_NORMAL_MASK;
     824:	89 b7       	in	r24, 0x39	; 57
     826:	80 64       	ori	r24, 0x40	; 64
     828:	89 bf       	out	0x39, r24	; 57



ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
	
	uint8_t a_u8_error_state = E_OK ;
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	08 95       	ret
		
		break;
///////////////////////ERROR //////////////////////////

		default :
		a_u8_error_state |= E_NOK ;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	08 95       	ret



ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
	
	uint8_t a_u8_error_state = E_OK ;
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	08 95       	ret
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret
     83a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		
	}//// end switch of channel type
	return a_u8_error_state  ;
}
     83c:	08 95       	ret

0000083e <Timer_Stop>:

ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO){
	
	uint8_t a_u8_error_state = E_OK ;
	
	switch (Timer_CH_NO)
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	49 f0       	breq	.+18     	; 0x854 <Timer_Stop+0x16>
     842:	18 f0       	brcs	.+6      	; 0x84a <Timer_Stop+0xc>
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	69 f0       	breq	.+26     	; 0x862 <__stack+0x3>
     848:	11 c0       	rjmp	.+34     	; 0x86c <__stack+0xd>
	{
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
     84a:	83 b7       	in	r24, 0x33	; 51
     84c:	88 7f       	andi	r24, 0xF8	; 248
     84e:	83 bf       	out	0x33, r24	; 51
 */


ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO){
	
	uint8_t a_u8_error_state = E_OK ;
     850:	80 e0       	ldi	r24, 0x00	; 0
	
	switch (Timer_CH_NO)
	{
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
		break;
     852:	08 95       	ret
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
     854:	8e b5       	in	r24, 0x2e	; 46
     856:	9f b5       	in	r25, 0x2f	; 47
     858:	88 7f       	andi	r24, 0xF8	; 248
     85a:	9f bd       	out	0x2f, r25	; 47
     85c:	8e bd       	out	0x2e, r24	; 46
 */


ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO){
	
	uint8_t a_u8_error_state = E_OK ;
     85e:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
		break;
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
		break;
     860:	08 95       	ret
		case TIMER_CH2 :
		TCCR2 &=TIMER2_NO_CLOCK_MASK;
     862:	85 b5       	in	r24, 0x25	; 37
     864:	88 7f       	andi	r24, 0xF8	; 248
     866:	85 bd       	out	0x25, r24	; 37
 */


ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO){
	
	uint8_t a_u8_error_state = E_OK ;
     868:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
		break;
		case TIMER_CH2 :
		TCCR2 &=TIMER2_NO_CLOCK_MASK;
		break;
     86a:	08 95       	ret
		default:
		a_u8_error_state |=  E_NOK ;
     86c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return a_u8_error_state ;
	
	
}
     86e:	08 95       	ret

00000870 <Timer_GetStatus>:



ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, uint8_t* Data){
	
	uint8_t a_u8_error_state = E_OK ;
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	61 15       	cp	r22, r1
     874:	71 05       	cpc	r23, r1
     876:	09 f0       	breq	.+2      	; 0x87a <Timer_GetStatus+0xa>
     878:	90 e0       	ldi	r25, 0x00	; 0
	{
		a_u8_error_state |= E_NOK ;
	}
	
	
	switch (Timer_CH_NO )
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	89 f0       	breq	.+34     	; 0x8a0 <Timer_GetStatus+0x30>
     87e:	18 f0       	brcs	.+6      	; 0x886 <Timer_GetStatus+0x16>
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	d9 f0       	breq	.+54     	; 0x8ba <Timer_GetStatus+0x4a>
     884:	27 c0       	rjmp	.+78     	; 0x8d4 <Timer_GetStatus+0x64>
	{
		case TIMER_CH0 :
			if((TIFR&T0_OVF_FLAG_MASK) > ZERO_VALUE)
     886:	08 b6       	in	r0, 0x38	; 56
     888:	00 fe       	sbrs	r0, 0
     88a:	07 c0       	rjmp	.+14     	; 0x89a <Timer_GetStatus+0x2a>
			{
				(*Data) = TRUE ;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	fb 01       	movw	r30, r22
     890:	80 83       	st	Z, r24
				TIFR |=T0_OVF_FLAG_MASK ;
     892:	88 b7       	in	r24, 0x38	; 56
     894:	81 60       	ori	r24, 0x01	; 1
     896:	88 bf       	out	0x38, r24	; 56
     898:	1e c0       	rjmp	.+60     	; 0x8d6 <Timer_GetStatus+0x66>
			}else
			(*Data) = FALSE ;
     89a:	fb 01       	movw	r30, r22
     89c:	10 82       	st	Z, r1
     89e:	1b c0       	rjmp	.+54     	; 0x8d6 <Timer_GetStatus+0x66>
			break;
		
		case TIMER_CH1 :
			if((TIFR&T1_OVF_FLAG_MASK) > ZERO_VALUE)
     8a0:	08 b6       	in	r0, 0x38	; 56
     8a2:	02 fe       	sbrs	r0, 2
     8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <Timer_GetStatus+0x44>
			{
				(*Data) = TRUE ;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	fb 01       	movw	r30, r22
     8aa:	80 83       	st	Z, r24
				TIFR |=T1_OVF_FLAG_MASK ;
     8ac:	88 b7       	in	r24, 0x38	; 56
     8ae:	84 60       	ori	r24, 0x04	; 4
     8b0:	88 bf       	out	0x38, r24	; 56
     8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <Timer_GetStatus+0x66>
			}else
			(*Data) = FALSE ;
     8b4:	fb 01       	movw	r30, r22
     8b6:	10 82       	st	Z, r1
     8b8:	0e c0       	rjmp	.+28     	; 0x8d6 <Timer_GetStatus+0x66>
			break;
			
		case TIMER_CH2 :
			if((TIFR&T2_OVF_FLAG_MASK) > ZERO_VALUE)
     8ba:	08 b6       	in	r0, 0x38	; 56
     8bc:	06 fe       	sbrs	r0, 6
     8be:	07 c0       	rjmp	.+14     	; 0x8ce <Timer_GetStatus+0x5e>
			{
				(*Data) = TRUE ;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	fb 01       	movw	r30, r22
     8c4:	80 83       	st	Z, r24
				TIFR |=T2_OVF_FLAG_MASK ;
     8c6:	88 b7       	in	r24, 0x38	; 56
     8c8:	80 64       	ori	r24, 0x40	; 64
     8ca:	88 bf       	out	0x38, r24	; 56
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <Timer_GetStatus+0x66>
			}else
			(*Data) = FALSE ;
     8ce:	fb 01       	movw	r30, r22
     8d0:	10 82       	st	Z, r1
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <Timer_GetStatus+0x66>
			break;
		
		default: 
		a_u8_error_state |= E_NOK ;	
     8d4:	91 e0       	ldi	r25, 0x01	; 1
		
	}
	
	return a_u8_error_state  ;
	
}
     8d6:	89 2f       	mov	r24, r25
     8d8:	08 95       	ret

000008da <Timer_GetValue>:
 */


ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data){
	
	uint8_t a_u8_error_state = E_OK ;
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	61 15       	cp	r22, r1
     8de:	71 05       	cpc	r23, r1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <Timer_GetValue+0xa>
     8e2:	90 e0       	ldi	r25, 0x00	; 0
	if (Data == NULL)
	{
		a_u8_error_state |= E_NOK ;
	}
	
		switch (Timer_CH_NO)
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	51 f0       	breq	.+20     	; 0x8fc <Timer_GetValue+0x22>
     8e8:	18 f0       	brcs	.+6      	; 0x8f0 <Timer_GetValue+0x16>
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	69 f0       	breq	.+26     	; 0x908 <Timer_GetValue+0x2e>
     8ee:	12 c0       	rjmp	.+36     	; 0x914 <Timer_GetValue+0x3a>
		{
			case TIMER_CH0 :
			(*Data) = TCNT0 ;
     8f0:	22 b7       	in	r18, 0x32	; 50
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	fb 01       	movw	r30, r22
     8f6:	31 83       	std	Z+1, r19	; 0x01
     8f8:	20 83       	st	Z, r18
			break;
     8fa:	0d c0       	rjmp	.+26     	; 0x916 <Timer_GetValue+0x3c>
			case TIMER_CH1 :
			(*Data) = TCNT1 ;
     8fc:	2c b5       	in	r18, 0x2c	; 44
     8fe:	3d b5       	in	r19, 0x2d	; 45
     900:	fb 01       	movw	r30, r22
     902:	31 83       	std	Z+1, r19	; 0x01
     904:	20 83       	st	Z, r18
			break;
     906:	07 c0       	rjmp	.+14     	; 0x916 <Timer_GetValue+0x3c>
			case TIMER_CH2 :
			(*Data) = TCNT2 ;
     908:	24 b5       	in	r18, 0x24	; 36
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	fb 01       	movw	r30, r22
     90e:	31 83       	std	Z+1, r19	; 0x01
     910:	20 83       	st	Z, r18
			break;
     912:	01 c0       	rjmp	.+2      	; 0x916 <Timer_GetValue+0x3c>
			default:
			a_u8_error_state |= E_NOK ;
     914:	91 e0       	ldi	r25, 0x01	; 1
			break;
		}
		return a_u8_error_state  ;
	
}
     916:	89 2f       	mov	r24, r25
     918:	08 95       	ret

0000091a <Timer_SetValue>:

ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data){
	
		uint8_t a_u8_error_state = E_OK ;
	
		switch (Timer_CH_NO)
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	39 f0       	breq	.+14     	; 0x92c <Timer_SetValue+0x12>
     91e:	18 f0       	brcs	.+6      	; 0x926 <Timer_SetValue+0xc>
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	41 f0       	breq	.+16     	; 0x934 <Timer_SetValue+0x1a>
     924:	0a c0       	rjmp	.+20     	; 0x93a <Timer_SetValue+0x20>
		{
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
     926:	62 bf       	out	0x32, r22	; 50
 */


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data){
	
		uint8_t a_u8_error_state = E_OK ;
     928:	80 e0       	ldi	r24, 0x00	; 0
	
		switch (Timer_CH_NO)
		{
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
			break;
     92a:	08 95       	ret
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
     92c:	7d bd       	out	0x2d, r23	; 45
     92e:	6c bd       	out	0x2c, r22	; 44
 */


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data){
	
		uint8_t a_u8_error_state = E_OK ;
     930:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
			break;
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
			break;
     932:	08 95       	ret
			case TIMER_CH2 :
			 TCNT2 =(Data) ;
     934:	64 bd       	out	0x24, r22	; 36
 */


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data){
	
		uint8_t a_u8_error_state = E_OK ;
     936:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
			break;
			case TIMER_CH2 :
			 TCNT2 =(Data) ;
			break;
     938:	08 95       	ret
			default:
			a_u8_error_state |= E_NOK ;
     93a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
		return a_u8_error_state ;
		
}
     93c:	08 95       	ret

0000093e <Timer_Start>:
 * Description: This function starts the needed timer.
 * 							
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
     93e:	cf 93       	push	r28
     940:	c8 2f       	mov	r28, r24
	
		uint8_t a_u8_error_state = E_OK ;
	
		#ifdef NORMAL_MODE 
		      Timer_SetValue(Timer_CH_NO,256-Timer_Count)	;
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	9c 01       	movw	r18, r24
     948:	26 1b       	sub	r18, r22
     94a:	37 0b       	sbc	r19, r23
     94c:	b9 01       	movw	r22, r18
     94e:	8c 2f       	mov	r24, r28
     950:	0e 94 8d 04 	call	0x91a	; 0x91a <Timer_SetValue>
			}
		
			
		#endif
	
		switch (Timer_CH_NO)
     954:	c1 30       	cpi	r28, 0x01	; 1
     956:	09 f4       	brne	.+2      	; 0x95a <Timer_Start+0x1c>
     958:	48 c0       	rjmp	.+144    	; 0x9ea <Timer_Start+0xac>
     95a:	20 f0       	brcs	.+8      	; 0x964 <Timer_Start+0x26>
     95c:	c2 30       	cpi	r28, 0x02	; 2
     95e:	09 f4       	brne	.+2      	; 0x962 <Timer_Start+0x24>
     960:	98 c0       	rjmp	.+304    	; 0xa92 <Timer_Start+0x154>
     962:	d4 c0       	rjmp	.+424    	; 0xb0c <Timer_Start+0x1ce>
		{
			case TIMER_CH0 :
			if (g_ModeTimer0 ==TIMER_MODE)
     964:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_ModeTimer0>
     968:	81 11       	cpse	r24, r1
     96a:	30 c0       	rjmp	.+96     	; 0x9cc <Timer_Start+0x8e>
			{
				switch (g_prescaleTimer0)
     96c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <g_prescaleTimer0>
     970:	82 30       	cpi	r24, 0x02	; 2
     972:	c1 f0       	breq	.+48     	; 0x9a4 <Timer_Start+0x66>
     974:	28 f4       	brcc	.+10     	; 0x980 <Timer_Start+0x42>
     976:	88 23       	and	r24, r24
     978:	59 f0       	breq	.+22     	; 0x990 <Timer_Start+0x52>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	71 f0       	breq	.+28     	; 0x99a <Timer_Start+0x5c>
     97e:	bc c0       	rjmp	.+376    	; 0xaf8 <Timer_Start+0x1ba>
     980:	86 30       	cpi	r24, 0x06	; 6
     982:	d1 f0       	breq	.+52     	; 0x9b8 <Timer_Start+0x7a>
     984:	87 30       	cpi	r24, 0x07	; 7
     986:	e9 f0       	breq	.+58     	; 0x9c2 <Timer_Start+0x84>
     988:	84 30       	cpi	r24, 0x04	; 4
     98a:	09 f0       	breq	.+2      	; 0x98e <Timer_Start+0x50>
     98c:	b5 c0       	rjmp	.+362    	; 0xaf8 <Timer_Start+0x1ba>
     98e:	0f c0       	rjmp	.+30     	; 0x9ae <Timer_Start+0x70>
				{
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
     990:	83 b7       	in	r24, 0x33	; 51
     992:	88 6f       	ori	r24, 0xF8	; 248
     994:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     996:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer0)
				{
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
					break;
     998:	bc c0       	rjmp	.+376    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
     99a:	83 b7       	in	r24, 0x33	; 51
     99c:	81 60       	ori	r24, 0x01	; 1
     99e:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
					break;
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
					break;
     9a2:	b7 c0       	rjmp	.+366    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
     9a4:	83 b7       	in	r24, 0x33	; 51
     9a6:	82 60       	ori	r24, 0x02	; 2
     9a8:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     9aa:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
					break;
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
					break;
     9ac:	b2 c0       	rjmp	.+356    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_64:
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
     9ae:	83 b7       	in	r24, 0x33	; 51
     9b0:	83 60       	ori	r24, 0x03	; 3
     9b2:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
					break;
					case TIMER_PRESCALER_64:
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
					break;
     9b6:	ad c0       	rjmp	.+346    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_256:
					TCCR0 |= TIMER0_PRESCALER_256_MASK ;
     9b8:	83 b7       	in	r24, 0x33	; 51
     9ba:	84 60       	ori	r24, 0x04	; 4
     9bc:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     9be:	80 e0       	ldi	r24, 0x00	; 0
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
					break;
					case TIMER_PRESCALER_256:
					TCCR0 |= TIMER0_PRESCALER_256_MASK ;

					break;
     9c0:	a8 c0       	rjmp	.+336    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR0 |= TIMER0_PRESCALER_1024_MASK ;
     9c2:	83 b7       	in	r24, 0x33	; 51
     9c4:	85 60       	ori	r24, 0x05	; 5
     9c6:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     9c8:	80 e0       	ldi	r24, 0x00	; 0

					break;
					case TIMER_PRESCALER_1024:
					TCCR0 |= TIMER0_PRESCALER_1024_MASK ;

					break;
     9ca:	a3 c0       	rjmp	.+326    	; 0xb12 <Timer_Start+0x1d4>
					a_u8_error_state |= E_NOK ;
					
					
				}
				
			}else if (g_ModeTimer0 == COUNTER_RISING_MODE){
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	29 f4       	brne	.+10     	; 0x9da <Timer_Start+0x9c>
				
				TCCR0|= COUNTER_RISING_MODE_MASK ;
     9d0:	83 b7       	in	r24, 0x33	; 51
     9d2:	87 60       	ori	r24, 0x07	; 7
     9d4:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	9c c0       	rjmp	.+312    	; 0xb12 <Timer_Start+0x1d4>
				
			}else if (g_ModeTimer0 == COUNTER_RISING_MODE){
				
				TCCR0|= COUNTER_RISING_MODE_MASK ;
				
			}else if (g_ModeTimer0 == COUNTER_FALLING_MODE){
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <Timer_Start+0xa2>
     9de:	8e c0       	rjmp	.+284    	; 0xafc <Timer_Start+0x1be>
				
				TCCR0 |= COUNTER_FALLING_MODE_MASK ;
     9e0:	83 b7       	in	r24, 0x33	; 51
     9e2:	86 60       	ori	r24, 0x06	; 6
     9e4:	83 bf       	out	0x33, r24	; 51
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	94 c0       	rjmp	.+296    	; 0xb12 <Timer_Start+0x1d4>
////////////// channel one /////////////////////

			case TIMER_CH1 :
			
			
			if (g_ModeTimer1 ==TIMER_MODE)
     9ea:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <g_ModeTimer1>
     9ee:	81 11       	cpse	r24, r1
     9f0:	3d c0       	rjmp	.+122    	; 0xa6c <Timer_Start+0x12e>
			{
				switch (g_prescaleTimer1)
     9f2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_prescaleTimer1>
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	e9 f0       	breq	.+58     	; 0xa34 <Timer_Start+0xf6>
     9fa:	28 f4       	brcc	.+10     	; 0xa06 <Timer_Start+0xc8>
     9fc:	88 23       	and	r24, r24
     9fe:	59 f0       	breq	.+22     	; 0xa16 <Timer_Start+0xd8>
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	89 f0       	breq	.+34     	; 0xa26 <Timer_Start+0xe8>
     a04:	7d c0       	rjmp	.+250    	; 0xb00 <Timer_Start+0x1c2>
     a06:	86 30       	cpi	r24, 0x06	; 6
     a08:	19 f1       	breq	.+70     	; 0xa50 <Timer_Start+0x112>
     a0a:	87 30       	cpi	r24, 0x07	; 7
     a0c:	41 f1       	breq	.+80     	; 0xa5e <Timer_Start+0x120>
     a0e:	84 30       	cpi	r24, 0x04	; 4
     a10:	09 f0       	breq	.+2      	; 0xa14 <Timer_Start+0xd6>
     a12:	76 c0       	rjmp	.+236    	; 0xb00 <Timer_Start+0x1c2>
     a14:	16 c0       	rjmp	.+44     	; 0xa42 <Timer_Start+0x104>
				{
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
     a16:	8e b5       	in	r24, 0x2e	; 46
     a18:	9f b5       	in	r25, 0x2f	; 47
     a1a:	88 6f       	ori	r24, 0xF8	; 248
     a1c:	9f 6f       	ori	r25, 0xFF	; 255
     a1e:	9f bd       	out	0x2f, r25	; 47
     a20:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a22:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer1)
				{
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
					break;
     a24:	76 c0       	rjmp	.+236    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
     a26:	8e b5       	in	r24, 0x2e	; 46
     a28:	9f b5       	in	r25, 0x2f	; 47
     a2a:	81 60       	ori	r24, 0x01	; 1
     a2c:	9f bd       	out	0x2f, r25	; 47
     a2e:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a30:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
					break;
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
					break;
     a32:	6f c0       	rjmp	.+222    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
     a34:	8e b5       	in	r24, 0x2e	; 46
     a36:	9f b5       	in	r25, 0x2f	; 47
     a38:	82 60       	ori	r24, 0x02	; 2
     a3a:	9f bd       	out	0x2f, r25	; 47
     a3c:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
					break;
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
					break;
     a40:	68 c0       	rjmp	.+208    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_64:
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
     a42:	8e b5       	in	r24, 0x2e	; 46
     a44:	9f b5       	in	r25, 0x2f	; 47
     a46:	83 60       	ori	r24, 0x03	; 3
     a48:	9f bd       	out	0x2f, r25	; 47
     a4a:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
					break;
					case TIMER_PRESCALER_64:
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
					break;
     a4e:	61 c0       	rjmp	.+194    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_256:
					TCCR1 |= TIMER1_PRESCALER_256_MASK ;
     a50:	8e b5       	in	r24, 0x2e	; 46
     a52:	9f b5       	in	r25, 0x2f	; 47
     a54:	84 60       	ori	r24, 0x04	; 4
     a56:	9f bd       	out	0x2f, r25	; 47
     a58:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
					break;
					case TIMER_PRESCALER_256:
					TCCR1 |= TIMER1_PRESCALER_256_MASK ;

					break;
     a5c:	5a c0       	rjmp	.+180    	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR1 |= TIMER1_PRESCALER_1024_MASK ;
     a5e:	8e b5       	in	r24, 0x2e	; 46
     a60:	9f b5       	in	r25, 0x2f	; 47
     a62:	85 60       	ori	r24, 0x05	; 5
     a64:	9f bd       	out	0x2f, r25	; 47
     a66:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a68:	80 e0       	ldi	r24, 0x00	; 0

					break;
					case TIMER_PRESCALER_1024:
					TCCR1 |= TIMER1_PRESCALER_1024_MASK ;

					break;
     a6a:	53 c0       	rjmp	.+166    	; 0xb12 <Timer_Start+0x1d4>
					break;
					
					
				}
				
				}else if (g_ModeTimer1 == COUNTER_RISING_MODE){
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	39 f4       	brne	.+14     	; 0xa7e <Timer_Start+0x140>
				
				TCCR1|= COUNTER_RISING_MODE_MASK ;
     a70:	8e b5       	in	r24, 0x2e	; 46
     a72:	9f b5       	in	r25, 0x2f	; 47
     a74:	87 60       	ori	r24, 0x07	; 7
     a76:	9f bd       	out	0x2f, r25	; 47
     a78:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	4a c0       	rjmp	.+148    	; 0xb12 <Timer_Start+0x1d4>
				
				}else if (g_ModeTimer1 == COUNTER_RISING_MODE){
				
				TCCR1|= COUNTER_RISING_MODE_MASK ;
				
				}else if (g_ModeTimer1 == COUNTER_FALLING_MODE){
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	09 f0       	breq	.+2      	; 0xa84 <Timer_Start+0x146>
     a82:	40 c0       	rjmp	.+128    	; 0xb04 <Timer_Start+0x1c6>
				
				TCCR1 |= COUNTER_FALLING_MODE_MASK ;
     a84:	8e b5       	in	r24, 0x2e	; 46
     a86:	9f b5       	in	r25, 0x2f	; 47
     a88:	86 60       	ori	r24, 0x06	; 6
     a8a:	9f bd       	out	0x2f, r25	; 47
     a8c:	8e bd       	out	0x2e, r24	; 46
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	40 c0       	rjmp	.+128    	; 0xb12 <Timer_Start+0x1d4>
			break;
			
//////////////// channel two /////////////////////
			case TIMER_CH2 :
			
			if (g_ModeTimer2 ==TIMER_MODE)
     a92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_ModeTimer2>
     a96:	81 11       	cpse	r24, r1
     a98:	3b c0       	rjmp	.+118    	; 0xb10 <Timer_Start+0x1d2>
			{
				switch (g_prescaleTimer2)
     a9a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <g_prescaleTimer2>
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	b9 f0       	breq	.+46     	; 0xad0 <Timer_Start+0x192>
     aa2:	28 f4       	brcc	.+10     	; 0xaae <Timer_Start+0x170>
     aa4:	88 23       	and	r24, r24
     aa6:	51 f0       	breq	.+20     	; 0xabc <Timer_Start+0x17e>
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	69 f0       	breq	.+26     	; 0xac6 <Timer_Start+0x188>
     aac:	2d c0       	rjmp	.+90     	; 0xb08 <Timer_Start+0x1ca>
     aae:	86 30       	cpi	r24, 0x06	; 6
     ab0:	c9 f0       	breq	.+50     	; 0xae4 <Timer_Start+0x1a6>
     ab2:	87 30       	cpi	r24, 0x07	; 7
     ab4:	e1 f0       	breq	.+56     	; 0xaee <Timer_Start+0x1b0>
     ab6:	84 30       	cpi	r24, 0x04	; 4
     ab8:	39 f5       	brne	.+78     	; 0xb08 <Timer_Start+0x1ca>
     aba:	0f c0       	rjmp	.+30     	; 0xada <Timer_Start+0x19c>
				{
					case TIMER_NO_CLOCK :
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
     abc:	85 b5       	in	r24, 0x25	; 37
     abe:	88 6f       	ori	r24, 0xF8	; 248
     ac0:	85 bd       	out	0x25, r24	; 37
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer2)
				{
					case TIMER_NO_CLOCK :
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
					break;
     ac4:	26 c0       	rjmp	.+76     	; 0xb12 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_NO:
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
     ac6:	85 b5       	in	r24, 0x25	; 37
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	85 bd       	out	0x25, r24	; 37
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     acc:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
					break;
					
					case TIMER_PRESCALER_NO:
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
					break;
     ace:	21 c0       	rjmp	.+66     	; 0xb12 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_8 :
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
     ad0:	85 b5       	in	r24, 0x25	; 37
     ad2:	82 60       	ori	r24, 0x02	; 2
     ad4:	85 bd       	out	0x25, r24	; 37
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
					break;
					
					case TIMER_PRESCALER_8 :
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
					break;
     ad8:	1c c0       	rjmp	.+56     	; 0xb12 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_64:
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
     ada:	85 b5       	in	r24, 0x25	; 37
     adc:	84 60       	ori	r24, 0x04	; 4
     ade:	85 bd       	out	0x25, r24	; 37
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
					break;
					
					case TIMER_PRESCALER_64:
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
					break;
     ae2:	17 c0       	rjmp	.+46     	; 0xb12 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_256:
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
     ae4:	85 b5       	in	r24, 0x25	; 37
     ae6:	86 60       	ori	r24, 0x06	; 6
     ae8:	85 bd       	out	0x25, r24	; 37
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     aea:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
					break;
					
					case TIMER_PRESCALER_256:
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
					break;
     aec:	12 c0       	rjmp	.+36     	; 0xb12 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
     aee:	85 b5       	in	r24, 0x25	; 37
     af0:	87 60       	ori	r24, 0x07	; 7
     af2:	85 bd       	out	0x25, r24	; 37
 */
	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
	
		uint8_t a_u8_error_state = E_OK ;
     af4:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
					break;
					
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
					break;
     af6:	0d c0       	rjmp	.+26     	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR0 |= TIMER0_PRESCALER_1024_MASK ;

					break;
					default:
					a_u8_error_state |= E_NOK ;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	0b c0       	rjmp	.+22     	; 0xb12 <Timer_Start+0x1d4>
			}else if (g_ModeTimer0 == COUNTER_FALLING_MODE){
				
				TCCR0 |= COUNTER_FALLING_MODE_MASK ;
				
			}else
				a_u8_error_state |= E_NOK ;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	09 c0       	rjmp	.+18     	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR1 |= TIMER1_PRESCALER_1024_MASK ;

					break;
					default:
					a_u8_error_state |= E_NOK;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	07 c0       	rjmp	.+14     	; 0xb12 <Timer_Start+0x1d4>
				}else if (g_ModeTimer1 == COUNTER_FALLING_MODE){
				
				TCCR1 |= COUNTER_FALLING_MODE_MASK ;
				
				}else 
				a_u8_error_state |= E_NOK ; 
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	05 c0       	rjmp	.+10     	; 0xb12 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
					break;
					
					default: 
					a_u8_error_state |= E_NOK ;
     b08:	81 e0       	ldi	r24, 0x01	; 1
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return a_u8_error_state ;
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <Timer_Start+0x1d4>
			return E_NOK ;
			// end if 
			break;	
			
			default: 
			return E_NOK ;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <Timer_Start+0x1d4>
					break;	
					
				}///end switch case prescale
				
			}else
			return E_NOK ;
     b10:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}/// end switch case channels
		
	return a_u8_error_state ;
	
}
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <Icu_Init>:
 *				  - E_NOK : not initialized successfully				  *
 * Description  : Initializes the ICU by initializing the timer			  *
 * 				                                     					  *
 **************************************************************************/

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg){
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <Icu_Init+0x6>
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <Icu_Init+0x8>
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <Icu_Init+0xa>
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
		uint8_t a_u8_error_state = E_OK ;

	
		Timer_cfg_s Timer_cfg ;
		
		if (Icu_Cfg == NULL)
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	89 f0       	breq	.+34     	; 0xb4a <Icu_Init+0x34>
		{
			a_u8_error_state |= E_NOK;
		}else{
			
			g_interruptCH_No = Icu_Cfg->ICU_Ch_No ;
     b28:	fc 01       	movw	r30, r24
     b2a:	20 81       	ld	r18, Z
     b2c:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <g_interruptCH_No>

			
			switch(Icu_Cfg->ICU_Ch_Timer){
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	81 11       	cpse	r24, r1
     b34:	0c c0       	rjmp	.+24     	; 0xb4e <Icu_Init+0x38>
				case ICU_TIMER_CH0 :
				
				Timer_cfg.Timer_CH_NO = TIMER_CH0 ;
     b36:	19 82       	std	Y+1, r1	; 0x01
				Timer_cfg.Timer_Mode = TIMER_MODE ;
     b38:	1a 82       	std	Y+2, r1	; 0x02
				Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
     b3a:	1b 82       	std	Y+3, r1	; 0x03
				Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_1024 ;
     b3c:	87 e0       	ldi	r24, 0x07	; 7
     b3e:	8c 83       	std	Y+4, r24	; 0x04
				
				// timer initialization 
				
				a_u8_error_state |=Timer_Init(&Timer_cfg);
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_Init>
				
				break;
     b48:	03 c0       	rjmp	.+6      	; 0xb50 <Icu_Init+0x3a>
	
		Timer_cfg_s Timer_cfg ;
		
		if (Icu_Cfg == NULL)
		{
			a_u8_error_state |= E_NOK;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <Icu_Init+0x3a>
				
				a_u8_error_state |=Timer_Init(&Timer_cfg);
				
				break;
				case ICU_TIMER_CH1 :
				a_u8_error_state |= E_NOK ;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
			
		}
		
		
		return a_u8_error_state  ;
}
     b50:	26 96       	adiw	r28, 0x06	; 6
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <Icu_ReadTime>:
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time){
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <Icu_ReadTime+0xe>
     b70:	00 d0       	rcall	.+0      	; 0xb72 <Icu_ReadTime+0x10>
     b72:	1f 92       	push	r1
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	f6 2e       	mov	r15, r22
     b7a:	8a 01       	movw	r16, r20
	
	uint8_t a_u8_error_state = E_OK ;

	uint16_t no_of_ticks = 0 ;
     b7c:	1a 82       	std	Y+2, r1	; 0x02
     b7e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t timerOfTicks_Us  ;
	//set edge and channel global  to update and use in ISR
	
	g_interruptEdge = SwICU_EdgeRisiging;
     b80:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <g_interruptEdge>
	g_timerCH = Icu_Channel ;
     b84:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_timerCH>
	
	
	switch(Icu_Channel){
     b88:	88 23       	and	r24, r24
     b8a:	29 f0       	breq	.+10     	; 0xb96 <Icu_ReadTime+0x34>
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	b8 f1       	brcs	.+110    	; 0xbfe <Icu_ReadTime+0x9c>
			case ICU_TIMER_CH1 :
			break;
			case ICU_TIMER_CH2 :
			break;
			default:
			a_u8_error_state |= E_NOK ;
     b90:	ff 24       	eor	r15, r15
     b92:	f3 94       	inc	r15
     b94:	35 c0       	rjmp	.+106    	; 0xc00 <Icu_ReadTime+0x9e>

static ERROR_STATUS SetExternal_INT_Edge( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){
	uint8_t a_u8_error_state = E_OK ;
	 
	DIO_Cfg_s dioCfg_INT2;
	switch(interruptCH_No){
     b96:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_interruptCH_No>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	e8 f0       	brcs	.+58     	; 0xbd8 <Icu_ReadTime+0x76>
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	11 f0       	breq	.+4      	; 0xba6 <Icu_ReadTime+0x44>
				CLEAR_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
			else
				a_u8_error_state |= E_NOK ;
			break;
		default:
			a_u8_error_state |= E_NOK ;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	1a c0       	rjmp	.+52     	; 0xbda <Icu_ReadTime+0x78>
		case ICU_CH1:
		break;
		case ICU_CH2:
			
			
			dioCfg_INT2.GPIO = GPIOB;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8b 83       	std	Y+3, r24	; 0x03
			dioCfg_INT2.pins = BIT2;
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 83       	std	Y+4, r24	; 0x04
			dioCfg_INT2.dir =INPUT;
     bae:	1d 82       	std	Y+5, r1	; 0x05
			
			a_u8_error_state |= DIO_init(&dioCfg_INT2);
     bb0:	ce 01       	movw	r24, r28
     bb2:	03 96       	adiw	r24, 0x03	; 3
     bb4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_init>
			
			
			if(SwICU_Edge== ICU_RISE_TO_FALL){
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	f9 12       	cpse	r15, r25
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <Icu_ReadTime+0x64>
				
				SET_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
     bbe:	94 b7       	in	r25, 0x34	; 52
     bc0:	90 64       	ori	r25, 0x40	; 64
     bc2:	94 bf       	out	0x34, r25	; 52
     bc4:	0a c0       	rjmp	.+20     	; 0xbda <Icu_ReadTime+0x78>
				}
			else if(SwICU_Edge== ICU_FALE_TO_RISE)
     bc6:	e2 e0       	ldi	r30, 0x02	; 2
     bc8:	fe 12       	cpse	r15, r30
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <Icu_ReadTime+0x72>
				CLEAR_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
     bcc:	94 b7       	in	r25, 0x34	; 52
     bce:	9f 7b       	andi	r25, 0xBF	; 191
     bd0:	94 bf       	out	0x34, r25	; 52
     bd2:	03 c0       	rjmp	.+6      	; 0xbda <Icu_ReadTime+0x78>
			else
				a_u8_error_state |= E_NOK ;
     bd4:	81 60       	ori	r24, 0x01	; 1
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <Icu_ReadTime+0x78>
 * 																		  *
 **************************************************************************/


static ERROR_STATUS SetExternal_INT_Edge( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){
	uint8_t a_u8_error_state = E_OK ;
     bd8:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Icu_Channel){
			case ICU_TIMER_CH0:
			
			a_u8_error_state |= SetExternal_INT_Edge(Icu_EdgeToEdge,g_interruptCH_No);
			a_u8_error_state |= SetExternal_INT_enable(Icu_EdgeToEdge,g_interruptCH_No) ;
     bda:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <g_interruptCH_No>
static ERROR_STATUS SetExternal_INT_enable( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){

	uint8_t a_u8_error_state = E_OK ;
	
	/*		initialize global interrupt				*/
		sei();
     bde:	78 94       	sei
	
		switch(interruptCH_No){
     be0:	92 30       	cpi	r25, 0x02	; 2
     be2:	48 f0       	brcs	.+18     	; 0xbf6 <Icu_ReadTime+0x94>
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	11 f0       	breq	.+4      	; 0xbec <Icu_ReadTime+0x8a>
			break;
			case ICU_CH2:
				INT2_EN_GPIO |= 1 << INT2_EN_BIT ;
			break;
			default:
			a_u8_error_state |= E_NOK ;
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	06 c0       	rjmp	.+12     	; 0xbf8 <Icu_ReadTime+0x96>
			case ICU_CH0 :
			break;
			case ICU_CH1:
			break;
			case ICU_CH2:
				INT2_EN_GPIO |= 1 << INT2_EN_BIT ;
     bec:	9b b7       	in	r25, 0x3b	; 59
     bee:	90 62       	ori	r25, 0x20	; 32
     bf0:	9b bf       	out	0x3b, r25	; 59
 **************************************************************************/


static ERROR_STATUS SetExternal_INT_enable( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){

	uint8_t a_u8_error_state = E_OK ;
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <Icu_ReadTime+0x96>
     bf6:	90 e0       	ldi	r25, 0x00	; 0
	
	switch(Icu_Channel){
			case ICU_TIMER_CH0:
			
			a_u8_error_state |= SetExternal_INT_Edge(Icu_EdgeToEdge,g_interruptCH_No);
			a_u8_error_state |= SetExternal_INT_enable(Icu_EdgeToEdge,g_interruptCH_No) ;
     bf8:	f9 2e       	mov	r15, r25
     bfa:	f8 2a       	or	r15, r24
			
			break;
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <Icu_ReadTime+0x9e>
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time){
	
	uint8_t a_u8_error_state = E_OK ;
     bfe:	f1 2c       	mov	r15, r1
			default:
			a_u8_error_state |= E_NOK ;
	}
	
	/* poll on the falling edge occurrence*/  
	while(!g_fallingEdgeFlag) ;
     c00:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <g_fallingEdgeFlag>
     c04:	99 23       	and	r25, r25
     c06:	e1 f3       	breq	.-8      	; 0xc00 <Icu_ReadTime+0x9e>
	
	
	a_u8_error_state |= Timer_GetValue(g_timerCH ,&no_of_ticks) ;
     c08:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_timerCH>
     c0c:	be 01       	movw	r22, r28
     c0e:	6f 5f       	subi	r22, 0xFF	; 255
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	0e 94 6d 04 	call	0x8da	; 0x8da <Timer_GetValue>
     c16:	e8 2e       	mov	r14, r24
	a_u8_error_state |= Timer_GetStatus(TIMER_CH0 ,&g_ovf_flag );
     c18:	68 e6       	ldi	r22, 0x68	; 104
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 38 04 	call	0x870	; 0x870 <Timer_GetStatus>
     c22:	8e 29       	or	r24, r14
     c24:	8f 29       	or	r24, r15
	
	/*check if an ovf take place to add to time*/
	
	if (g_ovf_flag == TRUE)
     c26:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <g_ovf_flag>
     c2a:	91 30       	cpi	r25, 0x01	; 1
     c2c:	21 f4       	brne	.+8      	; 0xc36 <Icu_ReadTime+0xd4>
	{
		no_of_ticks=MAX_NO_TICKS;
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	31 e0       	ldi	r19, 0x01	; 1
     c32:	3a 83       	std	Y+2, r19	; 0x02
     c34:	29 83       	std	Y+1, r18	; 0x01
	}
	
	g_ovf_flag = FALSE ;
     c36:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <g_ovf_flag>
	
			/*calculate the timer of pulse in microsecond */
			
	timerOfTicks_Us = no_of_ticks * tickTimeUs ;
	
	*Icu_Time = timerOfTicks_Us ;
     c3a:	49 81       	ldd	r20, Y+1	; 0x01
     c3c:	5a 81       	ldd	r21, Y+2	; 0x02
     c3e:	00 24       	eor	r0, r0
     c40:	56 95       	lsr	r21
     c42:	47 95       	ror	r20
     c44:	07 94       	ror	r0
     c46:	56 95       	lsr	r21
     c48:	47 95       	ror	r20
     c4a:	07 94       	ror	r0
     c4c:	54 2f       	mov	r21, r20
     c4e:	40 2d       	mov	r20, r0
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	f8 01       	movw	r30, r16
     c56:	40 83       	st	Z, r20
     c58:	51 83       	std	Z+1, r21	; 0x01
     c5a:	62 83       	std	Z+2, r22	; 0x02
     c5c:	73 83       	std	Z+3, r23	; 0x03
	
	return a_u8_error_state ;
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	08 95       	ret

00000c76 <__vector_3>:




ISR(INT2_vect){
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
	
	switch (g_interruptEdge){
     c98:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <g_interruptEdge>
     c9c:	88 23       	and	r24, r24
     c9e:	19 f0       	breq	.+6      	; 0xca6 <__vector_3+0x30>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	81 f0       	breq	.+32     	; 0xcc4 <__vector_3+0x4e>
     ca4:	1d c0       	rjmp	.+58     	; 0xce0 <__vector_3+0x6a>
          /*rising*/	
		  	
			case SwICU_EdgeRisiging :
			
		
				switch(g_timerCH){
     ca6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_timerCH>
     caa:	81 11       	cpse	r24, r1
     cac:	19 c0       	rjmp	.+50     	; 0xce0 <__vector_3+0x6a>
					case ICU_TIMER_CH0 :
				
					Timer_Start(TIMER_CH0,MAX_NO_TICKS);
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	71 e0       	ldi	r23, 0x01	; 1
     cb2:	0e 94 9f 04 	call	0x93e	; 0x93e <Timer_Start>
				
					/*update the control to start at falling edge*/
					INT2_EDGE_GPIO &= ~(1<<INT2_EDGE_BIT) ;
     cb6:	84 b7       	in	r24, 0x34	; 52
     cb8:	8f 7b       	andi	r24, 0xBF	; 191
     cba:	84 bf       	out	0x34, r24	; 52
				
					g_interruptEdge = SwICU_EdgeFalling;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <g_interruptEdge>
					break;
     cc2:	0e c0       	rjmp	.+28     	; 0xce0 <__vector_3+0x6a>
					/*falling*/
			
			case SwICU_EdgeFalling :
			
				
				switch(g_timerCH){
     cc4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_timerCH>
     cc8:	81 11       	cpse	r24, r1
     cca:	0a c0       	rjmp	.+20     	; 0xce0 <__vector_3+0x6a>
				
					case ICU_TIMER_CH0 :
				
					Timer_Stop(TIMER_CH0);
     ccc:	0e 94 1f 04 	call	0x83e	; 0x83e <Timer_Stop>
				
					//update the control to start at raising edge
				
					INT2_EDGE_GPIO |= 1<<INT2_EDGE_BIT ;
     cd0:	84 b7       	in	r24, 0x34	; 52
     cd2:	80 64       	ori	r24, 0x40	; 64
     cd4:	84 bf       	out	0x34, r24	; 52
				
					g_interruptEdge = SwICU_EdgeRisiging;
     cd6:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <g_interruptEdge>
					g_fallingEdgeFlag = TRUE ;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <g_fallingEdgeFlag>
					default:
						break ;
					}
	break;
}
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <timerDelayMs>:
 *  Author: MENA
 */ 
#include "Timer.h"
#include "TimerDelay.h"

ERROR_STATUS timerDelayMs(uint16_t u16_delay_in_ms){
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	27 97       	sbiw	r28, 0x07	; 7
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	7c 01       	movw	r14, r24
	
	ERROR_STATUS state_error = E_OK ;
	
	uint8_t ovf_flag = ZERO_VALUE ;
     d1e:	19 82       	std	Y+1, r1	; 0x01
	Timer_cfg_s Timer_cfg ;
	Timer_cfg.Timer_CH_NO = TIMER_CH2 ;
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	8a 83       	std	Y+2, r24	; 0x02
	Timer_cfg.Timer_Mode = TIMER_MODE ;
     d24:	1b 82       	std	Y+3, r1	; 0x03
	Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
     d26:	1c 82       	std	Y+4, r1	; 0x04
	Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64 ;
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	8d 83       	std	Y+5, r24	; 0x05
	
	state_error |= Timer_Init(&Timer_cfg) ;
     d2c:	ce 01       	movw	r24, r28
     d2e:	02 96       	adiw	r24, 0x02	; 2
     d30:	0e 94 c4 03 	call	0x788	; 0x788 <Timer_Init>
     d34:	18 2f       	mov	r17, r24
	
	/************************************************************************/
	/* 250 number of tick  for 1 millisecond - 11 ticks error due to function calls*/
	/************************************************************************/
		
		state_error |= Timer_Start(Timer_cfg.Timer_CH_NO , 239 );
     d36:	6f ee       	ldi	r22, 0xEF	; 239
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	0e 94 9f 04 	call	0x93e	; 0x93e <Timer_Start>
     d40:	18 2b       	or	r17, r24
		
		/* delay required in millisecond */
		
		while (u16_delay_in_ms)
     d42:	e1 14       	cp	r14, r1
     d44:	f1 04       	cpc	r15, r1
     d46:	81 f0       	breq	.+32     	; 0xd68 <timerDelayMs+0x66>
		{
			/* polling on ovf flag */
			
			state_error |= Timer_GetStatus (Timer_cfg.Timer_CH_NO , &ovf_flag);
     d48:	be 01       	movw	r22, r28
     d4a:	6f 5f       	subi	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	0e 94 38 04 	call	0x870	; 0x870 <Timer_GetStatus>
     d54:	18 2b       	or	r17, r24
			if(ovf_flag == TRUE)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	19 f4       	brne	.+6      	; 0xd62 <timerDelayMs+0x60>
			{
				u16_delay_in_ms -- ;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	e8 1a       	sub	r14, r24
     d60:	f1 08       	sbc	r15, r1
		
		state_error |= Timer_Start(Timer_cfg.Timer_CH_NO , 239 );
		
		/* delay required in millisecond */
		
		while (u16_delay_in_ms)
     d62:	e1 14       	cp	r14, r1
     d64:	f1 04       	cpc	r15, r1
     d66:	81 f7       	brne	.-32     	; 0xd48 <timerDelayMs+0x46>
			{
				u16_delay_in_ms -- ;
			}
			
		}
		state_error |= Timer_Stop(Timer_cfg.Timer_CH_NO);
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	0e 94 1f 04 	call	0x83e	; 0x83e <Timer_Stop>
	
	return state_error ;
     d6e:	81 2b       	or	r24, r17
     d70:	27 96       	adiw	r28, 0x07	; 7
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	08 95       	ret

00000d88 <__divsf3>:
     d88:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__divsf3x>
     d8c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_round>
     d90:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscB>
     d94:	58 f0       	brcs	.+22     	; 0xdac <__divsf3+0x24>
     d96:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscA>
     d9a:	40 f0       	brcs	.+16     	; 0xdac <__divsf3+0x24>
     d9c:	29 f4       	brne	.+10     	; 0xda8 <__divsf3+0x20>
     d9e:	5f 3f       	cpi	r21, 0xFF	; 255
     da0:	29 f0       	breq	.+10     	; 0xdac <__divsf3+0x24>
     da2:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
     da6:	51 11       	cpse	r21, r1
     da8:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     dac:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_nan>

00000db0 <__divsf3x>:
     db0:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_split3>
     db4:	68 f3       	brcs	.-38     	; 0xd90 <__divsf3+0x8>

00000db6 <__divsf3_pse>:
     db6:	99 23       	and	r25, r25
     db8:	b1 f3       	breq	.-20     	; 0xda6 <__divsf3+0x1e>
     dba:	55 23       	and	r21, r21
     dbc:	91 f3       	breq	.-28     	; 0xda2 <__divsf3+0x1a>
     dbe:	95 1b       	sub	r25, r21
     dc0:	55 0b       	sbc	r21, r21
     dc2:	bb 27       	eor	r27, r27
     dc4:	aa 27       	eor	r26, r26
     dc6:	62 17       	cp	r22, r18
     dc8:	73 07       	cpc	r23, r19
     dca:	84 07       	cpc	r24, r20
     dcc:	38 f0       	brcs	.+14     	; 0xddc <__divsf3_pse+0x26>
     dce:	9f 5f       	subi	r25, 0xFF	; 255
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	44 1f       	adc	r20, r20
     dd8:	aa 1f       	adc	r26, r26
     dda:	a9 f3       	breq	.-22     	; 0xdc6 <__divsf3_pse+0x10>
     ddc:	35 d0       	rcall	.+106    	; 0xe48 <__divsf3_pse+0x92>
     dde:	0e 2e       	mov	r0, r30
     de0:	3a f0       	brmi	.+14     	; 0xdf0 <__divsf3_pse+0x3a>
     de2:	e0 e8       	ldi	r30, 0x80	; 128
     de4:	32 d0       	rcall	.+100    	; 0xe4a <__divsf3_pse+0x94>
     de6:	91 50       	subi	r25, 0x01	; 1
     de8:	50 40       	sbci	r21, 0x00	; 0
     dea:	e6 95       	lsr	r30
     dec:	00 1c       	adc	r0, r0
     dee:	ca f7       	brpl	.-14     	; 0xde2 <__divsf3_pse+0x2c>
     df0:	2b d0       	rcall	.+86     	; 0xe48 <__divsf3_pse+0x92>
     df2:	fe 2f       	mov	r31, r30
     df4:	29 d0       	rcall	.+82     	; 0xe48 <__divsf3_pse+0x92>
     df6:	66 0f       	add	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	bb 1f       	adc	r27, r27
     dfe:	26 17       	cp	r18, r22
     e00:	37 07       	cpc	r19, r23
     e02:	48 07       	cpc	r20, r24
     e04:	ab 07       	cpc	r26, r27
     e06:	b0 e8       	ldi	r27, 0x80	; 128
     e08:	09 f0       	breq	.+2      	; 0xe0c <__divsf3_pse+0x56>
     e0a:	bb 0b       	sbc	r27, r27
     e0c:	80 2d       	mov	r24, r0
     e0e:	bf 01       	movw	r22, r30
     e10:	ff 27       	eor	r31, r31
     e12:	93 58       	subi	r25, 0x83	; 131
     e14:	5f 4f       	sbci	r21, 0xFF	; 255
     e16:	3a f0       	brmi	.+14     	; 0xe26 <__divsf3_pse+0x70>
     e18:	9e 3f       	cpi	r25, 0xFE	; 254
     e1a:	51 05       	cpc	r21, r1
     e1c:	78 f0       	brcs	.+30     	; 0xe3c <__divsf3_pse+0x86>
     e1e:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
     e22:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
     e26:	5f 3f       	cpi	r21, 0xFF	; 255
     e28:	e4 f3       	brlt	.-8      	; 0xe22 <__divsf3_pse+0x6c>
     e2a:	98 3e       	cpi	r25, 0xE8	; 232
     e2c:	d4 f3       	brlt	.-12     	; 0xe22 <__divsf3_pse+0x6c>
     e2e:	86 95       	lsr	r24
     e30:	77 95       	ror	r23
     e32:	67 95       	ror	r22
     e34:	b7 95       	ror	r27
     e36:	f7 95       	ror	r31
     e38:	9f 5f       	subi	r25, 0xFF	; 255
     e3a:	c9 f7       	brne	.-14     	; 0xe2e <__divsf3_pse+0x78>
     e3c:	88 0f       	add	r24, r24
     e3e:	91 1d       	adc	r25, r1
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	97 f9       	bld	r25, 7
     e46:	08 95       	ret
     e48:	e1 e0       	ldi	r30, 0x01	; 1
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	bb 1f       	adc	r27, r27
     e52:	62 17       	cp	r22, r18
     e54:	73 07       	cpc	r23, r19
     e56:	84 07       	cpc	r24, r20
     e58:	ba 07       	cpc	r27, r26
     e5a:	20 f0       	brcs	.+8      	; 0xe64 <__divsf3_pse+0xae>
     e5c:	62 1b       	sub	r22, r18
     e5e:	73 0b       	sbc	r23, r19
     e60:	84 0b       	sbc	r24, r20
     e62:	ba 0b       	sbc	r27, r26
     e64:	ee 1f       	adc	r30, r30
     e66:	88 f7       	brcc	.-30     	; 0xe4a <__divsf3_pse+0x94>
     e68:	e0 95       	com	r30
     e6a:	08 95       	ret

00000e6c <__fixunssfsi>:
     e6c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__fp_splitA>
     e70:	88 f0       	brcs	.+34     	; 0xe94 <__fixunssfsi+0x28>
     e72:	9f 57       	subi	r25, 0x7F	; 127
     e74:	98 f0       	brcs	.+38     	; 0xe9c <__fixunssfsi+0x30>
     e76:	b9 2f       	mov	r27, r25
     e78:	99 27       	eor	r25, r25
     e7a:	b7 51       	subi	r27, 0x17	; 23
     e7c:	b0 f0       	brcs	.+44     	; 0xeaa <__fixunssfsi+0x3e>
     e7e:	e1 f0       	breq	.+56     	; 0xeb8 <__fixunssfsi+0x4c>
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	88 1f       	adc	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	1a f0       	brmi	.+6      	; 0xe90 <__fixunssfsi+0x24>
     e8a:	ba 95       	dec	r27
     e8c:	c9 f7       	brne	.-14     	; 0xe80 <__fixunssfsi+0x14>
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <__fixunssfsi+0x4c>
     e90:	b1 30       	cpi	r27, 0x01	; 1
     e92:	91 f0       	breq	.+36     	; 0xeb8 <__fixunssfsi+0x4c>
     e94:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__fp_zero>
     e98:	b1 e0       	ldi	r27, 0x01	; 1
     e9a:	08 95       	ret
     e9c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_zero>
     ea0:	67 2f       	mov	r22, r23
     ea2:	78 2f       	mov	r23, r24
     ea4:	88 27       	eor	r24, r24
     ea6:	b8 5f       	subi	r27, 0xF8	; 248
     ea8:	39 f0       	breq	.+14     	; 0xeb8 <__fixunssfsi+0x4c>
     eaa:	b9 3f       	cpi	r27, 0xF9	; 249
     eac:	cc f3       	brlt	.-14     	; 0xea0 <__fixunssfsi+0x34>
     eae:	86 95       	lsr	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b3 95       	inc	r27
     eb6:	d9 f7       	brne	.-10     	; 0xeae <__fixunssfsi+0x42>
     eb8:	3e f4       	brtc	.+14     	; 0xec8 <__fixunssfsi+0x5c>
     eba:	90 95       	com	r25
     ebc:	80 95       	com	r24
     ebe:	70 95       	com	r23
     ec0:	61 95       	neg	r22
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8f 4f       	sbci	r24, 0xFF	; 255
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	08 95       	ret

00000eca <__floatunsisf>:
     eca:	e8 94       	clt
     ecc:	09 c0       	rjmp	.+18     	; 0xee0 <__floatsisf+0x12>

00000ece <__floatsisf>:
     ece:	97 fb       	bst	r25, 7
     ed0:	3e f4       	brtc	.+14     	; 0xee0 <__floatsisf+0x12>
     ed2:	90 95       	com	r25
     ed4:	80 95       	com	r24
     ed6:	70 95       	com	r23
     ed8:	61 95       	neg	r22
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	8f 4f       	sbci	r24, 0xFF	; 255
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	99 23       	and	r25, r25
     ee2:	a9 f0       	breq	.+42     	; 0xf0e <__floatsisf+0x40>
     ee4:	f9 2f       	mov	r31, r25
     ee6:	96 e9       	ldi	r25, 0x96	; 150
     ee8:	bb 27       	eor	r27, r27
     eea:	93 95       	inc	r25
     eec:	f6 95       	lsr	r31
     eee:	87 95       	ror	r24
     ef0:	77 95       	ror	r23
     ef2:	67 95       	ror	r22
     ef4:	b7 95       	ror	r27
     ef6:	f1 11       	cpse	r31, r1
     ef8:	f8 cf       	rjmp	.-16     	; 0xeea <__floatsisf+0x1c>
     efa:	fa f4       	brpl	.+62     	; 0xf3a <__floatsisf+0x6c>
     efc:	bb 0f       	add	r27, r27
     efe:	11 f4       	brne	.+4      	; 0xf04 <__floatsisf+0x36>
     f00:	60 ff       	sbrs	r22, 0
     f02:	1b c0       	rjmp	.+54     	; 0xf3a <__floatsisf+0x6c>
     f04:	6f 5f       	subi	r22, 0xFF	; 255
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	16 c0       	rjmp	.+44     	; 0xf3a <__floatsisf+0x6c>
     f0e:	88 23       	and	r24, r24
     f10:	11 f0       	breq	.+4      	; 0xf16 <__floatsisf+0x48>
     f12:	96 e9       	ldi	r25, 0x96	; 150
     f14:	11 c0       	rjmp	.+34     	; 0xf38 <__floatsisf+0x6a>
     f16:	77 23       	and	r23, r23
     f18:	21 f0       	breq	.+8      	; 0xf22 <__floatsisf+0x54>
     f1a:	9e e8       	ldi	r25, 0x8E	; 142
     f1c:	87 2f       	mov	r24, r23
     f1e:	76 2f       	mov	r23, r22
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <__floatsisf+0x5e>
     f22:	66 23       	and	r22, r22
     f24:	71 f0       	breq	.+28     	; 0xf42 <__floatsisf+0x74>
     f26:	96 e8       	ldi	r25, 0x86	; 134
     f28:	86 2f       	mov	r24, r22
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	2a f0       	brmi	.+10     	; 0xf3a <__floatsisf+0x6c>
     f30:	9a 95       	dec	r25
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	88 1f       	adc	r24, r24
     f38:	da f7       	brpl	.-10     	; 0xf30 <__floatsisf+0x62>
     f3a:	88 0f       	add	r24, r24
     f3c:	96 95       	lsr	r25
     f3e:	87 95       	ror	r24
     f40:	97 f9       	bld	r25, 7
     f42:	08 95       	ret

00000f44 <__fp_inf>:
     f44:	97 f9       	bld	r25, 7
     f46:	9f 67       	ori	r25, 0x7F	; 127
     f48:	80 e8       	ldi	r24, 0x80	; 128
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	08 95       	ret

00000f50 <__fp_nan>:
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	80 ec       	ldi	r24, 0xC0	; 192
     f54:	08 95       	ret

00000f56 <__fp_pscA>:
     f56:	00 24       	eor	r0, r0
     f58:	0a 94       	dec	r0
     f5a:	16 16       	cp	r1, r22
     f5c:	17 06       	cpc	r1, r23
     f5e:	18 06       	cpc	r1, r24
     f60:	09 06       	cpc	r0, r25
     f62:	08 95       	ret

00000f64 <__fp_pscB>:
     f64:	00 24       	eor	r0, r0
     f66:	0a 94       	dec	r0
     f68:	12 16       	cp	r1, r18
     f6a:	13 06       	cpc	r1, r19
     f6c:	14 06       	cpc	r1, r20
     f6e:	05 06       	cpc	r0, r21
     f70:	08 95       	ret

00000f72 <__fp_round>:
     f72:	09 2e       	mov	r0, r25
     f74:	03 94       	inc	r0
     f76:	00 0c       	add	r0, r0
     f78:	11 f4       	brne	.+4      	; 0xf7e <__fp_round+0xc>
     f7a:	88 23       	and	r24, r24
     f7c:	52 f0       	brmi	.+20     	; 0xf92 <__fp_round+0x20>
     f7e:	bb 0f       	add	r27, r27
     f80:	40 f4       	brcc	.+16     	; 0xf92 <__fp_round+0x20>
     f82:	bf 2b       	or	r27, r31
     f84:	11 f4       	brne	.+4      	; 0xf8a <__fp_round+0x18>
     f86:	60 ff       	sbrs	r22, 0
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <__fp_round+0x20>
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	8f 4f       	sbci	r24, 0xFF	; 255
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	08 95       	ret

00000f94 <__fp_split3>:
     f94:	57 fd       	sbrc	r21, 7
     f96:	90 58       	subi	r25, 0x80	; 128
     f98:	44 0f       	add	r20, r20
     f9a:	55 1f       	adc	r21, r21
     f9c:	59 f0       	breq	.+22     	; 0xfb4 <__fp_splitA+0x10>
     f9e:	5f 3f       	cpi	r21, 0xFF	; 255
     fa0:	71 f0       	breq	.+28     	; 0xfbe <__fp_splitA+0x1a>
     fa2:	47 95       	ror	r20

00000fa4 <__fp_splitA>:
     fa4:	88 0f       	add	r24, r24
     fa6:	97 fb       	bst	r25, 7
     fa8:	99 1f       	adc	r25, r25
     faa:	61 f0       	breq	.+24     	; 0xfc4 <__fp_splitA+0x20>
     fac:	9f 3f       	cpi	r25, 0xFF	; 255
     fae:	79 f0       	breq	.+30     	; 0xfce <__fp_splitA+0x2a>
     fb0:	87 95       	ror	r24
     fb2:	08 95       	ret
     fb4:	12 16       	cp	r1, r18
     fb6:	13 06       	cpc	r1, r19
     fb8:	14 06       	cpc	r1, r20
     fba:	55 1f       	adc	r21, r21
     fbc:	f2 cf       	rjmp	.-28     	; 0xfa2 <__fp_split3+0xe>
     fbe:	46 95       	lsr	r20
     fc0:	f1 df       	rcall	.-30     	; 0xfa4 <__fp_splitA>
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <__fp_splitA+0x30>
     fc4:	16 16       	cp	r1, r22
     fc6:	17 06       	cpc	r1, r23
     fc8:	18 06       	cpc	r1, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	f1 cf       	rjmp	.-30     	; 0xfb0 <__fp_splitA+0xc>
     fce:	86 95       	lsr	r24
     fd0:	71 05       	cpc	r23, r1
     fd2:	61 05       	cpc	r22, r1
     fd4:	08 94       	sec
     fd6:	08 95       	ret

00000fd8 <__fp_zero>:
     fd8:	e8 94       	clt

00000fda <__fp_szero>:
     fda:	bb 27       	eor	r27, r27
     fdc:	66 27       	eor	r22, r22
     fde:	77 27       	eor	r23, r23
     fe0:	cb 01       	movw	r24, r22
     fe2:	97 f9       	bld	r25, 7
     fe4:	08 95       	ret

00000fe6 <__mulsf3>:
     fe6:	0e 94 06 08 	call	0x100c	; 0x100c <__mulsf3x>
     fea:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_round>
     fee:	0e 94 ab 07 	call	0xf56	; 0xf56 <__fp_pscA>
     ff2:	38 f0       	brcs	.+14     	; 0x1002 <__mulsf3+0x1c>
     ff4:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscB>
     ff8:	20 f0       	brcs	.+8      	; 0x1002 <__mulsf3+0x1c>
     ffa:	95 23       	and	r25, r21
     ffc:	11 f0       	breq	.+4      	; 0x1002 <__mulsf3+0x1c>
     ffe:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
    1002:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__fp_nan>
    1006:	11 24       	eor	r1, r1
    1008:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>

0000100c <__mulsf3x>:
    100c:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_split3>
    1010:	70 f3       	brcs	.-36     	; 0xfee <__mulsf3+0x8>

00001012 <__mulsf3_pse>:
    1012:	95 9f       	mul	r25, r21
    1014:	c1 f3       	breq	.-16     	; 0x1006 <__mulsf3+0x20>
    1016:	95 0f       	add	r25, r21
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	55 1f       	adc	r21, r21
    101c:	62 9f       	mul	r22, r18
    101e:	f0 01       	movw	r30, r0
    1020:	72 9f       	mul	r23, r18
    1022:	bb 27       	eor	r27, r27
    1024:	f0 0d       	add	r31, r0
    1026:	b1 1d       	adc	r27, r1
    1028:	63 9f       	mul	r22, r19
    102a:	aa 27       	eor	r26, r26
    102c:	f0 0d       	add	r31, r0
    102e:	b1 1d       	adc	r27, r1
    1030:	aa 1f       	adc	r26, r26
    1032:	64 9f       	mul	r22, r20
    1034:	66 27       	eor	r22, r22
    1036:	b0 0d       	add	r27, r0
    1038:	a1 1d       	adc	r26, r1
    103a:	66 1f       	adc	r22, r22
    103c:	82 9f       	mul	r24, r18
    103e:	22 27       	eor	r18, r18
    1040:	b0 0d       	add	r27, r0
    1042:	a1 1d       	adc	r26, r1
    1044:	62 1f       	adc	r22, r18
    1046:	73 9f       	mul	r23, r19
    1048:	b0 0d       	add	r27, r0
    104a:	a1 1d       	adc	r26, r1
    104c:	62 1f       	adc	r22, r18
    104e:	83 9f       	mul	r24, r19
    1050:	a0 0d       	add	r26, r0
    1052:	61 1d       	adc	r22, r1
    1054:	22 1f       	adc	r18, r18
    1056:	74 9f       	mul	r23, r20
    1058:	33 27       	eor	r19, r19
    105a:	a0 0d       	add	r26, r0
    105c:	61 1d       	adc	r22, r1
    105e:	23 1f       	adc	r18, r19
    1060:	84 9f       	mul	r24, r20
    1062:	60 0d       	add	r22, r0
    1064:	21 1d       	adc	r18, r1
    1066:	82 2f       	mov	r24, r18
    1068:	76 2f       	mov	r23, r22
    106a:	6a 2f       	mov	r22, r26
    106c:	11 24       	eor	r1, r1
    106e:	9f 57       	subi	r25, 0x7F	; 127
    1070:	50 40       	sbci	r21, 0x00	; 0
    1072:	9a f0       	brmi	.+38     	; 0x109a <__mulsf3_pse+0x88>
    1074:	f1 f0       	breq	.+60     	; 0x10b2 <__mulsf3_pse+0xa0>
    1076:	88 23       	and	r24, r24
    1078:	4a f0       	brmi	.+18     	; 0x108c <__mulsf3_pse+0x7a>
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	bb 1f       	adc	r27, r27
    1080:	66 1f       	adc	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	91 50       	subi	r25, 0x01	; 1
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	a9 f7       	brne	.-22     	; 0x1076 <__mulsf3_pse+0x64>
    108c:	9e 3f       	cpi	r25, 0xFE	; 254
    108e:	51 05       	cpc	r21, r1
    1090:	80 f0       	brcs	.+32     	; 0x10b2 <__mulsf3_pse+0xa0>
    1092:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_inf>
    1096:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__fp_szero>
    109a:	5f 3f       	cpi	r21, 0xFF	; 255
    109c:	e4 f3       	brlt	.-8      	; 0x1096 <__mulsf3_pse+0x84>
    109e:	98 3e       	cpi	r25, 0xE8	; 232
    10a0:	d4 f3       	brlt	.-12     	; 0x1096 <__mulsf3_pse+0x84>
    10a2:	86 95       	lsr	r24
    10a4:	77 95       	ror	r23
    10a6:	67 95       	ror	r22
    10a8:	b7 95       	ror	r27
    10aa:	f7 95       	ror	r31
    10ac:	e7 95       	ror	r30
    10ae:	9f 5f       	subi	r25, 0xFF	; 255
    10b0:	c1 f7       	brne	.-16     	; 0x10a2 <__mulsf3_pse+0x90>
    10b2:	fe 2b       	or	r31, r30
    10b4:	88 0f       	add	r24, r24
    10b6:	91 1d       	adc	r25, r1
    10b8:	96 95       	lsr	r25
    10ba:	87 95       	ror	r24
    10bc:	97 f9       	bld	r25, 7
    10be:	08 95       	ret

000010c0 <__udivmodsi4>:
    10c0:	a1 e2       	ldi	r26, 0x21	; 33
    10c2:	1a 2e       	mov	r1, r26
    10c4:	aa 1b       	sub	r26, r26
    10c6:	bb 1b       	sub	r27, r27
    10c8:	fd 01       	movw	r30, r26
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <__udivmodsi4_ep>

000010cc <__udivmodsi4_loop>:
    10cc:	aa 1f       	adc	r26, r26
    10ce:	bb 1f       	adc	r27, r27
    10d0:	ee 1f       	adc	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	a2 17       	cp	r26, r18
    10d6:	b3 07       	cpc	r27, r19
    10d8:	e4 07       	cpc	r30, r20
    10da:	f5 07       	cpc	r31, r21
    10dc:	20 f0       	brcs	.+8      	; 0x10e6 <__udivmodsi4_ep>
    10de:	a2 1b       	sub	r26, r18
    10e0:	b3 0b       	sbc	r27, r19
    10e2:	e4 0b       	sbc	r30, r20
    10e4:	f5 0b       	sbc	r31, r21

000010e6 <__udivmodsi4_ep>:
    10e6:	66 1f       	adc	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	1a 94       	dec	r1
    10f0:	69 f7       	brne	.-38     	; 0x10cc <__udivmodsi4_loop>
    10f2:	60 95       	com	r22
    10f4:	70 95       	com	r23
    10f6:	80 95       	com	r24
    10f8:	90 95       	com	r25
    10fa:	9b 01       	movw	r18, r22
    10fc:	ac 01       	movw	r20, r24
    10fe:	bd 01       	movw	r22, r26
    1100:	cf 01       	movw	r24, r30
    1102:	08 95       	ret

00001104 <_exit>:
    1104:	f8 94       	cli

00001106 <__stop_program>:
    1106:	ff cf       	rjmp	.-2      	; 0x1106 <__stop_program>

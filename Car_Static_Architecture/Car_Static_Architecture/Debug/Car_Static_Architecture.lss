
Car_Static_Architecture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000011aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  000011aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ec  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e74  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001337  00000000  00000000  00004368  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000056a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000812  00000000  00000000  00005b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c8e  00000000  00000000  00006346  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00007fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
      74:	0c 94 99 08 	jmp	0x1132	; 0x1132 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Car_SM_Init>:
 * Description--: Initiate the car state machine with state"stop_state",
 * -------------- And initiate steering and ultrasonic functions
*/


ERROR_STATUS Car_SM_Init(void){
      7c:	cf 93       	push	r28
	
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Steering_Init();
      7e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Steering_Init>
      82:	c8 2f       	mov	r28, r24
	
	state_error |= Us_Init();
      84:	0e 94 70 06 	call	0xce0	; 0xce0 <Us_Init>
	
	g_state=STOP_STATE ;
      88:	93 e0       	ldi	r25, 0x03	; 3
      8a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <g_state>
	
	return state_error ;
}
      8e:	8c 2b       	or	r24, r28
      90:	cf 91       	pop	r28
      92:	08 95       	ret

00000094 <Car_SM_Update>:
 * Description--: changes car state according to the ultrasonic input
 * -------------- And represents the motors output for each state
*/


ERROR_STATUS Car_SM_Update(void){
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	00 d0       	rcall	.+0      	; 0x9c <Car_SM_Update+0x8>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	
	uint16_t distance;
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Us_Trigger();
      a0:	0e 94 82 06 	call	0xd04	; 0xd04 <Us_Trigger>
      a4:	18 2f       	mov	r17, r24
	state_error |= Us_GetDistance(&distance);
      a6:	ce 01       	movw	r24, r28
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	0e 94 ac 06 	call	0xd58	; 0xd58 <Us_GetDistance>
      ae:	18 2b       	or	r17, r24
	
	
	
	switch(g_state){
      b0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <g_state>
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	81 f1       	breq	.+96     	; 0x118 <Car_SM_Update+0x84>
      b8:	c8 f0       	brcs	.+50     	; 0xec <Car_SM_Update+0x58>
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	09 f4       	brne	.+2      	; 0xc0 <Car_SM_Update+0x2c>
      be:	41 c0       	rjmp	.+130    	; 0x142 <Car_SM_Update+0xae>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	09 f0       	breq	.+2      	; 0xc6 <Car_SM_Update+0x32>
      c4:	55 c0       	rjmp	.+170    	; 0x170 <Car_SM_Update+0xdc>
		
		case STOP_STATE :
			if (distance<DISTANCE_BACKWARDING){
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	9a 81       	ldd	r25, Y+2	; 0x02
      ca:	84 31       	cpi	r24, 0x14	; 20
      cc:	91 05       	cpc	r25, r1
      ce:	20 f4       	brcc	.+8      	; 0xd8 <Car_SM_Update+0x44>
				
				g_state = BACKWARD_STATE ;
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      d6:	4d c0       	rjmp	.+154    	; 0x172 <Car_SM_Update+0xde>
			}
			else if ((distance <= DISTANCE_TURNNING) && ( distance >= DISTANCE_BACKWARDING)){
      d8:	44 97       	sbiw	r24, 0x14	; 20
      da:	45 97       	sbiw	r24, 0x15	; 21
      dc:	20 f4       	brcc	.+8      	; 0xe6 <Car_SM_Update+0x52>
				
				g_state =TURNING_STATE ;
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      e4:	46 c0       	rjmp	.+140    	; 0x172 <Car_SM_Update+0xde>
			}else
				g_state = FORWARD_STATE ;
      e6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
      ea:	43 c0       	rjmp	.+134    	; 0x172 <Car_SM_Update+0xde>
			break;
			
		case FORWARD_STATE :
		
			if (distance<DISTANCE_BACKWARDING){
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	9a 81       	ldd	r25, Y+2	; 0x02
      f0:	84 31       	cpi	r24, 0x14	; 20
      f2:	91 05       	cpc	r25, r1
      f4:	20 f4       	brcc	.+8      	; 0xfe <Car_SM_Update+0x6a>
				g_state = BACKWARD_STATE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
      fc:	3a c0       	rjmp	.+116    	; 0x172 <Car_SM_Update+0xde>
			}else if ( distance<=DISTANCE_TURNNING && distance >= DISTANCE_BACKWARDING )
      fe:	44 97       	sbiw	r24, 0x14	; 20
     100:	45 97       	sbiw	r24, 0x15	; 21
     102:	20 f4       	brcc	.+8      	; 0x10c <Car_SM_Update+0x78>
			{
				g_state=TURNING_STATE;
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     10a:	33 c0       	rjmp	.+102    	; 0x172 <Car_SM_Update+0xde>
			}
			else
				state_error |= Steering_SteerCar(CAR_FORWARD,CAR_SPEED);
     10c:	6e e1       	ldi	r22, 0x1E	; 30
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 0a 04 	call	0x814	; 0x814 <Steering_SteerCar>
     114:	18 2b       	or	r17, r24
     116:	2d c0       	rjmp	.+90     	; 0x172 <Car_SM_Update+0xde>
			break;
				
		case BACKWARD_STATE:
		
			if (distance<DISTANCE_BACKWARDING){
     118:	89 81       	ldd	r24, Y+1	; 0x01
     11a:	9a 81       	ldd	r25, Y+2	; 0x02
     11c:	84 31       	cpi	r24, 0x14	; 20
     11e:	91 05       	cpc	r25, r1
     120:	30 f4       	brcc	.+12     	; 0x12e <Car_SM_Update+0x9a>
				state_error |= Steering_SteerCar(CAR_BACKWARD,CAR_SPEED);
     122:	6e e1       	ldi	r22, 0x1E	; 30
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	0e 94 0a 04 	call	0x814	; 0x814 <Steering_SteerCar>
     12a:	18 2b       	or	r17, r24
     12c:	22 c0       	rjmp	.+68     	; 0x172 <Car_SM_Update+0xde>
			}else if (distance <= DISTANCE_TURNNING && distance>=DISTANCE_BACKWARDING )
     12e:	44 97       	sbiw	r24, 0x14	; 20
     130:	45 97       	sbiw	r24, 0x15	; 21
     132:	20 f4       	brcc	.+8      	; 0x13c <Car_SM_Update+0xa8>
			{
				g_state=TURNING_STATE;
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     13a:	1b c0       	rjmp	.+54     	; 0x172 <Car_SM_Update+0xde>
			}
			 else{
				g_state = FORWARD_STATE ;
     13c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
     140:	18 c0       	rjmp	.+48     	; 0x172 <Car_SM_Update+0xde>
			}
			break;
			
		case TURNING_STATE :
		
			if (distance <= DISTANCE_TURNNING && distance >= DISTANCE_BACKWARDING )
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	9a 81       	ldd	r25, Y+2	; 0x02
     146:	9c 01       	movw	r18, r24
     148:	24 51       	subi	r18, 0x14	; 20
     14a:	31 09       	sbc	r19, r1
     14c:	25 31       	cpi	r18, 0x15	; 21
     14e:	31 05       	cpc	r19, r1
     150:	30 f4       	brcc	.+12     	; 0x15e <Car_SM_Update+0xca>
			{
				state_error |= Steering_SteerCar(CAR_LEFT,CAR_SPEED);
     152:	6e e1       	ldi	r22, 0x1E	; 30
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	0e 94 0a 04 	call	0x814	; 0x814 <Steering_SteerCar>
     15a:	18 2b       	or	r17, r24
     15c:	0a c0       	rjmp	.+20     	; 0x172 <Car_SM_Update+0xde>
			}else if (distance <DISTANCE_BACKWARDING){
     15e:	44 97       	sbiw	r24, 0x14	; 20
     160:	20 f4       	brcc	.+8      	; 0x16a <Car_SM_Update+0xd6>
				g_state = BACKWARD_STATE ;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <g_state>
     168:	04 c0       	rjmp	.+8      	; 0x172 <Car_SM_Update+0xde>
			}
			else
			g_state = FORWARD_STATE ;
     16a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <g_state>
     16e:	01 c0       	rjmp	.+2      	; 0x172 <Car_SM_Update+0xde>
			
			break;
			
		default: 
		
		state_error |= E_NOK ;
     170:	11 60       	ori	r17, 0x01	; 1
	}
	
	
	return state_error ;
	
}
     172:	81 2f       	mov	r24, r17
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	08 95       	ret

00000180 <DIO_init>:
#include "DIO.h"
#include "std_types.h"



ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info){
     180:	fc 01       	movw	r30, r24
	
	 //uint8_t temp ;
	 if (DIO_info->dir == HIGH )
     182:	82 81       	ldd	r24, Z+2	; 0x02
     184:	8f 3f       	cpi	r24, 0xFF	; 255
     186:	09 f5       	brne	.+66     	; 0x1ca <DIO_init+0x4a>
	{
		switch(DIO_info->GPIO){
     188:	80 81       	ld	r24, Z
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	61 f0       	breq	.+24     	; 0x1a6 <DIO_init+0x26>
     18e:	28 f0       	brcs	.+10     	; 0x19a <DIO_init+0x1a>
     190:	82 30       	cpi	r24, 0x02	; 2
     192:	79 f0       	breq	.+30     	; 0x1b2 <DIO_init+0x32>
     194:	83 30       	cpi	r24, 0x03	; 3
     196:	99 f0       	breq	.+38     	; 0x1be <DIO_init+0x3e>
     198:	36 c0       	rjmp	.+108    	; 0x206 <DIO_init+0x86>
			
			case GPIOA :
			
			PORTA_DIR = PORTA_DIR | DIO_info->pins ;
     19a:	9a b3       	in	r25, 0x1a	; 26
     19c:	81 81       	ldd	r24, Z+1	; 0x01
     19e:	89 2b       	or	r24, r25
     1a0:	8a bb       	out	0x1a, r24	; 26
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1a2:	80 e0       	ldi	r24, 0x00	; 0
		switch(DIO_info->GPIO){
			
			case GPIOA :
			
			PORTA_DIR = PORTA_DIR | DIO_info->pins ;
			break;
     1a4:	08 95       	ret
			
			case GPIOB :
			
			PORTB_DIR = PORTB_DIR | DIO_info->pins ;
     1a6:	97 b3       	in	r25, 0x17	; 23
     1a8:	81 81       	ldd	r24, Z+1	; 0x01
     1aa:	89 2b       	or	r24, r25
     1ac:	87 bb       	out	0x17, r24	; 23
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1ae:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOB :
			
			PORTB_DIR = PORTB_DIR | DIO_info->pins ;
			break;
     1b0:	08 95       	ret
			
			case GPIOC :
			
			PORTC_DIR = PORTC_DIR | DIO_info->pins ;
     1b2:	94 b3       	in	r25, 0x14	; 20
     1b4:	81 81       	ldd	r24, Z+1	; 0x01
     1b6:	89 2b       	or	r24, r25
     1b8:	84 bb       	out	0x14, r24	; 20
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1ba:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOC :
			
			PORTC_DIR = PORTC_DIR | DIO_info->pins ;
			break;
     1bc:	08 95       	ret

			case GPIOD :
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
     1be:	91 b3       	in	r25, 0x11	; 17
     1c0:	81 81       	ldd	r24, Z+1	; 0x01
     1c2:	89 2b       	or	r24, r25
     1c4:	81 bb       	out	0x11, r24	; 17
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1c6:	80 e0       	ldi	r24, 0x00	; 0
			break;

			case GPIOD :
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
			break;
     1c8:	08 95       	ret
			
			default :
			return E_NOK ;
		}
		
	} else if (DIO_info->dir == LOW)
     1ca:	81 11       	cpse	r24, r1
     1cc:	1e c0       	rjmp	.+60     	; 0x20a <DIO_init+0x8a>
	{
		switch(DIO_info->GPIO){
     1ce:	80 81       	ld	r24, Z
     1d0:	82 30       	cpi	r24, 0x02	; 2
     1d2:	59 f0       	breq	.+22     	; 0x1ea <DIO_init+0x6a>
     1d4:	83 30       	cpi	r24, 0x03	; 3
     1d6:	81 f0       	breq	.+32     	; 0x1f8 <DIO_init+0x78>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	c9 f4       	brne	.+50     	; 0x20e <DIO_init+0x8e>
		PORTA_DIR = PORTA_DIR & ~(DIO_info->pins) ;
		break;
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(DIO_info->pins) ;
     1dc:	97 b3       	in	r25, 0x17	; 23
     1de:	81 81       	ldd	r24, Z+1	; 0x01
     1e0:	80 95       	com	r24
     1e2:	89 23       	and	r24, r25
     1e4:	87 bb       	out	0x17, r24	; 23
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOB :
		
		PORTB_DIR = PORTB_DIR & ~(DIO_info->pins) ;
		break;
     1e8:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(DIO_info->pins) ;
     1ea:	94 b3       	in	r25, 0x14	; 20
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	80 95       	com	r24
     1f0:	89 23       	and	r24, r25
     1f2:	84 bb       	out	0x14, r24	; 20
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOC :
		
		PORTC_DIR = PORTC_DIR & ~(DIO_info->pins) ;
		break;
     1f6:	08 95       	ret

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
     1f8:	91 b3       	in	r25, 0x11	; 17
     1fa:	81 81       	ldd	r24, Z+1	; 0x01
     1fc:	80 95       	com	r24
     1fe:	89 23       	and	r24, r25
     200:	81 bb       	out	0x11, r24	; 17
		}
		
	}else
		return E_NOK;
	
	return E_OK ;
     202:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case GPIOD :
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
		break;	
     204:	08 95       	ret
			
			PORTD_DIR = PORTD_DIR | DIO_info->pins ;
			break;
			
			default :
			return E_NOK ;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	08 95       	ret
		return E_NOK ;	
			
		}
		
	}else
		return E_NOK;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	08 95       	ret
		
		PORTD_DIR = PORTD_DIR & ~(DIO_info->pins) ;
		break;	
		
		default :
		return E_NOK ;	
     20e:	81 e0       	ldi	r24, 0x01	; 1
	
	return E_OK ;
	
	 
	
}
     210:	08 95       	ret

00000212 <DIO_Write>:


ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value){
	uint8_t temp;
	if (value == HIGH ){
     212:	4f 3f       	cpi	r20, 0xFF	; 255
     214:	f1 f4       	brne	.+60     	; 0x252 <DIO_Write+0x40>
		switch(GPIO)
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	59 f0       	breq	.+22     	; 0x230 <DIO_Write+0x1e>
     21a:	28 f0       	brcs	.+10     	; 0x226 <DIO_Write+0x14>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	79 f0       	breq	.+30     	; 0x23e <DIO_Write+0x2c>
     220:	83 30       	cpi	r24, 0x03	; 3
     222:	91 f0       	breq	.+36     	; 0x248 <DIO_Write+0x36>
     224:	38 c0       	rjmp	.+112    	; 0x296 <DIO_Write+0x84>
		{
			case GPIOA :
			
			PORTA_DATA  |=  pins ;
     226:	8b b3       	in	r24, 0x1b	; 27
     228:	68 2b       	or	r22, r24
     22a:	6b bb       	out	0x1b, r22	; 27
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     22c:	80 e0       	ldi	r24, 0x00	; 0
		switch(GPIO)
		{
			case GPIOA :
			
			PORTA_DATA  |=  pins ;
			break;
     22e:	08 95       	ret
			
			case GPIOB :
			PORTB_DATA |=  (PORTB_DATA  & ~(pins) )| (value& pins) ;
     230:	98 b3       	in	r25, 0x18	; 24
     232:	88 b3       	in	r24, 0x18	; 24
     234:	69 2b       	or	r22, r25
     236:	68 2b       	or	r22, r24
     238:	68 bb       	out	0x18, r22	; 24
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     23a:	80 e0       	ldi	r24, 0x00	; 0
			
			case GPIOB :
			PORTB_DATA |=  (PORTB_DATA  & ~(pins) )| (value& pins) ;
			 
			 //PORTB_DATA =value;
			break;
     23c:	08 95       	ret
			
			case GPIOC :
			
			PORTC_DATA |= pins ;
     23e:	85 b3       	in	r24, 0x15	; 21
     240:	68 2b       	or	r22, r24
     242:	65 bb       	out	0x15, r22	; 21
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     244:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case GPIOC :
			
			PORTC_DATA |= pins ;
			break;
     246:	08 95       	ret

			case GPIOD :
			
			PORTD_DATA |=  pins ;
     248:	82 b3       	in	r24, 0x12	; 18
     24a:	68 2b       	or	r22, r24
     24c:	62 bb       	out	0x12, r22	; 18
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     24e:	80 e0       	ldi	r24, 0x00	; 0
			break;

			case GPIOD :
			
			PORTD_DATA |=  pins ;
			break;
     250:	08 95       	ret
			
			 default :
			return E_NOK ;

		}
		}else if(value == LOW) {
     252:	41 11       	cpse	r20, r1
     254:	22 c0       	rjmp	.+68     	; 0x29a <DIO_Write+0x88>
			
		switch(GPIO){	
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	61 f0       	breq	.+24     	; 0x272 <DIO_Write+0x60>
     25a:	28 f0       	brcs	.+10     	; 0x266 <DIO_Write+0x54>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	79 f0       	breq	.+30     	; 0x27e <DIO_Write+0x6c>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	99 f0       	breq	.+38     	; 0x28a <DIO_Write+0x78>
     264:	1c c0       	rjmp	.+56     	; 0x29e <DIO_Write+0x8c>
		
		case GPIOA :
		
		PORTA_DATA &= ~(pins) ;
     266:	8b b3       	in	r24, 0x1b	; 27
     268:	60 95       	com	r22
     26a:	68 23       	and	r22, r24
     26c:	6b bb       	out	0x1b, r22	; 27
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     26e:	80 e0       	ldi	r24, 0x00	; 0
		switch(GPIO){	
		
		case GPIOA :
		
		PORTA_DATA &= ~(pins) ;
		break;
     270:	08 95       	ret
		
		case GPIOB :
		
		PORTB_DATA &=  ~(pins) ;
     272:	88 b3       	in	r24, 0x18	; 24
     274:	60 95       	com	r22
     276:	68 23       	and	r22, r24
     278:	68 bb       	out	0x18, r22	; 24
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     27a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOB :
		
		PORTB_DATA &=  ~(pins) ;
		break;
     27c:	08 95       	ret
		
		case GPIOC :
		
		PORTC_DATA &= ~(pins) ;
     27e:	85 b3       	in	r24, 0x15	; 21
     280:	60 95       	com	r22
     282:	68 23       	and	r22, r24
     284:	65 bb       	out	0x15, r22	; 21
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     286:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case GPIOC :
		
		PORTC_DATA &= ~(pins) ;
		break;
     288:	08 95       	ret

		case GPIOD :
		
		PORTD_DATA &= ~(pins) ;
     28a:	82 b3       	in	r24, 0x12	; 18
     28c:	60 95       	com	r22
     28e:	68 23       	and	r22, r24
     290:	62 bb       	out	0x12, r22	; 18
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
     292:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case GPIOD :
		
		PORTD_DATA &= ~(pins) ;
		break;
     294:	08 95       	ret
			
			PORTD_DATA |=  pins ;
			break;
			
			 default :
			return E_NOK ;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	08 95       	ret
		 default :
		return E_NOK ;
		
			} 
		}else 
		return E_NOK ;
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	08 95       	ret
		
		PORTD_DATA &= ~(pins) ;
		break;
		
		 default :
		return E_NOK ;
     29e:	81 e0       	ldi	r24, 0x01	; 1
		
			} 
		}else 
		return E_NOK ;
	return E_OK ;
}
     2a0:	08 95       	ret

000002a2 <Icu_Init>:
 *				  - E_NOK : not initialized successfully				  *
 * Description  : Initializes the ICU by initializing the timer			  *
 * 				                                     					  *
 **************************************************************************/

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg){
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <Icu_Init+0x6>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <Icu_Init+0x8>
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <Icu_Init+0xa>
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
		uint8_t a_u8_error_state = E_OK ;

	
		Timer_cfg_s Timer_cfg ;
		
		if (Icu_Cfg == NULL)
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	b1 f0       	breq	.+44     	; 0x2e0 <Icu_Init+0x3e>
		{
			a_u8_error_state |= E_NOK;
		}else{
			
			g_interruptCH_No = Icu_Cfg->ICU_Ch_No ;
     2b4:	fc 01       	movw	r30, r24
     2b6:	20 81       	ld	r18, Z
     2b8:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <g_interruptCH_No>

			
			switch(Icu_Cfg->ICU_Ch_Timer){
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	88 23       	and	r24, r24
     2c0:	21 f0       	breq	.+8      	; 0x2ca <Icu_Init+0x28>
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	78 f0       	brcs	.+30     	; 0x2e4 <Icu_Init+0x42>
				case ICU_TIMER_CH1 :
				break;
				case ICU_TIMER_CH2 :
				break;
				default:
				a_u8_error_state |= E_NOK ;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e c0       	rjmp	.+28     	; 0x2e6 <Icu_Init+0x44>

			
			switch(Icu_Cfg->ICU_Ch_Timer){
				case ICU_TIMER_CH0 :
				
				Timer_cfg.Timer_CH_NO = TIMER_CH0 ;
     2ca:	19 82       	std	Y+1, r1	; 0x01
				Timer_cfg.Timer_Mode = TIMER_MODE ;
     2cc:	1a 82       	std	Y+2, r1	; 0x02
				Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
     2ce:	1b 82       	std	Y+3, r1	; 0x03
				Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_1024 ;
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	8c 83       	std	Y+4, r24	; 0x04
				
				Timer_Init(&Timer_cfg);
     2d4:	ce 01       	movw	r24, r28
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	0e 94 5f 04 	call	0x8be	; 0x8be <Timer_Init>
 * 				                                     					  *
 **************************************************************************/

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg){
	
		uint8_t a_u8_error_state = E_OK ;
     2dc:	80 e0       	ldi	r24, 0x00	; 0
				Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
				Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_1024 ;
				
				Timer_Init(&Timer_cfg);
				
				break;
     2de:	03 c0       	rjmp	.+6      	; 0x2e6 <Icu_Init+0x44>
	
		Timer_cfg_s Timer_cfg ;
		
		if (Icu_Cfg == NULL)
		{
			a_u8_error_state |= E_NOK;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <Icu_Init+0x44>
 * 				                                     					  *
 **************************************************************************/

ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg){
	
		uint8_t a_u8_error_state = E_OK ;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		
		
		return a_u8_error_state  ;
}
     2e6:	26 96       	adiw	r28, 0x06	; 6
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <Icu_ReadTime>:
 * 				  - E_OK : successful									   *
 *				  - E_NOK : not successful								   *
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time){
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	00 d0       	rcall	.+0      	; 0x306 <Icu_ReadTime+0xe>
     306:	00 d0       	rcall	.+0      	; 0x308 <Icu_ReadTime+0x10>
     308:	1f 92       	push	r1
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	f6 2e       	mov	r15, r22
     310:	8a 01       	movw	r16, r20
	
	uint8_t a_u8_error_state = E_OK ;

	uint16_t no_of_ticks = 0 ;
     312:	1a 82       	std	Y+2, r1	; 0x02
     314:	19 82       	std	Y+1, r1	; 0x01
	uint16_t timerOfTicks_Us  ;
	
	g_interruptEdge = SwICU_EdgeRisiging;
     316:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <g_interruptEdge>
	g_timerCH = Icu_Channel ;
     31a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_timerCH>
	switch(Icu_Channel){
     31e:	88 23       	and	r24, r24
     320:	29 f0       	breq	.+10     	; 0x32c <Icu_ReadTime+0x34>
     322:	83 30       	cpi	r24, 0x03	; 3
     324:	b0 f1       	brcs	.+108    	; 0x392 <Icu_ReadTime+0x9a>
			case ICU_TIMER_CH1 :
			break;
			case ICU_TIMER_CH2 :
			break;
			default:
			a_u8_error_state |= E_NOK ;
     326:	ff 24       	eor	r15, r15
     328:	f3 94       	inc	r15
     32a:	34 c0       	rjmp	.+104    	; 0x394 <Icu_ReadTime+0x9c>

static ERROR_STATUS SetExternal_INT_Edge( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){
	uint8_t a_u8_error_state = E_OK ;
	 
	DIO_Cfg_s dioCfg_INT2;
	switch(interruptCH_No){
     32c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <g_interruptCH_No>
     330:	82 30       	cpi	r24, 0x02	; 2
     332:	e8 f0       	brcs	.+58     	; 0x36e <Icu_ReadTime+0x76>
     334:	82 30       	cpi	r24, 0x02	; 2
     336:	11 f0       	breq	.+4      	; 0x33c <Icu_ReadTime+0x44>
				CLEAR_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
			else
				a_u8_error_state |= E_NOK ;
			break;
		default:
			a_u8_error_state |= E_NOK ;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	1a c0       	rjmp	.+52     	; 0x370 <Icu_ReadTime+0x78>
		case ICU_CH1:
		break;
		case ICU_CH2:
			
			
			dioCfg_INT2.GPIO = GPIOB;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	8b 83       	std	Y+3, r24	; 0x03
			dioCfg_INT2.pins = BIT2;
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	8c 83       	std	Y+4, r24	; 0x04
			dioCfg_INT2.dir =INPUT;
     344:	1d 82       	std	Y+5, r1	; 0x05
			
			a_u8_error_state |= DIO_init(&dioCfg_INT2);
     346:	ce 01       	movw	r24, r28
     348:	03 96       	adiw	r24, 0x03	; 3
     34a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_init>
			
			if(SwICU_Edge== ICU_RISE_TO_FALL){
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	f9 12       	cpse	r15, r25
     352:	04 c0       	rjmp	.+8      	; 0x35c <Icu_ReadTime+0x64>
				
				SET_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
     354:	94 b7       	in	r25, 0x34	; 52
     356:	90 64       	ori	r25, 0x40	; 64
     358:	94 bf       	out	0x34, r25	; 52
     35a:	0a c0       	rjmp	.+20     	; 0x370 <Icu_ReadTime+0x78>
				}
			else if(SwICU_Edge== ICU_FALE_TO_RISE)
     35c:	e2 e0       	ldi	r30, 0x02	; 2
     35e:	fe 12       	cpse	r15, r30
     360:	04 c0       	rjmp	.+8      	; 0x36a <Icu_ReadTime+0x72>
				CLEAR_BIT(INT2_EDGE_GPIO , INT2_EDGE_BIT);
     362:	94 b7       	in	r25, 0x34	; 52
     364:	9f 7b       	andi	r25, 0xBF	; 191
     366:	94 bf       	out	0x34, r25	; 52
     368:	03 c0       	rjmp	.+6      	; 0x370 <Icu_ReadTime+0x78>
			else
				a_u8_error_state |= E_NOK ;
     36a:	81 60       	ori	r24, 0x01	; 1
     36c:	01 c0       	rjmp	.+2      	; 0x370 <Icu_ReadTime+0x78>
 * 																		  *
 **************************************************************************/


static ERROR_STATUS SetExternal_INT_Edge( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){
	uint8_t a_u8_error_state = E_OK ;
     36e:	80 e0       	ldi	r24, 0x00	; 0
static ERROR_STATUS SetExternal_INT_enable( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){

	uint8_t a_u8_error_state = E_OK ;

	
		switch(interruptCH_No){
     370:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <g_interruptCH_No>
     374:	92 30       	cpi	r25, 0x02	; 2
     376:	48 f0       	brcs	.+18     	; 0x38a <Icu_ReadTime+0x92>
     378:	92 30       	cpi	r25, 0x02	; 2
     37a:	11 f0       	breq	.+4      	; 0x380 <Icu_ReadTime+0x88>
			break;
			case ICU_CH2:
				INT2_EN_GPIO |= 1 << INT2_EN_BIT ;
			break;
			default:
			a_u8_error_state |= E_NOK ;
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	06 c0       	rjmp	.+12     	; 0x38c <Icu_ReadTime+0x94>
			case ICU_CH0 :
			break;
			case ICU_CH1:
			break;
			case ICU_CH2:
				INT2_EN_GPIO |= 1 << INT2_EN_BIT ;
     380:	9b b7       	in	r25, 0x3b	; 59
     382:	90 62       	ori	r25, 0x20	; 32
     384:	9b bf       	out	0x3b, r25	; 59
 **************************************************************************/


static ERROR_STATUS SetExternal_INT_enable( uint8_t SwICU_Edge ,uint8_t interruptCH_No ){

	uint8_t a_u8_error_state = E_OK ;
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	01 c0       	rjmp	.+2      	; 0x38c <Icu_ReadTime+0x94>
     38a:	90 e0       	ldi	r25, 0x00	; 0
	g_timerCH = Icu_Channel ;
	switch(Icu_Channel){
			case ICU_TIMER_CH0:
			
			a_u8_error_state |= SetExternal_INT_Edge(Icu_EdgeToEdge,g_interruptCH_No);
			a_u8_error_state |= SetExternal_INT_enable(Icu_EdgeToEdge,g_interruptCH_No) ;
     38c:	f9 2e       	mov	r15, r25
     38e:	f8 2a       	or	r15, r24
			
			break;
     390:	01 c0       	rjmp	.+2      	; 0x394 <Icu_ReadTime+0x9c>
 * Description	: calculates the time between 2 edges				       *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time){
	
	uint8_t a_u8_error_state = E_OK ;
     392:	f1 2c       	mov	r15, r1
			break;
			default:
			a_u8_error_state |= E_NOK ;
	}
	
	while(!g_fallingEdgeFlag) ;
     394:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <g_fallingEdgeFlag>
     398:	99 23       	and	r25, r25
     39a:	e1 f3       	breq	.-8      	; 0x394 <Icu_ReadTime+0x9c>
	a_u8_error_state |= Timer_GetValue(g_timerCH ,&no_of_ticks) ;
     39c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_timerCH>
     3a0:	be 01       	movw	r22, r28
     3a2:	6f 5f       	subi	r22, 0xFF	; 255
     3a4:	7f 4f       	sbci	r23, 0xFF	; 255
     3a6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Timer_GetValue>
     3aa:	e8 2e       	mov	r14, r24
	a_u8_error_state |= Timer_GetStatus(TIMER_CH0 ,&g_ovf_flag );
     3ac:	60 e6       	ldi	r22, 0x60	; 96
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <Timer_GetStatus>
     3b6:	8e 29       	or	r24, r14
     3b8:	8f 29       	or	r24, r15
	if (g_ovf_flag == TRUE)
     3ba:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3be:	91 30       	cpi	r25, 0x01	; 1
     3c0:	21 f4       	brne	.+8      	; 0x3ca <Icu_ReadTime+0xd2>
	{
		no_of_ticks=MAX_NO_TICKS;
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	3a 83       	std	Y+2, r19	; 0x02
     3c8:	29 83       	std	Y+1, r18	; 0x01
	}
	g_ovf_flag = FALSE ;
     3ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	timerOfTicks_Us = no_of_ticks * tickTimeUs ;
	*Icu_Time = timerOfTicks_Us ;
     3ce:	49 81       	ldd	r20, Y+1	; 0x01
     3d0:	5a 81       	ldd	r21, Y+2	; 0x02
     3d2:	00 24       	eor	r0, r0
     3d4:	56 95       	lsr	r21
     3d6:	47 95       	ror	r20
     3d8:	07 94       	ror	r0
     3da:	56 95       	lsr	r21
     3dc:	47 95       	ror	r20
     3de:	07 94       	ror	r0
     3e0:	54 2f       	mov	r21, r20
     3e2:	40 2d       	mov	r20, r0
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	f8 01       	movw	r30, r16
     3ea:	40 83       	st	Z, r20
     3ec:	51 83       	std	Z+1, r21	; 0x01
     3ee:	62 83       	std	Z+2, r22	; 0x02
     3f0:	73 83       	std	Z+3, r23	; 0x03
	return a_u8_error_state ;
}
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	08 95       	ret

0000040a <__vector_3>:




ISR(INT2_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
	
		switch (g_interruptEdge){
     42c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <g_interruptEdge>
     430:	88 23       	and	r24, r24
     432:	19 f0       	breq	.+6      	; 0x43a <__vector_3+0x30>
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	a9 f0       	breq	.+42     	; 0x462 <__vector_3+0x58>
     438:	27 c0       	rjmp	.+78     	; 0x488 <__vector_3+0x7e>
///////////////////////////////rising//////////////////////////////////////////////////////////		
			case SwICU_EdgeRisiging :
			DIO_Write(GPIOA,BIT1,HIGH);
     43a:	4f ef       	ldi	r20, 0xFF	; 255
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
			
			switch(g_timerCH){
     444:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_timerCH>
     448:	81 11       	cpse	r24, r1
     44a:	1e c0       	rjmp	.+60     	; 0x488 <__vector_3+0x7e>
				case ICU_TIMER_CH0 :
				
				Timer_Start(TIMER_CH0,MAX_NO_TICKS);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	0e 94 41 05 	call	0xa82	; 0xa82 <Timer_Start>
				
				//update the control to start at falling edge
				MCUCSR &= ~(1<<6) ;
     454:	84 b7       	in	r24, 0x34	; 52
     456:	8f 7b       	andi	r24, 0xBF	; 191
     458:	84 bf       	out	0x34, r24	; 52
				
				g_interruptEdge = SwICU_EdgeFalling;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_interruptEdge>
				break;
     460:	13 c0       	rjmp	.+38     	; 0x488 <__vector_3+0x7e>
			
			break;
////////////////////////////////falling/////////////////////////////////////////////////////
			
			case SwICU_EdgeFalling :
			DIO_Write(GPIOA,BIT1,LOW);
     462:	40 e0       	ldi	r20, 0x00	; 0
     464:	62 e0       	ldi	r22, 0x02	; 2
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
			switch(g_timerCH){
     46c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_timerCH>
     470:	81 11       	cpse	r24, r1
     472:	0a c0       	rjmp	.+20     	; 0x488 <__vector_3+0x7e>
				
				case ICU_TIMER_CH0 :
				
				Timer_Stop(TIMER_CH0);
     474:	0e 94 ba 04 	call	0x974	; 0x974 <Timer_Stop>
				
				MCUCSR |= 1<<6 ;
     478:	84 b7       	in	r24, 0x34	; 52
     47a:	80 64       	ori	r24, 0x40	; 64
     47c:	84 bf       	out	0x34, r24	; 52
				
				g_interruptEdge = SwICU_EdgeRisiging;
     47e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <g_interruptEdge>
				g_fallingEdgeFlag = TRUE ;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_fallingEdgeFlag>
				break;
		}
	break;
}
     488:	ff 91       	pop	r31
     48a:	ef 91       	pop	r30
     48c:	bf 91       	pop	r27
     48e:	af 91       	pop	r26
     490:	9f 91       	pop	r25
     492:	8f 91       	pop	r24
     494:	7f 91       	pop	r23
     496:	6f 91       	pop	r22
     498:	5f 91       	pop	r21
     49a:	4f 91       	pop	r20
     49c:	3f 91       	pop	r19
     49e:	2f 91       	pop	r18
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <main>:
#include "TimerDelay.h"
#include "Steering.h"
#include "car_sm.h"

int main(void)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <main+0x6>
     4b0:	1f 92       	push	r1
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
Pwm_Start(PWM_CH1A,50,100) ;
Pwm_Start(PWM_CH1B,50,100) ;*/



timerDelayMs(1000);
     4b6:	88 ee       	ldi	r24, 0xE8	; 232
     4b8:	93 e0       	ldi	r25, 0x03	; 3
     4ba:	0e 94 2d 06 	call	0xc5a	; 0xc5a <timerDelayMs>

sei();
     4be:	78 94       	sei

//Icu_cfg_s icuCfg;
	DIO_Cfg_s dioCfgrem;
	
	dioCfgrem.GPIO = GPIOB;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	89 83       	std	Y+1, r24	; 0x01
	dioCfgrem.pins = BIT7|BIT6|BIT5|BIT4;
     4c4:	80 ef       	ldi	r24, 0xF0	; 240
     4c6:	8a 83       	std	Y+2, r24	; 0x02
	dioCfgrem.dir =OUTPUT;
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_init(&dioCfgrem);
     4cc:	ce 01       	movw	r24, r28
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_init>
	//uint16_t distance;
	/*
	Icu_ReadTime(ICU_TIMER_CH0,ICU_RISE_TO_FALL,&time_);*/
	//Us_Init();
	
	Car_SM_Init();
     4d4:	0e 94 3e 00 	call	0x7c	; 0x7c <Car_SM_Init>
	
    while(1)
    {
		Car_SM_Update();
     4d8:	0e 94 4a 00 	call	0x94	; 0x94 <Car_SM_Update>
     4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <main+0x2e>

000004de <Motor_Init>:
 * Return		: ERROR_STATUS
 * Description	: Initialize (Enable, IN1, IN2) pins as digital outputs.
 */


 ERROR_STATUS Motor_Init(uint8_t Motor_Number){
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	27 97       	sbiw	r28, 0x07	; 7
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
	 
	 DIO_Cfg_s dioCfg_M;
	  Pwm_Cfg_s pwm_cfgA ;
	 Pwm_Cfg_s pwm_cfgB ;
	 
	 	switch (Motor_Number)
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	19 f0       	breq	.+6      	; 0x4fe <Motor_Init+0x20>
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	e1 f0       	breq	.+56     	; 0x534 <Motor_Init+0x56>
     4fc:	36 c0       	rjmp	.+108    	; 0x56a <Motor_Init+0x8c>
	 	{
		 	case MOTOR_1:
			
			 pwm_cfgA.Channel = PWM_CH1A ;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	8c 83       	std	Y+4, r24	; 0x04
			 pwm_cfgA.Prescaler = PWM_PRESCALER_1024 ;
     502:	86 e0       	ldi	r24, 0x06	; 6
     504:	8d 83       	std	Y+5, r24	; 0x05
			 a_u8_error_state |= Pwm_Init(&pwm_cfgA);
     506:	ce 01       	movw	r24, r28
     508:	04 96       	adiw	r24, 0x04	; 4
     50a:	0e 94 48 03 	call	0x690	; 0x690 <Pwm_Init>
     50e:	18 2f       	mov	r17, r24
			 dioCfg_M.GPIO=MOTOR_OUT_1A_GPIO;
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	89 83       	std	Y+1, r24	; 0x01
			 dioCfg_M.pins=MOTOR_OUT_1A_BIT|MOTOR_OUT_1B_BIT|MOTOR_EN_1_BIT;
     514:	8c e1       	ldi	r24, 0x1C	; 28
     516:	8a 83       	std	Y+2, r24	; 0x02
			 dioCfg_M.dir=OUTPUT;
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	8b 83       	std	Y+3, r24	; 0x03
			 
			 
		 	 a_u8_error_state |=  DIO_init (&dioCfg_M);
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_init>
     524:	18 2b       	or	r17, r24

		 	 a_u8_error_state |= DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	6a 81       	ldd	r22, Y+2	; 0x02
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     530:	81 2b       	or	r24, r17

		 	
		 	break;
     532:	1c c0       	rjmp	.+56     	; 0x56c <Motor_Init+0x8e>
		 	
		 	case MOTOR_2:
			 
			 pwm_cfgB.Channel = PWM_CH1B ;
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	8e 83       	std	Y+6, r24	; 0x06
			 pwm_cfgB.Prescaler = PWM_PRESCALER_1024 ;
     538:	86 e0       	ldi	r24, 0x06	; 6
     53a:	8f 83       	std	Y+7, r24	; 0x07
			 a_u8_error_state |= Pwm_Init(&pwm_cfgB);
     53c:	ce 01       	movw	r24, r28
     53e:	06 96       	adiw	r24, 0x06	; 6
     540:	0e 94 48 03 	call	0x690	; 0x690 <Pwm_Init>
     544:	18 2f       	mov	r17, r24
			 dioCfg_M.GPIO=MOTOR_OUT_2A_GPIO;
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	89 83       	std	Y+1, r24	; 0x01
			 dioCfg_M.pins=MOTOR_OUT_2A_BIT|MOTOR_OUT_2B_BIT|MOTOR_EN_2_BIT;
     54a:	80 ee       	ldi	r24, 0xE0	; 224
     54c:	8a 83       	std	Y+2, r24	; 0x02
			 dioCfg_M.dir=OUTPUT;
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	8b 83       	std	Y+3, r24	; 0x03
			 
			 
			 a_u8_error_state |= DIO_init (&dioCfg_M);
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_init>
     55a:	18 2b       	or	r17, r24

			 a_u8_error_state |= DIO_Write (dioCfg_M.GPIO, dioCfg_M.pins , LOW);
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	6a 81       	ldd	r22, Y+2	; 0x02
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     566:	81 2b       	or	r24, r17

			 break;
     568:	01 c0       	rjmp	.+2      	; 0x56c <Motor_Init+0x8e>

			 default:
			 a_u8_error_state |=  E_NOK ;
     56a:	81 e0       	ldi	r24, 0x01	; 1
			 break;
	 	}
	 return a_u8_error_state  ;
 }
     56c:	27 96       	adiw	r28, 0x07	; 7
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	08 95       	ret

00000580 <Motor_Direction>:
 * return 	 : ERROR_STATUS
 * Description: Controls the motor direction from getting the motor number and the direction.
*/


ERROR_STATUS Motor_Direction(uint8_t Motor_Number, uint8_t Motor_Direction){
     580:	cf 93       	push	r28
	
		 uint8_t a_u8_error_state = E_OK ;
	
		switch (Motor_Number)
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	19 f0       	breq	.+6      	; 0x58c <Motor_Direction+0xc>
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	71 f1       	breq	.+92     	; 0x5e6 <Motor_Direction+0x66>
     58a:	5a c0       	rjmp	.+180    	; 0x640 <Motor_Direction+0xc0>
		{
			//////////motor1///////////
			case MOTOR_1:
			switch (Motor_Direction)
     58c:	61 30       	cpi	r22, 0x01	; 1
     58e:	21 f0       	breq	.+8      	; 0x598 <Motor_Direction+0x18>
     590:	e8 f0       	brcs	.+58     	; 0x5cc <Motor_Direction+0x4c>
     592:	62 30       	cpi	r22, 0x02	; 2
     594:	71 f0       	breq	.+28     	; 0x5b2 <Motor_Direction+0x32>
     596:	56 c0       	rjmp	.+172    	; 0x644 <Motor_Direction+0xc4>
			{
				case MOTOR_FORWARD:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	68 e0       	ldi	r22, 0x08	; 8
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     5a2:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , HIGH);
     5a4:	4f ef       	ldi	r20, 0xFF	; 255
     5a6:	64 e0       	ldi	r22, 0x04	; 4
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     5ae:	8c 2b       	or	r24, r28
				break;
     5b0:	4c c0       	rjmp	.+152    	; 0x64a <Motor_Direction+0xca>
				
				case MOTOR_BACKWARD:
				
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , HIGH);
     5b2:	4f ef       	ldi	r20, 0xFF	; 255
     5b4:	68 e0       	ldi	r22, 0x08	; 8
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     5bc:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	64 e0       	ldi	r22, 0x04	; 4
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     5c8:	8c 2b       	or	r24, r28
				break;
     5ca:	3f c0       	rjmp	.+126    	; 0x64a <Motor_Direction+0xca>
				
				case MOTOR_STOP:
				
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	68 e0       	ldi	r22, 0x08	; 8
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     5d6:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	64 e0       	ldi	r22, 0x04	; 4
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     5e2:	8c 2b       	or	r24, r28
				break;
     5e4:	32 c0       	rjmp	.+100    	; 0x64a <Motor_Direction+0xca>
			}
			break;
			
			////////motor2//////////
			case MOTOR_2:
			switch (Motor_Direction)
     5e6:	61 30       	cpi	r22, 0x01	; 1
     5e8:	21 f0       	breq	.+8      	; 0x5f2 <Motor_Direction+0x72>
     5ea:	e8 f0       	brcs	.+58     	; 0x626 <Motor_Direction+0xa6>
     5ec:	62 30       	cpi	r22, 0x02	; 2
     5ee:	71 f0       	breq	.+28     	; 0x60c <Motor_Direction+0x8c>
     5f0:	2b c0       	rjmp	.+86     	; 0x648 <Motor_Direction+0xc8>
			{
				case MOTOR_FORWARD:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , HIGH);
     5f2:	4f ef       	ldi	r20, 0xFF	; 255
     5f4:	60 e4       	ldi	r22, 0x40	; 64
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     5fc:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	60 e8       	ldi	r22, 0x80	; 128
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     608:	8c 2b       	or	r24, r28
				break;
     60a:	1f c0       	rjmp	.+62     	; 0x64a <Motor_Direction+0xca>
				case MOTOR_BACKWARD:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	60 e4       	ldi	r22, 0x40	; 64
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     616:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , HIGH);
     618:	4f ef       	ldi	r20, 0xFF	; 255
     61a:	60 e8       	ldi	r22, 0x80	; 128
     61c:	83 e0       	ldi	r24, 0x03	; 3
     61e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     622:	8c 2b       	or	r24, r28
				break;
     624:	12 c0       	rjmp	.+36     	; 0x64a <Motor_Direction+0xca>
				case MOTOR_STOP:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	60 e4       	ldi	r22, 0x40	; 64
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     630:	c8 2f       	mov	r28, r24
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	60 e8       	ldi	r22, 0x80	; 128
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     63c:	8c 2b       	or	r24, r28
				break;
     63e:	05 c0       	rjmp	.+10     	; 0x64a <Motor_Direction+0xca>
				break;
			}
			break;
			
			default:
			a_u8_error_state |=  E_NOK ;
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	03 c0       	rjmp	.+6      	; 0x64a <Motor_Direction+0xca>
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT , LOW);
				a_u8_error_state |= DIO_Write (MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT , LOW);
				break;
				
				default:
				a_u8_error_state |= E_NOK ;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	01 c0       	rjmp	.+2      	; 0x64a <Motor_Direction+0xca>
				case MOTOR_STOP:
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT , LOW);
				a_u8_error_state |= DIO_Write (MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT , LOW);
				break;
				default:
				a_u8_error_state |=  E_NOK ;
     648:	81 e0       	ldi	r24, 0x01	; 1
			a_u8_error_state |=  E_NOK ;
			break;
		}
		
		return a_u8_error_state  ;
}
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <Motor_Start>:
 * output  	 : no output
 * return 	 : ERROR_STATUS
 * Description: Start the motor.
*/

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	d6 2f       	mov	r29, r22
	
	 uint8_t a_u8_error_state = E_OK ;
	
	switch(Motor_Number){
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	19 f0       	breq	.+6      	; 0x65e <Motor_Start+0x10>
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	51 f0       	breq	.+20     	; 0x670 <Motor_Start+0x22>
     65c:	14 c0       	rjmp	.+40     	; 0x686 <Motor_Start+0x38>
		
		case MOTOR_1 :
		a_u8_error_state |= Pwm_Start(PWM_CH1A,Mot_Speed,CAR_FREQUANCY);
     65e:	24 e6       	ldi	r18, 0x64	; 100
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 9b 03 	call	0x736	; 0x736 <Pwm_Start>
     66c:	c8 2f       	mov	r28, r24
     66e:	01 c0       	rjmp	.+2      	; 0x672 <Motor_Start+0x24>
 * Description: Start the motor.
*/

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
	
	 uint8_t a_u8_error_state = E_OK ;
     670:	c0 e0       	ldi	r28, 0x00	; 0
	switch(Motor_Number){
		
		case MOTOR_1 :
		a_u8_error_state |= Pwm_Start(PWM_CH1A,Mot_Speed,CAR_FREQUANCY);
		case MOTOR_2 :
		a_u8_error_state |= Pwm_Start(PWM_CH1B,Mot_Speed,CAR_FREQUANCY);
     672:	24 e6       	ldi	r18, 0x64	; 100
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	6d 2f       	mov	r22, r29
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	0e 94 9b 03 	call	0x736	; 0x736 <Pwm_Start>
     682:	8c 2b       	or	r24, r28
     684:	01 c0       	rjmp	.+2      	; 0x688 <Motor_Start+0x3a>
 * Description: Start the motor.
*/

ERROR_STATUS Motor_Start(uint8_t Motor_Number, uint8_t Mot_Speed){
	
	 uint8_t a_u8_error_state = E_OK ;
     686:	80 e0       	ldi	r24, 0x00	; 0
		a_u8_error_state |= Pwm_Start(PWM_CH1B,Mot_Speed,CAR_FREQUANCY);
		default :
		a_u8_error_state |= E_NOK ;
	}
	return a_u8_error_state  ;
}
     688:	81 60       	ori	r24, 0x01	; 1
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <Pwm_Init>:
uint16_t g_Prescale_mask = 0 ;
#define PWM_PRE_SCALE 1024
#define PWM_PRE_scale_MASK T1_PRESCALER_1024


extern ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg){
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	00 d0       	rcall	.+0      	; 0x69a <Pwm_Init+0xa>
     69a:	1f 92       	push	r1
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
	
		if (Pwm_Cfg==NULL)
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	e1 f1       	breq	.+120    	; 0x71c <Pwm_Init+0x8c>
     6a4:	8c 01       	movw	r16, r24
		{
			return E_NOK ;
		}
	
		DIO_Cfg_s dioCfg;
		dioCfg.GPIO=PWM_GPIO1;
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	89 83       	std	Y+1, r24	; 0x01
		dioCfg.pins=PWM_BIT1|PWM_BIT2;
     6aa:	80 e3       	ldi	r24, 0x30	; 48
     6ac:	8a 83       	std	Y+2, r24	; 0x02
		dioCfg.dir=OUTPUT;
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
     6b0:	8b 83       	std	Y+3, r24	; 0x03
		DIO_init(&dioCfg);
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_init>
		
		//gpioPinDirection(PWM_GPIO1 ,PWM_BIT1 , OUTPUT);
		//gpioPinDirection(PWM_GPIO2 ,PWM_BIT2 , OUTPUT);
	
	
	switch(Pwm_Cfg->Prescaler){
     6ba:	f8 01       	movw	r30, r16
     6bc:	81 81       	ldd	r24, Z+1	; 0x01
     6be:	86 30       	cpi	r24, 0x06	; 6
     6c0:	40 f0       	brcs	.+16     	; 0x6d2 <Pwm_Init+0x42>
     6c2:	86 30       	cpi	r24, 0x06	; 6
     6c4:	69 f5       	brne	.+90     	; 0x720 <Pwm_Init+0x90>
		break; 
		case PWM_PRESCALER_256 :
		
		break;
		case PWM_PRESCALER_1024 :
		g_Prescale_mask = TIMER1_PRESCALER_1024_MASK ;
     6c6:	85 e0       	ldi	r24, 0x05	; 5
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <g_Prescale_mask+0x1>
     6ce:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <g_Prescale_mask>
		break;
		default: 
		return E_NOK ;
	}
	
	switch(Pwm_Cfg->Channel){
     6d2:	f8 01       	movw	r30, r16
     6d4:	80 81       	ld	r24, Z
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	39 f0       	breq	.+14     	; 0x6e8 <Pwm_Init+0x58>
     6da:	20 f0       	brcs	.+8      	; 0x6e4 <Pwm_Init+0x54>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	89 f0       	breq	.+34     	; 0x702 <Pwm_Init+0x72>
     6e0:	83 30       	cpi	r24, 0x03	; 3
     6e2:	01 f5       	brne	.+64     	; 0x724 <Pwm_Init+0x94>
		return E_NOK ;
		
		
	}
	
	return E_OK ;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	1f c0       	rjmp	.+62     	; 0x726 <Pwm_Init+0x96>
		case PWM_CH0:
		
		break;
		case PWM_CH1A :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
     6e8:	8e b5       	in	r24, 0x2e	; 46
     6ea:	9f b5       	in	r25, 0x2f	; 47
     6ec:	80 61       	ori	r24, 0x10	; 16
     6ee:	92 60       	ori	r25, 0x02	; 2
     6f0:	9f bd       	out	0x2f, r25	; 47
     6f2:	8e bd       	out	0x2e, r24	; 46
		TCCR1 |= T1_OC1A_CLEAR ;
     6f4:	8e b5       	in	r24, 0x2e	; 46
     6f6:	9f b5       	in	r25, 0x2f	; 47
     6f8:	90 68       	ori	r25, 0x80	; 128
     6fa:	9f bd       	out	0x2f, r25	; 47
     6fc:	8e bd       	out	0x2e, r24	; 46
		return E_NOK ;
		
		
	}
	
	return E_OK ;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
		TCCR1 |= T1_OC1A_CLEAR ;
		
		
		break;
     700:	12 c0       	rjmp	.+36     	; 0x726 <Pwm_Init+0x96>
		case PWM_CH1B :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
     702:	8e b5       	in	r24, 0x2e	; 46
     704:	9f b5       	in	r25, 0x2f	; 47
     706:	80 61       	ori	r24, 0x10	; 16
     708:	92 60       	ori	r25, 0x02	; 2
     70a:	9f bd       	out	0x2f, r25	; 47
     70c:	8e bd       	out	0x2e, r24	; 46
		TCCR1 |= T1_OC1B_CLEAR ;
     70e:	8e b5       	in	r24, 0x2e	; 46
     710:	9f b5       	in	r25, 0x2f	; 47
     712:	90 62       	ori	r25, 0x20	; 32
     714:	9f bd       	out	0x2f, r25	; 47
     716:	8e bd       	out	0x2e, r24	; 46
		return E_NOK ;
		
		
	}
	
	return E_OK ;
     718:	80 e0       	ldi	r24, 0x00	; 0
		case PWM_CH1B :
		
		TCCR1 |= T1_PHASE_CORRECT_ICR1 ;
		TCCR1 |= T1_OC1B_CLEAR ;
		
		break;
     71a:	05 c0       	rjmp	.+10     	; 0x726 <Pwm_Init+0x96>

extern ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg){
	
		if (Pwm_Cfg==NULL)
		{
			return E_NOK ;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	03 c0       	rjmp	.+6      	; 0x726 <Pwm_Init+0x96>
		break;
		case PWM_PRESCALER_1024 :
		g_Prescale_mask = TIMER1_PRESCALER_1024_MASK ;
		break;
		default: 
		return E_NOK ;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	01 c0       	rjmp	.+2      	; 0x726 <Pwm_Init+0x96>
		break;
		case PWM_CH2 :
		
		break;
		default:
		return E_NOK ;
     724:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return E_OK ;
	
	
}
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <Pwm_Start>:

extern ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy){
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	d8 2f       	mov	r29, r24
     744:	c6 2f       	mov	r28, r22
	
		
	uint16_t ICR_TOP ;
	uint16_t duty_cycle_tick ;
	
	ICR_TOP = F_CPU / (2.0 * PWM_PRE_SCALE * Frequncy) ;
     746:	ca 01       	movw	r24, r20
     748:	b9 01       	movw	r22, r18
     74a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__floatunsisf>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	55 e4       	ldi	r21, 0x45	; 69
     756:	0e 94 0a 08 	call	0x1014	; 0x1014 <__mulsf3>
     75a:	9b 01       	movw	r18, r22
     75c:	ac 01       	movw	r20, r24
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	74 e2       	ldi	r23, 0x24	; 36
     762:	84 e7       	ldi	r24, 0x74	; 116
     764:	9b e4       	ldi	r25, 0x4B	; 75
     766:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divsf3>
     76a:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fixunssfsi>
     76e:	6b 01       	movw	r12, r22
     770:	7c 01       	movw	r14, r24
	
	
	duty_cycle_tick = ICR_TOP *Duty/100.0 ;
     772:	8c 2f       	mov	r24, r28
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	8c 9d       	mul	r24, r12
     778:	b0 01       	movw	r22, r0
     77a:	8d 9d       	mul	r24, r13
     77c:	70 0d       	add	r23, r0
     77e:	9c 9d       	mul	r25, r12
     780:	70 0d       	add	r23, r0
     782:	11 24       	eor	r1, r1
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 7c 07 	call	0xef8	; 0xef8 <__floatunsisf>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	48 ec       	ldi	r20, 0xC8	; 200
     792:	52 e4       	ldi	r21, 0x42	; 66
     794:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divsf3>
     798:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fixunssfsi>
	
		
		switch(Channel){
     79c:	d1 30       	cpi	r29, 0x01	; 1
     79e:	39 f0       	breq	.+14     	; 0x7ae <Pwm_Start+0x78>
     7a0:	20 f0       	brcs	.+8      	; 0x7aa <Pwm_Start+0x74>
     7a2:	d2 30       	cpi	r29, 0x02	; 2
     7a4:	a1 f0       	breq	.+40     	; 0x7ce <Pwm_Start+0x98>
     7a6:	d3 30       	cpi	r29, 0x03	; 3
     7a8:	11 f5       	brne	.+68     	; 0x7ee <Pwm_Start+0xb8>
			default:
			return E_NOK ;
			
			
		}
		return E_OK ;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	21 c0       	rjmp	.+66     	; 0x7f0 <Pwm_Start+0xba>
			case PWM_CH0:
			
			break;
			case PWM_CH1A :
			
			ICR1 = ICR_TOP ;
     7ae:	d7 bc       	out	0x27, r13	; 39
     7b0:	c6 bc       	out	0x26, r12	; 38
			OCR1A = duty_cycle_tick ;
     7b2:	7b bd       	out	0x2b, r23	; 43
     7b4:	6a bd       	out	0x2a, r22	; 42
			
			TCCR1|=g_Prescale_mask ;
     7b6:	2e b5       	in	r18, 0x2e	; 46
     7b8:	3f b5       	in	r19, 0x2f	; 47
     7ba:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <g_Prescale_mask>
     7be:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <g_Prescale_mask+0x1>
     7c2:	82 2b       	or	r24, r18
     7c4:	93 2b       	or	r25, r19
     7c6:	9f bd       	out	0x2f, r25	; 47
     7c8:	8e bd       	out	0x2e, r24	; 46
			default:
			return E_NOK ;
			
			
		}
		return E_OK ;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
			OCR1A = duty_cycle_tick ;
			
			TCCR1|=g_Prescale_mask ;
			
			
			break;
     7cc:	11 c0       	rjmp	.+34     	; 0x7f0 <Pwm_Start+0xba>
			case PWM_CH1B :
			
			ICR1 = ICR_TOP ;
     7ce:	d7 bc       	out	0x27, r13	; 39
     7d0:	c6 bc       	out	0x26, r12	; 38
			OCR1B = duty_cycle_tick ;
     7d2:	79 bd       	out	0x29, r23	; 41
     7d4:	68 bd       	out	0x28, r22	; 40
			TCCR1|=g_Prescale_mask ;
     7d6:	2e b5       	in	r18, 0x2e	; 46
     7d8:	3f b5       	in	r19, 0x2f	; 47
     7da:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <g_Prescale_mask>
     7de:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <g_Prescale_mask+0x1>
     7e2:	82 2b       	or	r24, r18
     7e4:	93 2b       	or	r25, r19
     7e6:	9f bd       	out	0x2f, r25	; 47
     7e8:	8e bd       	out	0x2e, r24	; 46
			default:
			return E_NOK ;
			
			
		}
		return E_OK ;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
			
			ICR1 = ICR_TOP ;
			OCR1B = duty_cycle_tick ;
			TCCR1|=g_Prescale_mask ;
			
			break;
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <Pwm_Start+0xba>
			case PWM_CH2 :
			
			break;
			default:
			return E_NOK ;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
			
		}
		return E_OK ;
	
	
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	08 95       	ret

000007fe <Steering_Init>:
 * Return: The error status of the function.			
 * Description: Initiates the module , initialize MOTOR_1 & MOTOR_2 
 * 							
 */

ERROR_STATUS Steering_Init(void){
     7fe:	cf 93       	push	r28
	
	ERROR_STATUS state_error = E_OK ;
	
	state_error |= Motor_Init(MOTOR_1);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 6f 02 	call	0x4de	; 0x4de <Motor_Init>
     806:	c8 2f       	mov	r28, r24
	state_error |= Motor_Init(MOTOR_2);
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	0e 94 6f 02 	call	0x4de	; 0x4de <Motor_Init>
	return state_error;
}
     80e:	8c 2b       	or	r24, r28
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <Steering_SteerCar>:
 * Return: The error status of the function.			
 * Description: This function controls the command and the speed of the car.
 * 							
 */

ERROR_STATUS Steering_SteerCar(uint8_t Steering_CarCmd, uint8_t speed){
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	d6 2f       	mov	r29, r22
	ERROR_STATUS state_error = E_OK ;
	
/****************************  set motor direction ********************************************/

	
	switch(Steering_CarCmd){
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	09 f1       	breq	.+66     	; 0x860 <__stack+0x1>
     81e:	28 f4       	brcc	.+10     	; 0x82a <Steering_SteerCar+0x16>
     820:	88 23       	and	r24, r24
     822:	41 f0       	breq	.+16     	; 0x834 <Steering_SteerCar+0x20>
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	89 f0       	breq	.+34     	; 0x84a <Steering_SteerCar+0x36>
     828:	3c c0       	rjmp	.+120    	; 0x8a2 <__stack+0x43>
     82a:	83 30       	cpi	r24, 0x03	; 3
     82c:	21 f1       	breq	.+72     	; 0x876 <__stack+0x17>
     82e:	84 30       	cpi	r24, 0x04	; 4
     830:	69 f1       	breq	.+90     	; 0x88c <__stack+0x2d>
     832:	37 c0       	rjmp	.+110    	; 0x8a2 <__stack+0x43>
		case CAR_STOP:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_STOP);
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     83c:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_STOP);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     846:	c8 2b       	or	r28, r24
		break;
     848:	2d c0       	rjmp	.+90     	; 0x8a4 <__stack+0x45>
		case CAR_FORWARD:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     852:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_FORWARD);
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     85c:	c8 2b       	or	r28, r24
		break;
     85e:	22 c0       	rjmp	.+68     	; 0x8a4 <__stack+0x45>
		case CAR_BACKWARD:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_BACKWARD);
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     868:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     872:	c8 2b       	or	r28, r24
		break;
     874:	17 c0       	rjmp	.+46     	; 0x8a4 <__stack+0x45>
		case CAR_RIGHT:
		state_error |= Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     87e:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     880:	62 e0       	ldi	r22, 0x02	; 2
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     888:	c8 2b       	or	r28, r24
		break;
     88a:	0c c0       	rjmp	.+24     	; 0x8a4 <__stack+0x45>
		case CAR_LEFT:
		state_error |= Motor_Direction(MOTOR_2,MOTOR_BACKWARD);
     88c:	62 e0       	ldi	r22, 0x02	; 2
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     894:	c8 2f       	mov	r28, r24
		state_error |= Motor_Direction(MOTOR_1,MOTOR_FORWARD);
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 c0 02 	call	0x580	; 0x580 <Motor_Direction>
     89e:	c8 2b       	or	r28, r24
		break;
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <__stack+0x45>
		default:
		state_error |= E_NOK;
     8a2:	c1 e0       	ldi	r28, 0x01	; 1
		
	}
	
	/****************************  start motor direction ********************************************/

		state_error |= Motor_Start(MOTOR_1,speed);
     8a4:	6d 2f       	mov	r22, r29
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	0e 94 27 03 	call	0x64e	; 0x64e <Motor_Start>
     8ac:	c8 2b       	or	r28, r24
		state_error |= Motor_Start(MOTOR_2,speed);
     8ae:	6d 2f       	mov	r22, r29
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	0e 94 27 03 	call	0x64e	; 0x64e <Motor_Start>
		return state_error ;
	
}
     8b6:	8c 2b       	or	r24, r28
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <Timer_Init>:
uint8_t g_ModeTimer2 = 0 ;


//////mode normal mode only

ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg){
     8be:	fc 01       	movw	r30, r24
	
	switch(Timer_cfg->Timer_CH_NO){
     8c0:	80 81       	ld	r24, Z
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	d9 f0       	breq	.+54     	; 0x8fc <Timer_Init+0x3e>
     8c6:	18 f0       	brcs	.+6      	; 0x8ce <Timer_Init+0x10>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	91 f1       	breq	.+100    	; 0x930 <Timer_Init+0x72>
     8cc:	4b c0       	rjmp	.+150    	; 0x964 <Timer_Init+0xa6>
////////////////////////////////TIMER 0 //////////////////////////////////////
		case TIMER_CH0 :
			TCCR0 = ZERO_VALUE ;
     8ce:	13 be       	out	0x33, r1	; 51
	
		/*set the PreScale config*/
		
		g_prescaleTimer0 = Timer_cfg->Timer_Prescaler ;
     8d0:	83 81       	ldd	r24, Z+3	; 0x03
     8d2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <g_prescaleTimer0>
		g_ModeTimer0 = Timer_cfg->Timer_Mode ;
     8d6:	81 81       	ldd	r24, Z+1	; 0x01
     8d8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <g_ModeTimer0>
		
	#ifdef NORMAL_MODE
	
			/*set normal or compare mode*/
				
			TCCR0 |= T0_NORMAL_MODE_MASK ;
     8dc:	83 b7       	in	r24, 0x33	; 51
     8de:	83 bf       	out	0x33, r24	; 51
				
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     8e0:	82 81       	ldd	r24, Z+2	; 0x02
     8e2:	81 11       	cpse	r24, r1
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <Timer_Init+0x30>
			{
				TIMSK |=TIMER0_POLLING_MODE_MASK ;
     8e6:	89 b7       	in	r24, 0x39	; 57
     8e8:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	08 95       	ret
				
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
			{
				TIMSK |=TIMER0_POLLING_MODE_MASK ;
			}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	d9 f5       	brne	.+118    	; 0x968 <Timer_Init+0xaa>
				TIMSK |=TIMER0_INTERRUPT_NORMAL_MASK;
     8f2:	89 b7       	in	r24, 0x39	; 57
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	08 95       	ret
		
//////////////////////////TIMER 1 //////////////////////////////

		case TIMER_CH1 :
		
			TCCR1 = ZERO_VALUE;
     8fc:	1f bc       	out	0x2f, r1	; 47
     8fe:	1e bc       	out	0x2e, r1	; 46
			
			/*set the PreScale config*/
			
			g_prescaleTimer1 = Timer_cfg->Timer_Prescaler ;
     900:	83 81       	ldd	r24, Z+3	; 0x03
     902:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <g_prescaleTimer1>
			g_ModeTimer1 = Timer_cfg->Timer_Mode ;
     906:	81 81       	ldd	r24, Z+1	; 0x01
     908:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <g_ModeTimer1>
		
			#ifdef NORMAL_MODE
			
				/*set normal or compare mode*/
				
				TCCR1 |= T1_NORMAL_MODE_MASK ;
     90c:	8e b5       	in	r24, 0x2e	; 46
     90e:	9f b5       	in	r25, 0x2f	; 47
     910:	9f bd       	out	0x2f, r25	; 47
     912:	8e bd       	out	0x2e, r24	; 46
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     914:	82 81       	ldd	r24, Z+2	; 0x02
     916:	81 11       	cpse	r24, r1
     918:	04 c0       	rjmp	.+8      	; 0x922 <Timer_Init+0x64>
				{
					TIMSK |=TIMER1_POLLING_MODE_MASK ;
     91a:	89 b7       	in	r24, 0x39	; 57
     91c:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	08 95       	ret
				
				/* set polling or interrupt config*/
				if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
				{
					TIMSK |=TIMER1_POLLING_MODE_MASK ;
					}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	19 f5       	brne	.+70     	; 0x96c <Timer_Init+0xae>
					TIMSK |=TIMER1_INTERRUPT_NORMAL_MASK;
     926:	89 b7       	in	r24, 0x39	; 57
     928:	84 60       	ori	r24, 0x04	; 4
     92a:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	08 95       	ret
		break;
///////////////////////TIMER 2 //////////////////////////

		case TIMER_CH2 :
		
			TCCR2 = ZERO_VALUE;
     930:	15 bc       	out	0x25, r1	; 37
			
			/*UNKNOWN*/
			ASSR &= 0xF0 ;
     932:	82 b5       	in	r24, 0x22	; 34
     934:	80 7f       	andi	r24, 0xF0	; 240
     936:	82 bd       	out	0x22, r24	; 34

			/*set the PreScale config*/
			
			g_prescaleTimer2 = Timer_cfg->Timer_Prescaler ;
     938:	83 81       	ldd	r24, Z+3	; 0x03
     93a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_prescaleTimer2>
			g_ModeTimer2 = Timer_cfg->Timer_Mode ;
     93e:	81 81       	ldd	r24, Z+1	; 0x01
     940:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <g_ModeTimer2>
			
			#ifdef NORMAL_MODE
			
			/*set normal or compare mode*/
			
			TCCR2 |= T2_NORMAL_MODE_MASK ;
     944:	85 b5       	in	r24, 0x25	; 37
     946:	85 bd       	out	0x25, r24	; 37
			
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
     948:	82 81       	ldd	r24, Z+2	; 0x02
     94a:	81 11       	cpse	r24, r1
     94c:	04 c0       	rjmp	.+8      	; 0x956 <Timer_Init+0x98>
			{
				TIMSK |=TIMER2_POLLING_MODE_MASK ;
     94e:	89 b7       	in	r24, 0x39	; 57
     950:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	08 95       	ret
			
			/* set polling or interrupt config*/
			if (Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_POLLING_MODE)
			{
				TIMSK |=TIMER2_POLLING_MODE_MASK ;
				}else if(Timer_cfg->Timer_Polling_Or_Interrupt==TIMER_INTERRUPT_MODE){
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	59 f4       	brne	.+22     	; 0x970 <Timer_Init+0xb2>
				TIMSK |=TIMER2_INTERRUPT_NORMAL_MASK;
     95a:	89 b7       	in	r24, 0x39	; 57
     95c:	80 64       	ori	r24, 0x40	; 64
     95e:	89 bf       	out	0x39, r24	; 57
		return E_NOK ;
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	08 95       	ret
		
		break;
///////////////////////ERROR //////////////////////////

		default :
		return E_NOK ;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	08 95       	ret
		break;
		
		
	}//// end switch of channel type
	return E_OK ;
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	08 95       	ret
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	08 95       	ret
     970:	80 e0       	ldi	r24, 0x00	; 0
}
     972:	08 95       	ret

00000974 <Timer_Stop>:
	
}

ERROR_STATUS Timer_Stop(uint8_t Timer_CH_NO){
	
	switch (Timer_CH_NO)
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	49 f0       	breq	.+18     	; 0x98a <Timer_Stop+0x16>
     978:	18 f0       	brcs	.+6      	; 0x980 <Timer_Stop+0xc>
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	69 f0       	breq	.+26     	; 0x998 <Timer_Stop+0x24>
     97e:	11 c0       	rjmp	.+34     	; 0x9a2 <Timer_Stop+0x2e>
	{
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
     980:	83 b7       	in	r24, 0x33	; 51
     982:	88 7f       	andi	r24, 0xF8	; 248
     984:	83 bf       	out	0x33, r24	; 51
		break;
		default:
		return E_NOK ;
		break;
	}
	return E_OK ;
     986:	80 e0       	ldi	r24, 0x00	; 0
	
	switch (Timer_CH_NO)
	{
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
		break;
     988:	08 95       	ret
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
     98a:	8e b5       	in	r24, 0x2e	; 46
     98c:	9f b5       	in	r25, 0x2f	; 47
     98e:	88 7f       	andi	r24, 0xF8	; 248
     990:	9f bd       	out	0x2f, r25	; 47
     992:	8e bd       	out	0x2e, r24	; 46
		break;
		default:
		return E_NOK ;
		break;
	}
	return E_OK ;
     994:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH0 :
		TCCR0 &=TIMER0_NO_CLOCK_MASK;
		break;
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
		break;
     996:	08 95       	ret
		case TIMER_CH2 :
		TCCR2 &=TIMER2_NO_CLOCK_MASK;
     998:	85 b5       	in	r24, 0x25	; 37
     99a:	88 7f       	andi	r24, 0xF8	; 248
     99c:	85 bd       	out	0x25, r24	; 37
		break;
		default:
		return E_NOK ;
		break;
	}
	return E_OK ;
     99e:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_CH1 :
		TCCR1 &=TIMER1_NO_CLOCK_MASK;
		break;
		case TIMER_CH2 :
		TCCR2 &=TIMER2_NO_CLOCK_MASK;
		break;
     9a0:	08 95       	ret
		default:
		return E_NOK ;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return E_OK ;
	
	
}
     9a4:	08 95       	ret

000009a6 <Timer_GetStatus>:

ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, uint8_t* Data){
	
	if (Data == NULL)
     9a6:	61 15       	cp	r22, r1
     9a8:	71 05       	cpc	r23, r1
     9aa:	99 f1       	breq	.+102    	; 0xa12 <Timer_GetStatus+0x6c>
	{
		return E_NOK ;
	}
	
	
	switch (Timer_CH_NO )
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	99 f0       	breq	.+38     	; 0x9d6 <Timer_GetStatus+0x30>
     9b0:	18 f0       	brcs	.+6      	; 0x9b8 <Timer_GetStatus+0x12>
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	f9 f0       	breq	.+62     	; 0x9f4 <Timer_GetStatus+0x4e>
     9b6:	2f c0       	rjmp	.+94     	; 0xa16 <Timer_GetStatus+0x70>
	{
		case TIMER_CH0 :
			if((TIFR&T0_OVF_FLAG_MASK) > ZERO_VALUE)
     9b8:	08 b6       	in	r0, 0x38	; 56
     9ba:	00 fe       	sbrs	r0, 0
     9bc:	08 c0       	rjmp	.+16     	; 0x9ce <Timer_GetStatus+0x28>
			{
				(*Data) = TRUE ;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	fb 01       	movw	r30, r22
     9c2:	80 83       	st	Z, r24
				TIFR |=T0_OVF_FLAG_MASK ;
     9c4:	88 b7       	in	r24, 0x38	; 56
     9c6:	81 60       	ori	r24, 0x01	; 1
     9c8:	88 bf       	out	0x38, r24	; 56
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
			if((TIFR&T0_OVF_FLAG_MASK) > ZERO_VALUE)
			{
				(*Data) = TRUE ;
				TIFR |=T0_OVF_FLAG_MASK ;
			}else
			(*Data) = FALSE ;
     9ce:	fb 01       	movw	r30, r22
     9d0:	10 82       	st	Z, r1
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	08 95       	ret
			}else
			(*Data) = FALSE ;
		break;
		
		case TIMER_CH1 :
			if((TIFR&T1_OVF_FLAG_MASK) > ZERO_VALUE)
     9d6:	08 b6       	in	r0, 0x38	; 56
     9d8:	02 fe       	sbrs	r0, 2
     9da:	08 c0       	rjmp	.+16     	; 0x9ec <Timer_GetStatus+0x46>
			{
				(*Data) = TRUE ;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	fb 01       	movw	r30, r22
     9e0:	80 83       	st	Z, r24
				TIFR |=T1_OVF_FLAG_MASK ;
     9e2:	88 b7       	in	r24, 0x38	; 56
     9e4:	84 60       	ori	r24, 0x04	; 4
     9e6:	88 bf       	out	0x38, r24	; 56
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret
			if((TIFR&T1_OVF_FLAG_MASK) > ZERO_VALUE)
			{
				(*Data) = TRUE ;
				TIFR |=T1_OVF_FLAG_MASK ;
			}else
			(*Data) = FALSE ;
     9ec:	fb 01       	movw	r30, r22
     9ee:	10 82       	st	Z, r1
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 95       	ret
			}else
			(*Data) = FALSE ;
			break;
			
		case TIMER_CH2 :
		if((TIFR&T2_OVF_FLAG_MASK) > ZERO_VALUE)
     9f4:	08 b6       	in	r0, 0x38	; 56
     9f6:	06 fe       	sbrs	r0, 6
     9f8:	08 c0       	rjmp	.+16     	; 0xa0a <Timer_GetStatus+0x64>
		{
			(*Data) = TRUE ;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	fb 01       	movw	r30, r22
     9fe:	80 83       	st	Z, r24
			TIFR |=T2_OVF_FLAG_MASK ;
     a00:	88 b7       	in	r24, 0x38	; 56
     a02:	80 64       	ori	r24, 0x40	; 64
     a04:	88 bf       	out	0x38, r24	; 56
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	08 95       	ret
		if((TIFR&T2_OVF_FLAG_MASK) > ZERO_VALUE)
		{
			(*Data) = TRUE ;
			TIFR |=T2_OVF_FLAG_MASK ;
		}else
		(*Data) = FALSE ;
     a0a:	fb 01       	movw	r30, r22
     a0c:	10 82       	st	Z, r1
	default: 
	return E_NOK ;	
		
	}
	
	return E_OK ;
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	08 95       	ret

ERROR_STATUS Timer_GetStatus(uint8_t Timer_CH_NO, uint8_t* Data){
	
	if (Data == NULL)
	{
		return E_NOK ;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret
		}else
		(*Data) = FALSE ;
		break;
		
	default: 
	return E_NOK ;	
     a16:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	return E_OK ;
	
}
     a18:	08 95       	ret

00000a1a <Timer_GetValue>:


ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data){
	if (Data == NULL)
     a1a:	61 15       	cp	r22, r1
     a1c:	71 05       	cpc	r23, r1
     a1e:	d9 f0       	breq	.+54     	; 0xa56 <Timer_GetValue+0x3c>
	{
		return E_NOK ;
	}
	
		switch (Timer_CH_NO)
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	59 f0       	breq	.+22     	; 0xa3a <Timer_GetValue+0x20>
     a24:	18 f0       	brcs	.+6      	; 0xa2c <Timer_GetValue+0x12>
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	79 f0       	breq	.+30     	; 0xa48 <Timer_GetValue+0x2e>
     a2a:	17 c0       	rjmp	.+46     	; 0xa5a <Timer_GetValue+0x40>
		{
			case TIMER_CH0 :
			(*Data) = TCNT0 ;
     a2c:	82 b7       	in	r24, 0x32	; 50
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	fb 01       	movw	r30, r22
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	80 83       	st	Z, r24
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a36:	80 e0       	ldi	r24, 0x00	; 0
	
		switch (Timer_CH_NO)
		{
			case TIMER_CH0 :
			(*Data) = TCNT0 ;
			break;
     a38:	08 95       	ret
			case TIMER_CH1 :
			(*Data) = TCNT1 ;
     a3a:	8c b5       	in	r24, 0x2c	; 44
     a3c:	9d b5       	in	r25, 0x2d	; 45
     a3e:	fb 01       	movw	r30, r22
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	80 83       	st	Z, r24
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a44:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH0 :
			(*Data) = TCNT0 ;
			break;
			case TIMER_CH1 :
			(*Data) = TCNT1 ;
			break;
     a46:	08 95       	ret
			case TIMER_CH2 :
			(*Data) = TCNT2 ;
     a48:	84 b5       	in	r24, 0x24	; 36
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fb 01       	movw	r30, r22
     a4e:	91 83       	std	Z+1, r25	; 0x01
     a50:	80 83       	st	Z, r24
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a52:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH1 :
			(*Data) = TCNT1 ;
			break;
			case TIMER_CH2 :
			(*Data) = TCNT2 ;
			break;
     a54:	08 95       	ret


ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO, uint16_t* Data){
	if (Data == NULL)
	{
		return E_NOK ;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	08 95       	ret
			break;
			case TIMER_CH2 :
			(*Data) = TCNT2 ;
			break;
			default:
			return E_NOK ;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
		return E_OK ;
	
}
     a5c:	08 95       	ret

00000a5e <Timer_SetValue>:

ERROR_STATUS Timer_SetValue(uint8_t Timer_CH_NO, uint16_t Data){
	
	
		switch (Timer_CH_NO)
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	39 f0       	breq	.+14     	; 0xa70 <Timer_SetValue+0x12>
     a62:	18 f0       	brcs	.+6      	; 0xa6a <Timer_SetValue+0xc>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	41 f0       	breq	.+16     	; 0xa78 <Timer_SetValue+0x1a>
     a68:	0a c0       	rjmp	.+20     	; 0xa7e <Timer_SetValue+0x20>
		{
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
     a6a:	62 bf       	out	0x32, r22	; 50
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
	
		switch (Timer_CH_NO)
		{
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
			break;
     a6e:	08 95       	ret
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
     a70:	7d bd       	out	0x2d, r23	; 45
     a72:	6c bd       	out	0x2c, r22	; 44
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a74:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH0 :
			 TCNT0 =(Data)  ;
			break;
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
			break;
     a76:	08 95       	ret
			case TIMER_CH2 :
			 TCNT2 =(Data) ;
     a78:	64 bd       	out	0x24, r22	; 36
			break;
			default:
			return E_NOK ;
			break;
		}
		return E_OK ;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_CH1 :
			 TCNT1 =(Data) ;
			break;
			case TIMER_CH2 :
			 TCNT2 =(Data) ;
			break;
     a7c:	08 95       	ret
			default:
			return E_NOK ;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
		return E_OK ;
		
}
     a80:	08 95       	ret

00000a82 <Timer_Start>:



	
	
ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count){
     a82:	cf 93       	push	r28
     a84:	c8 2f       	mov	r28, r24
	
		#ifdef NORMAL_MODE 
		      Timer_SetValue(Timer_CH_NO,256-Timer_Count)	;
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	9c 01       	movw	r18, r24
     a8c:	26 1b       	sub	r18, r22
     a8e:	37 0b       	sbc	r19, r23
     a90:	b9 01       	movw	r22, r18
     a92:	8c 2f       	mov	r24, r28
     a94:	0e 94 2f 05 	call	0xa5e	; 0xa5e <Timer_SetValue>
			}
		
			
		#endif
	
		switch (Timer_CH_NO)
     a98:	c1 30       	cpi	r28, 0x01	; 1
     a9a:	09 f4       	brne	.+2      	; 0xa9e <Timer_Start+0x1c>
     a9c:	48 c0       	rjmp	.+144    	; 0xb2e <Timer_Start+0xac>
     a9e:	20 f0       	brcs	.+8      	; 0xaa8 <Timer_Start+0x26>
     aa0:	c2 30       	cpi	r28, 0x02	; 2
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <Timer_Start+0x24>
     aa4:	98 c0       	rjmp	.+304    	; 0xbd6 <Timer_Start+0x154>
     aa6:	ca c0       	rjmp	.+404    	; 0xc3c <Timer_Start+0x1ba>
		{
			case TIMER_CH0 :
			if (g_ModeTimer0 ==TIMER_MODE)
     aa8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <g_ModeTimer0>
     aac:	81 11       	cpse	r24, r1
     aae:	30 c0       	rjmp	.+96     	; 0xb10 <Timer_Start+0x8e>
			{
				switch (g_prescaleTimer0)
     ab0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_prescaleTimer0>
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	c1 f0       	breq	.+48     	; 0xae8 <Timer_Start+0x66>
     ab8:	28 f4       	brcc	.+10     	; 0xac4 <Timer_Start+0x42>
     aba:	88 23       	and	r24, r24
     abc:	59 f0       	breq	.+22     	; 0xad4 <Timer_Start+0x52>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	71 f0       	breq	.+28     	; 0xade <Timer_Start+0x5c>
     ac2:	be c0       	rjmp	.+380    	; 0xc40 <Timer_Start+0x1be>
     ac4:	86 30       	cpi	r24, 0x06	; 6
     ac6:	d1 f0       	breq	.+52     	; 0xafc <Timer_Start+0x7a>
     ac8:	87 30       	cpi	r24, 0x07	; 7
     aca:	e9 f0       	breq	.+58     	; 0xb06 <Timer_Start+0x84>
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	09 f0       	breq	.+2      	; 0xad2 <Timer_Start+0x50>
     ad0:	b7 c0       	rjmp	.+366    	; 0xc40 <Timer_Start+0x1be>
     ad2:	0f c0       	rjmp	.+30     	; 0xaf2 <Timer_Start+0x70>
				{
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
     ad4:	83 b7       	in	r24, 0x33	; 51
     ad6:	88 6f       	ori	r24, 0xF8	; 248
     ad8:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     ada:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer0)
				{
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
					break;
     adc:	bc c0       	rjmp	.+376    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
     ade:	83 b7       	in	r24, 0x33	; 51
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_NO_CLOCK :
					TCCR0 |=TIMER0_NO_CLOCK_MASK;
					break;
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
					break;
     ae6:	b7 c0       	rjmp	.+366    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
     ae8:	83 b7       	in	r24, 0x33	; 51
     aea:	82 60       	ori	r24, 0x02	; 2
     aec:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     aee:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_NO:
					TCCR0 |=TIMER0_PRESCALER_NO_MASK;
					break;
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
					break;
     af0:	b2 c0       	rjmp	.+356    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_64:
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
     af2:	83 b7       	in	r24, 0x33	; 51
     af4:	83 60       	ori	r24, 0x03	; 3
     af6:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     af8:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_8 :
					TCCR0 |= TIMER0_PRESCALER_8_MASK ;
					break;
					case TIMER_PRESCALER_64:
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
					break;
     afa:	ad c0       	rjmp	.+346    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_256:
					TCCR0 |= TIMER0_PRESCALER_256_MASK ;
     afc:	83 b7       	in	r24, 0x33	; 51
     afe:	84 60       	ori	r24, 0x04	; 4
     b00:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b02:	80 e0       	ldi	r24, 0x00	; 0
					TCCR0 |= TIMER0_PRESCALER_64_MASK ;
					break;
					case TIMER_PRESCALER_256:
					TCCR0 |= TIMER0_PRESCALER_256_MASK ;

					break;
     b04:	a8 c0       	rjmp	.+336    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR0 |= TIMER0_PRESCALER_1024_MASK ;
     b06:	83 b7       	in	r24, 0x33	; 51
     b08:	85 60       	ori	r24, 0x05	; 5
     b0a:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b0c:	80 e0       	ldi	r24, 0x00	; 0

					break;
					case TIMER_PRESCALER_1024:
					TCCR0 |= TIMER0_PRESCALER_1024_MASK ;

					break;
     b0e:	a3 c0       	rjmp	.+326    	; 0xc56 <Timer_Start+0x1d4>
					
					
				}
				
			}else if (g_ModeTimer0 == COUNTER_RISING_MODE){
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	29 f4       	brne	.+10     	; 0xb1e <Timer_Start+0x9c>
				
				TCCR0|= COUNTER_RISING_MODE_MASK ;
     b14:	83 b7       	in	r24, 0x33	; 51
     b16:	87 60       	ori	r24, 0x07	; 7
     b18:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	9c c0       	rjmp	.+312    	; 0xc56 <Timer_Start+0x1d4>
				
			}else if (g_ModeTimer0 == COUNTER_RISING_MODE){
				
				TCCR0|= COUNTER_RISING_MODE_MASK ;
				
			}else if (g_ModeTimer0 == COUNTER_FALLING_MODE){
     b1e:	82 30       	cpi	r24, 0x02	; 2
     b20:	09 f0       	breq	.+2      	; 0xb24 <Timer_Start+0xa2>
     b22:	90 c0       	rjmp	.+288    	; 0xc44 <Timer_Start+0x1c2>
				
				TCCR0 |= COUNTER_FALLING_MODE_MASK ;
     b24:	83 b7       	in	r24, 0x33	; 51
     b26:	86 60       	ori	r24, 0x06	; 6
     b28:	83 bf       	out	0x33, r24	; 51
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	94 c0       	rjmp	.+296    	; 0xc56 <Timer_Start+0x1d4>
////////////// channel one /////////////////////

			case TIMER_CH1 :
			
			
			if (g_ModeTimer1 ==TIMER_MODE)
     b2e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <g_ModeTimer1>
     b32:	81 11       	cpse	r24, r1
     b34:	3d c0       	rjmp	.+122    	; 0xbb0 <Timer_Start+0x12e>
			{
				switch (g_prescaleTimer1)
     b36:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <g_prescaleTimer1>
     b3a:	82 30       	cpi	r24, 0x02	; 2
     b3c:	e9 f0       	breq	.+58     	; 0xb78 <Timer_Start+0xf6>
     b3e:	28 f4       	brcc	.+10     	; 0xb4a <Timer_Start+0xc8>
     b40:	88 23       	and	r24, r24
     b42:	59 f0       	breq	.+22     	; 0xb5a <Timer_Start+0xd8>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	89 f0       	breq	.+34     	; 0xb6a <Timer_Start+0xe8>
     b48:	7f c0       	rjmp	.+254    	; 0xc48 <Timer_Start+0x1c6>
     b4a:	86 30       	cpi	r24, 0x06	; 6
     b4c:	19 f1       	breq	.+70     	; 0xb94 <Timer_Start+0x112>
     b4e:	87 30       	cpi	r24, 0x07	; 7
     b50:	41 f1       	breq	.+80     	; 0xba2 <Timer_Start+0x120>
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	09 f0       	breq	.+2      	; 0xb58 <Timer_Start+0xd6>
     b56:	78 c0       	rjmp	.+240    	; 0xc48 <Timer_Start+0x1c6>
     b58:	16 c0       	rjmp	.+44     	; 0xb86 <Timer_Start+0x104>
				{
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
     b5a:	8e b5       	in	r24, 0x2e	; 46
     b5c:	9f b5       	in	r25, 0x2f	; 47
     b5e:	88 6f       	ori	r24, 0xF8	; 248
     b60:	9f 6f       	ori	r25, 0xFF	; 255
     b62:	9f bd       	out	0x2f, r25	; 47
     b64:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b66:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer1)
				{
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
					break;
     b68:	76 c0       	rjmp	.+236    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
     b6a:	8e b5       	in	r24, 0x2e	; 46
     b6c:	9f b5       	in	r25, 0x2f	; 47
     b6e:	81 60       	ori	r24, 0x01	; 1
     b70:	9f bd       	out	0x2f, r25	; 47
     b72:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b74:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_NO_CLOCK :
					TCCR1 |=TIMER1_NO_CLOCK_MASK;
					break;
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
					break;
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
     b78:	8e b5       	in	r24, 0x2e	; 46
     b7a:	9f b5       	in	r25, 0x2f	; 47
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	9f bd       	out	0x2f, r25	; 47
     b80:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b82:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_NO:
					TCCR1 |=TIMER1_PRESCALER_NO_MASK;
					break;
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
					break;
     b84:	68 c0       	rjmp	.+208    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_64:
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
     b86:	8e b5       	in	r24, 0x2e	; 46
     b88:	9f b5       	in	r25, 0x2f	; 47
     b8a:	83 60       	ori	r24, 0x03	; 3
     b8c:	9f bd       	out	0x2f, r25	; 47
     b8e:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b90:	80 e0       	ldi	r24, 0x00	; 0
					case TIMER_PRESCALER_8 :
					TCCR1 |= TIMER1_PRESCALER_8_MASK ;
					break;
					case TIMER_PRESCALER_64:
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
					break;
     b92:	61 c0       	rjmp	.+194    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_256:
					TCCR1 |= TIMER1_PRESCALER_256_MASK ;
     b94:	8e b5       	in	r24, 0x2e	; 46
     b96:	9f b5       	in	r25, 0x2f	; 47
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	9f bd       	out	0x2f, r25	; 47
     b9c:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
					TCCR1 |= TIMER1_PRESCALER_64_MASK ;
					break;
					case TIMER_PRESCALER_256:
					TCCR1 |= TIMER1_PRESCALER_256_MASK ;

					break;
     ba0:	5a c0       	rjmp	.+180    	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR1 |= TIMER1_PRESCALER_1024_MASK ;
     ba2:	8e b5       	in	r24, 0x2e	; 46
     ba4:	9f b5       	in	r25, 0x2f	; 47
     ba6:	85 60       	ori	r24, 0x05	; 5
     ba8:	9f bd       	out	0x2f, r25	; 47
     baa:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     bac:	80 e0       	ldi	r24, 0x00	; 0

					break;
					case TIMER_PRESCALER_1024:
					TCCR1 |= TIMER1_PRESCALER_1024_MASK ;

					break;
     bae:	53 c0       	rjmp	.+166    	; 0xc56 <Timer_Start+0x1d4>
					
					
				}
				
				}else if (g_ModeTimer1 == COUNTER_RISING_MODE){
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	39 f4       	brne	.+14     	; 0xbc2 <Timer_Start+0x140>
				
				TCCR1|= COUNTER_RISING_MODE_MASK ;
     bb4:	8e b5       	in	r24, 0x2e	; 46
     bb6:	9f b5       	in	r25, 0x2f	; 47
     bb8:	87 60       	ori	r24, 0x07	; 7
     bba:	9f bd       	out	0x2f, r25	; 47
     bbc:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	4a c0       	rjmp	.+148    	; 0xc56 <Timer_Start+0x1d4>
				
				}else if (g_ModeTimer1 == COUNTER_RISING_MODE){
				
				TCCR1|= COUNTER_RISING_MODE_MASK ;
				
				}else if (g_ModeTimer1 == COUNTER_FALLING_MODE){
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <Timer_Start+0x146>
     bc6:	42 c0       	rjmp	.+132    	; 0xc4c <Timer_Start+0x1ca>
				
				TCCR1 |= COUNTER_FALLING_MODE_MASK ;
     bc8:	8e b5       	in	r24, 0x2e	; 46
     bca:	9f b5       	in	r25, 0x2f	; 47
     bcc:	86 60       	ori	r24, 0x06	; 6
     bce:	9f bd       	out	0x2f, r25	; 47
     bd0:	8e bd       	out	0x2e, r24	; 46
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	40 c0       	rjmp	.+128    	; 0xc56 <Timer_Start+0x1d4>
			break;
			
//////////////// channel two /////////////////////
			case TIMER_CH2 :
			
			if (g_ModeTimer2 ==TIMER_MODE)
     bd6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <g_ModeTimer2>
     bda:	81 11       	cpse	r24, r1
     bdc:	39 c0       	rjmp	.+114    	; 0xc50 <Timer_Start+0x1ce>
			{
				switch (g_prescaleTimer2)
     bde:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_prescaleTimer2>
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	b9 f0       	breq	.+46     	; 0xc14 <Timer_Start+0x192>
     be6:	28 f4       	brcc	.+10     	; 0xbf2 <Timer_Start+0x170>
     be8:	88 23       	and	r24, r24
     bea:	51 f0       	breq	.+20     	; 0xc00 <Timer_Start+0x17e>
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	69 f0       	breq	.+26     	; 0xc0a <Timer_Start+0x188>
     bf0:	31 c0       	rjmp	.+98     	; 0xc54 <Timer_Start+0x1d2>
     bf2:	86 30       	cpi	r24, 0x06	; 6
     bf4:	c9 f0       	breq	.+50     	; 0xc28 <Timer_Start+0x1a6>
     bf6:	87 30       	cpi	r24, 0x07	; 7
     bf8:	e1 f0       	breq	.+56     	; 0xc32 <Timer_Start+0x1b0>
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	59 f5       	brne	.+86     	; 0xc54 <Timer_Start+0x1d2>
     bfe:	0f c0       	rjmp	.+30     	; 0xc1e <Timer_Start+0x19c>
				{
					case TIMER_NO_CLOCK :
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
     c00:	85 b5       	in	r24, 0x25	; 37
     c02:	88 6f       	ori	r24, 0xF8	; 248
     c04:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c06:	80 e0       	ldi	r24, 0x00	; 0
			{
				switch (g_prescaleTimer2)
				{
					case TIMER_NO_CLOCK :
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
					break;
     c08:	26 c0       	rjmp	.+76     	; 0xc56 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_NO:
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
     c0a:	85 b5       	in	r24, 0x25	; 37
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c10:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |=TIMER2_NO_CLOCK_MASK;
					break;
					
					case TIMER_PRESCALER_NO:
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
					break;
     c12:	21 c0       	rjmp	.+66     	; 0xc56 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_8 :
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
     c14:	85 b5       	in	r24, 0x25	; 37
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |=TIMER2_PRESCALER_NO_MASK;
					break;
					
					case TIMER_PRESCALER_8 :
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
					break;
     c1c:	1c c0       	rjmp	.+56     	; 0xc56 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_64:
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
     c1e:	85 b5       	in	r24, 0x25	; 37
     c20:	84 60       	ori	r24, 0x04	; 4
     c22:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c24:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_8_MASK ;
					break;
					
					case TIMER_PRESCALER_64:
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
					break;
     c26:	17 c0       	rjmp	.+46     	; 0xc56 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_256:
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
     c28:	85 b5       	in	r24, 0x25	; 37
     c2a:	86 60       	ori	r24, 0x06	; 6
     c2c:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c2e:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_64_MASK ;
					break;
					
					case TIMER_PRESCALER_256:
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
					break;
     c30:	12 c0       	rjmp	.+36     	; 0xc56 <Timer_Start+0x1d4>
					
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
     c32:	85 b5       	in	r24, 0x25	; 37
     c34:	87 60       	ori	r24, 0x07	; 7
     c36:	85 bd       	out	0x25, r24	; 37
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c38:	80 e0       	ldi	r24, 0x00	; 0
					TCCR2 |= TIMER2_PRESCALER_256_MASK ;
					break;
					
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
					break;
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <Timer_Start+0x1d4>
			return E_NOK ;
			// end if 
			break;	
			
			default: 
			return E_NOK ;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	0b c0       	rjmp	.+22     	; 0xc56 <Timer_Start+0x1d4>
			break;
		}/// end switch case channels
		
	return E_OK ;
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	09 c0       	rjmp	.+18     	; 0xc56 <Timer_Start+0x1d4>
			}else if (g_ModeTimer0 == COUNTER_FALLING_MODE){
				
				TCCR0 |= COUNTER_FALLING_MODE_MASK ;
				
			}else
				return E_NOK ;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <Timer_Start+0x1d4>
			default: 
			return E_NOK ;
			break;
		}/// end switch case channels
		
	return E_OK ;
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <Timer_Start+0x1d4>
				}else if (g_ModeTimer1 == COUNTER_FALLING_MODE){
				
				TCCR1 |= COUNTER_FALLING_MODE_MASK ;
				
				}else 
				return E_NOK ; 
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <Timer_Start+0x1d4>
					break;	
					
				}///end switch case prescale
				
			}else
			return E_NOK ;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <Timer_Start+0x1d4>
					case TIMER_PRESCALER_1024:
					TCCR2 |= TIMER2_PRESCALER_1024_MASK ;
					break;
					
					default: 
					return E_NOK ;
     c54:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}/// end switch case channels
		
	return E_OK ;
	
}
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <timerDelayMs>:
 *  Author: MENA
 */ 
#include "Timer.h"
#include "TimerDelay.h"

ERROR_STATUS timerDelayMs(uint16_t u16_delay_in_ms){
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	27 97       	sbiw	r28, 0x07	; 7
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	7c 01       	movw	r14, r24
	
	ERROR_STATUS state_error = E_OK ;
	
	uint8_t ovf_flag = 0 ;
     c76:	19 82       	std	Y+1, r1	; 0x01
	Timer_cfg_s Timer_cfg ;
	Timer_cfg.Timer_CH_NO = TIMER_CH2 ;
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	8a 83       	std	Y+2, r24	; 0x02
	Timer_cfg.Timer_Mode = TIMER_MODE ;
     c7c:	1b 82       	std	Y+3, r1	; 0x03
	Timer_cfg.Timer_Polling_Or_Interrupt = TIMER_POLLING_MODE ;
     c7e:	1c 82       	std	Y+4, r1	; 0x04
	Timer_cfg.Timer_Prescaler = TIMER_PRESCALER_64 ;
     c80:	84 e0       	ldi	r24, 0x04	; 4
     c82:	8d 83       	std	Y+5, r24	; 0x05
	
	state_error |= Timer_Init(&Timer_cfg) ;
     c84:	ce 01       	movw	r24, r28
     c86:	02 96       	adiw	r24, 0x02	; 2
     c88:	0e 94 5f 04 	call	0x8be	; 0x8be <Timer_Init>
     c8c:	18 2f       	mov	r17, r24
	
	/************************************************************************/
	/* 250 number of tick  for 1 millisecond - 11 ticks error due to function calls*/
	/************************************************************************/
		
		state_error |= Timer_Start(Timer_cfg.Timer_CH_NO , 239 );
     c8e:	6f ee       	ldi	r22, 0xEF	; 239
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	0e 94 41 05 	call	0xa82	; 0xa82 <Timer_Start>
     c98:	18 2b       	or	r17, r24
		
		/* delay required in millisecond */
		
		while (u16_delay_in_ms)
     c9a:	e1 14       	cp	r14, r1
     c9c:	f1 04       	cpc	r15, r1
     c9e:	81 f0       	breq	.+32     	; 0xcc0 <timerDelayMs+0x66>
		{
			/* polling on ovf flag */
			
			state_error |= Timer_GetStatus (Timer_cfg.Timer_CH_NO , &ovf_flag);
     ca0:	be 01       	movw	r22, r28
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <Timer_GetStatus>
     cac:	18 2b       	or	r17, r24
			if(ovf_flag == TRUE)
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	19 f4       	brne	.+6      	; 0xcba <timerDelayMs+0x60>
			{
				u16_delay_in_ms -- ;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	e8 1a       	sub	r14, r24
     cb8:	f1 08       	sbc	r15, r1
		
		state_error |= Timer_Start(Timer_cfg.Timer_CH_NO , 239 );
		
		/* delay required in millisecond */
		
		while (u16_delay_in_ms)
     cba:	e1 14       	cp	r14, r1
     cbc:	f1 04       	cpc	r15, r1
     cbe:	81 f7       	brne	.-32     	; 0xca0 <timerDelayMs+0x46>
			{
				u16_delay_in_ms -- ;
			}
			
		}
		state_error |= Timer_Stop(Timer_cfg.Timer_CH_NO);
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	0e 94 ba 04 	call	0x974	; 0x974 <Timer_Stop>
	
	return state_error ;
     cc6:	81 2b       	or	r24, r17
     cc8:	27 96       	adiw	r28, 0x07	; 7
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	08 95       	ret

00000ce0 <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/


ERROR_STATUS Us_Init(void){
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <Us_Init+0x6>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	
		Icu_cfg_s icuCfg;
		icuCfg.ICU_Ch_Timer = ICU_TIMER_CH0;
     cea:	1a 82       	std	Y+2, r1	; 0x02
		icuCfg.ICU_Ch_No = ICU_CH2;
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	89 83       	std	Y+1, r24	; 0x01
		Icu_Init(&icuCfg);
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Icu_Init>
		return E_OK ;
}
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <Us_Trigger>:
 *************************************************************************************************/




ERROR_STATUS Us_Trigger(void){
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <Us_Trigger+0x8>
     d0c:	1f 92       	push	r1
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	
	DIO_Cfg_s dioCfgtrig;
	
	/*initialize trigger pin */
	
	dioCfgtrig.GPIO = GPIOC;
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	89 83       	std	Y+1, r24	; 0x01
	dioCfgtrig.pins = BIT7;
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	8a 83       	std	Y+2, r24	; 0x02
	dioCfgtrig.dir =OUTPUT;
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	8b 83       	std	Y+3, r24	; 0x03
	a_u8_error_state |= DIO_init(&dioCfgtrig);
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_init>
     d26:	18 2f       	mov	r17, r24
	
	/*send trigger*/
	
	a_u8_error_state |=DIO_Write(GPIOC,BIT7,HIGH)	;
     d28:	4f ef       	ldi	r20, 0xFF	; 255
     d2a:	60 e8       	ldi	r22, 0x80	; 128
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
     d32:	18 2b       	or	r17, r24
	a_u8_error_state |=timerDelayMs(10);
     d34:	8a e0       	ldi	r24, 0x0A	; 10
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 2d 06 	call	0xc5a	; 0xc5a <timerDelayMs>
     d3c:	18 2b       	or	r17, r24
	
	a_u8_error_state |=DIO_Write(GPIOC,BIT7,LOW)	;
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	60 e8       	ldi	r22, 0x80	; 128
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write>
	
	return a_u8_error_state;
	
}
     d48:	81 2b       	or	r24, r17
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	08 95       	ret

00000d58 <Us_GetDistance>:
 *                    Distance parameter.                                                         *
 *************************************************************************************************/



ERROR_STATUS Us_GetDistance(uint16_t *Distance){
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	00 d0       	rcall	.+0      	; 0xd64 <Us_GetDistance+0xc>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <Us_GetDistance+0xe>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	
		uint8_t a_u8_error_state = E_OK ;
		uint32_t a_u32_timeOfTicks_Us  ;
		
		if (Distance==NULL)
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	b9 f0       	breq	.+46     	; 0xd9c <Us_GetDistance+0x44>
     d6e:	8c 01       	movw	r16, r24
			a_u8_error_state |= E_NOK ;
		}else{
			
			// read timer from ICU
			
			a_u8_error_state |= Icu_ReadTime(ICU_TIMER_CH0,ICU_RISE_TO_FALL,&a_u32_timeOfTicks_Us);
     d70:	ae 01       	movw	r20, r28
     d72:	4f 5f       	subi	r20, 0xFF	; 255
     d74:	5f 4f       	sbci	r21, 0xFF	; 255
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Icu_ReadTime>
     d7e:	f8 2e       	mov	r15, r24
			
			
			/* timeofticks is  time in microsecond returned from ICU (pulse time)*/
			
			
			*Distance = a_u32_timeOfTicks_Us/58 ;
     d80:	69 81       	ldd	r22, Y+1	; 0x01
     d82:	7a 81       	ldd	r23, Y+2	; 0x02
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	2a e3       	ldi	r18, 0x3A	; 58
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	0e 94 77 08 	call	0x10ee	; 0x10ee <__udivmodsi4>
     d94:	f8 01       	movw	r30, r16
     d96:	31 83       	std	Z+1, r19	; 0x01
     d98:	20 83       	st	Z, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <Us_GetDistance+0x48>
		uint8_t a_u8_error_state = E_OK ;
		uint32_t a_u32_timeOfTicks_Us  ;
		
		if (Distance==NULL)
		{
			a_u8_error_state |= E_NOK ;
     d9c:	ff 24       	eor	r15, r15
     d9e:	f3 94       	inc	r15
		
	
		
		return a_u8_error_state ;
	
     da0:	8f 2d       	mov	r24, r15
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	08 95       	ret

00000db6 <__divsf3>:
     db6:	0e 94 ef 06 	call	0xdde	; 0xdde <__divsf3x>
     dba:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_round>
     dbe:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_pscB>
     dc2:	58 f0       	brcs	.+22     	; 0xdda <__divsf3+0x24>
     dc4:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscA>
     dc8:	40 f0       	brcs	.+16     	; 0xdda <__divsf3+0x24>
     dca:	29 f4       	brne	.+10     	; 0xdd6 <__divsf3+0x20>
     dcc:	5f 3f       	cpi	r21, 0xFF	; 255
     dce:	29 f0       	breq	.+10     	; 0xdda <__divsf3+0x24>
     dd0:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_inf>
     dd4:	51 11       	cpse	r21, r1
     dd6:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_szero>
     dda:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_nan>

00000dde <__divsf3x>:
     dde:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_split3>
     de2:	68 f3       	brcs	.-38     	; 0xdbe <__divsf3+0x8>

00000de4 <__divsf3_pse>:
     de4:	99 23       	and	r25, r25
     de6:	b1 f3       	breq	.-20     	; 0xdd4 <__divsf3+0x1e>
     de8:	55 23       	and	r21, r21
     dea:	91 f3       	breq	.-28     	; 0xdd0 <__divsf3+0x1a>
     dec:	95 1b       	sub	r25, r21
     dee:	55 0b       	sbc	r21, r21
     df0:	bb 27       	eor	r27, r27
     df2:	aa 27       	eor	r26, r26
     df4:	62 17       	cp	r22, r18
     df6:	73 07       	cpc	r23, r19
     df8:	84 07       	cpc	r24, r20
     dfa:	38 f0       	brcs	.+14     	; 0xe0a <__divsf3_pse+0x26>
     dfc:	9f 5f       	subi	r25, 0xFF	; 255
     dfe:	5f 4f       	sbci	r21, 0xFF	; 255
     e00:	22 0f       	add	r18, r18
     e02:	33 1f       	adc	r19, r19
     e04:	44 1f       	adc	r20, r20
     e06:	aa 1f       	adc	r26, r26
     e08:	a9 f3       	breq	.-22     	; 0xdf4 <__divsf3_pse+0x10>
     e0a:	35 d0       	rcall	.+106    	; 0xe76 <__divsf3_pse+0x92>
     e0c:	0e 2e       	mov	r0, r30
     e0e:	3a f0       	brmi	.+14     	; 0xe1e <__divsf3_pse+0x3a>
     e10:	e0 e8       	ldi	r30, 0x80	; 128
     e12:	32 d0       	rcall	.+100    	; 0xe78 <__divsf3_pse+0x94>
     e14:	91 50       	subi	r25, 0x01	; 1
     e16:	50 40       	sbci	r21, 0x00	; 0
     e18:	e6 95       	lsr	r30
     e1a:	00 1c       	adc	r0, r0
     e1c:	ca f7       	brpl	.-14     	; 0xe10 <__divsf3_pse+0x2c>
     e1e:	2b d0       	rcall	.+86     	; 0xe76 <__divsf3_pse+0x92>
     e20:	fe 2f       	mov	r31, r30
     e22:	29 d0       	rcall	.+82     	; 0xe76 <__divsf3_pse+0x92>
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	bb 1f       	adc	r27, r27
     e2c:	26 17       	cp	r18, r22
     e2e:	37 07       	cpc	r19, r23
     e30:	48 07       	cpc	r20, r24
     e32:	ab 07       	cpc	r26, r27
     e34:	b0 e8       	ldi	r27, 0x80	; 128
     e36:	09 f0       	breq	.+2      	; 0xe3a <__divsf3_pse+0x56>
     e38:	bb 0b       	sbc	r27, r27
     e3a:	80 2d       	mov	r24, r0
     e3c:	bf 01       	movw	r22, r30
     e3e:	ff 27       	eor	r31, r31
     e40:	93 58       	subi	r25, 0x83	; 131
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	3a f0       	brmi	.+14     	; 0xe54 <__divsf3_pse+0x70>
     e46:	9e 3f       	cpi	r25, 0xFE	; 254
     e48:	51 05       	cpc	r21, r1
     e4a:	78 f0       	brcs	.+30     	; 0xe6a <__divsf3_pse+0x86>
     e4c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_inf>
     e50:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_szero>
     e54:	5f 3f       	cpi	r21, 0xFF	; 255
     e56:	e4 f3       	brlt	.-8      	; 0xe50 <__divsf3_pse+0x6c>
     e58:	98 3e       	cpi	r25, 0xE8	; 232
     e5a:	d4 f3       	brlt	.-12     	; 0xe50 <__divsf3_pse+0x6c>
     e5c:	86 95       	lsr	r24
     e5e:	77 95       	ror	r23
     e60:	67 95       	ror	r22
     e62:	b7 95       	ror	r27
     e64:	f7 95       	ror	r31
     e66:	9f 5f       	subi	r25, 0xFF	; 255
     e68:	c9 f7       	brne	.-14     	; 0xe5c <__divsf3_pse+0x78>
     e6a:	88 0f       	add	r24, r24
     e6c:	91 1d       	adc	r25, r1
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	97 f9       	bld	r25, 7
     e74:	08 95       	ret
     e76:	e1 e0       	ldi	r30, 0x01	; 1
     e78:	66 0f       	add	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 1f       	adc	r24, r24
     e7e:	bb 1f       	adc	r27, r27
     e80:	62 17       	cp	r22, r18
     e82:	73 07       	cpc	r23, r19
     e84:	84 07       	cpc	r24, r20
     e86:	ba 07       	cpc	r27, r26
     e88:	20 f0       	brcs	.+8      	; 0xe92 <__divsf3_pse+0xae>
     e8a:	62 1b       	sub	r22, r18
     e8c:	73 0b       	sbc	r23, r19
     e8e:	84 0b       	sbc	r24, r20
     e90:	ba 0b       	sbc	r27, r26
     e92:	ee 1f       	adc	r30, r30
     e94:	88 f7       	brcc	.-30     	; 0xe78 <__divsf3_pse+0x94>
     e96:	e0 95       	com	r30
     e98:	08 95       	ret

00000e9a <__fixunssfsi>:
     e9a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__fp_splitA>
     e9e:	88 f0       	brcs	.+34     	; 0xec2 <__fixunssfsi+0x28>
     ea0:	9f 57       	subi	r25, 0x7F	; 127
     ea2:	98 f0       	brcs	.+38     	; 0xeca <__fixunssfsi+0x30>
     ea4:	b9 2f       	mov	r27, r25
     ea6:	99 27       	eor	r25, r25
     ea8:	b7 51       	subi	r27, 0x17	; 23
     eaa:	b0 f0       	brcs	.+44     	; 0xed8 <__fixunssfsi+0x3e>
     eac:	e1 f0       	breq	.+56     	; 0xee6 <__fixunssfsi+0x4c>
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	88 1f       	adc	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	1a f0       	brmi	.+6      	; 0xebe <__fixunssfsi+0x24>
     eb8:	ba 95       	dec	r27
     eba:	c9 f7       	brne	.-14     	; 0xeae <__fixunssfsi+0x14>
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <__fixunssfsi+0x4c>
     ebe:	b1 30       	cpi	r27, 0x01	; 1
     ec0:	91 f0       	breq	.+36     	; 0xee6 <__fixunssfsi+0x4c>
     ec2:	0e 94 03 08 	call	0x1006	; 0x1006 <__fp_zero>
     ec6:	b1 e0       	ldi	r27, 0x01	; 1
     ec8:	08 95       	ret
     eca:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_zero>
     ece:	67 2f       	mov	r22, r23
     ed0:	78 2f       	mov	r23, r24
     ed2:	88 27       	eor	r24, r24
     ed4:	b8 5f       	subi	r27, 0xF8	; 248
     ed6:	39 f0       	breq	.+14     	; 0xee6 <__fixunssfsi+0x4c>
     ed8:	b9 3f       	cpi	r27, 0xF9	; 249
     eda:	cc f3       	brlt	.-14     	; 0xece <__fixunssfsi+0x34>
     edc:	86 95       	lsr	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b3 95       	inc	r27
     ee4:	d9 f7       	brne	.-10     	; 0xedc <__fixunssfsi+0x42>
     ee6:	3e f4       	brtc	.+14     	; 0xef6 <__fixunssfsi+0x5c>
     ee8:	90 95       	com	r25
     eea:	80 95       	com	r24
     eec:	70 95       	com	r23
     eee:	61 95       	neg	r22
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	8f 4f       	sbci	r24, 0xFF	; 255
     ef4:	9f 4f       	sbci	r25, 0xFF	; 255
     ef6:	08 95       	ret

00000ef8 <__floatunsisf>:
     ef8:	e8 94       	clt
     efa:	09 c0       	rjmp	.+18     	; 0xf0e <__floatsisf+0x12>

00000efc <__floatsisf>:
     efc:	97 fb       	bst	r25, 7
     efe:	3e f4       	brtc	.+14     	; 0xf0e <__floatsisf+0x12>
     f00:	90 95       	com	r25
     f02:	80 95       	com	r24
     f04:	70 95       	com	r23
     f06:	61 95       	neg	r22
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	99 23       	and	r25, r25
     f10:	a9 f0       	breq	.+42     	; 0xf3c <__floatsisf+0x40>
     f12:	f9 2f       	mov	r31, r25
     f14:	96 e9       	ldi	r25, 0x96	; 150
     f16:	bb 27       	eor	r27, r27
     f18:	93 95       	inc	r25
     f1a:	f6 95       	lsr	r31
     f1c:	87 95       	ror	r24
     f1e:	77 95       	ror	r23
     f20:	67 95       	ror	r22
     f22:	b7 95       	ror	r27
     f24:	f1 11       	cpse	r31, r1
     f26:	f8 cf       	rjmp	.-16     	; 0xf18 <__floatsisf+0x1c>
     f28:	fa f4       	brpl	.+62     	; 0xf68 <__floatsisf+0x6c>
     f2a:	bb 0f       	add	r27, r27
     f2c:	11 f4       	brne	.+4      	; 0xf32 <__floatsisf+0x36>
     f2e:	60 ff       	sbrs	r22, 0
     f30:	1b c0       	rjmp	.+54     	; 0xf68 <__floatsisf+0x6c>
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 4f       	sbci	r24, 0xFF	; 255
     f38:	9f 4f       	sbci	r25, 0xFF	; 255
     f3a:	16 c0       	rjmp	.+44     	; 0xf68 <__floatsisf+0x6c>
     f3c:	88 23       	and	r24, r24
     f3e:	11 f0       	breq	.+4      	; 0xf44 <__floatsisf+0x48>
     f40:	96 e9       	ldi	r25, 0x96	; 150
     f42:	11 c0       	rjmp	.+34     	; 0xf66 <__floatsisf+0x6a>
     f44:	77 23       	and	r23, r23
     f46:	21 f0       	breq	.+8      	; 0xf50 <__floatsisf+0x54>
     f48:	9e e8       	ldi	r25, 0x8E	; 142
     f4a:	87 2f       	mov	r24, r23
     f4c:	76 2f       	mov	r23, r22
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <__floatsisf+0x5e>
     f50:	66 23       	and	r22, r22
     f52:	71 f0       	breq	.+28     	; 0xf70 <__floatsisf+0x74>
     f54:	96 e8       	ldi	r25, 0x86	; 134
     f56:	86 2f       	mov	r24, r22
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	2a f0       	brmi	.+10     	; 0xf68 <__floatsisf+0x6c>
     f5e:	9a 95       	dec	r25
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	da f7       	brpl	.-10     	; 0xf5e <__floatsisf+0x62>
     f68:	88 0f       	add	r24, r24
     f6a:	96 95       	lsr	r25
     f6c:	87 95       	ror	r24
     f6e:	97 f9       	bld	r25, 7
     f70:	08 95       	ret

00000f72 <__fp_inf>:
     f72:	97 f9       	bld	r25, 7
     f74:	9f 67       	ori	r25, 0x7F	; 127
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	08 95       	ret

00000f7e <__fp_nan>:
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
     f80:	80 ec       	ldi	r24, 0xC0	; 192
     f82:	08 95       	ret

00000f84 <__fp_pscA>:
     f84:	00 24       	eor	r0, r0
     f86:	0a 94       	dec	r0
     f88:	16 16       	cp	r1, r22
     f8a:	17 06       	cpc	r1, r23
     f8c:	18 06       	cpc	r1, r24
     f8e:	09 06       	cpc	r0, r25
     f90:	08 95       	ret

00000f92 <__fp_pscB>:
     f92:	00 24       	eor	r0, r0
     f94:	0a 94       	dec	r0
     f96:	12 16       	cp	r1, r18
     f98:	13 06       	cpc	r1, r19
     f9a:	14 06       	cpc	r1, r20
     f9c:	05 06       	cpc	r0, r21
     f9e:	08 95       	ret

00000fa0 <__fp_round>:
     fa0:	09 2e       	mov	r0, r25
     fa2:	03 94       	inc	r0
     fa4:	00 0c       	add	r0, r0
     fa6:	11 f4       	brne	.+4      	; 0xfac <__fp_round+0xc>
     fa8:	88 23       	and	r24, r24
     faa:	52 f0       	brmi	.+20     	; 0xfc0 <__fp_round+0x20>
     fac:	bb 0f       	add	r27, r27
     fae:	40 f4       	brcc	.+16     	; 0xfc0 <__fp_round+0x20>
     fb0:	bf 2b       	or	r27, r31
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <__fp_round+0x18>
     fb4:	60 ff       	sbrs	r22, 0
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <__fp_round+0x20>
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	08 95       	ret

00000fc2 <__fp_split3>:
     fc2:	57 fd       	sbrc	r21, 7
     fc4:	90 58       	subi	r25, 0x80	; 128
     fc6:	44 0f       	add	r20, r20
     fc8:	55 1f       	adc	r21, r21
     fca:	59 f0       	breq	.+22     	; 0xfe2 <__fp_splitA+0x10>
     fcc:	5f 3f       	cpi	r21, 0xFF	; 255
     fce:	71 f0       	breq	.+28     	; 0xfec <__fp_splitA+0x1a>
     fd0:	47 95       	ror	r20

00000fd2 <__fp_splitA>:
     fd2:	88 0f       	add	r24, r24
     fd4:	97 fb       	bst	r25, 7
     fd6:	99 1f       	adc	r25, r25
     fd8:	61 f0       	breq	.+24     	; 0xff2 <__fp_splitA+0x20>
     fda:	9f 3f       	cpi	r25, 0xFF	; 255
     fdc:	79 f0       	breq	.+30     	; 0xffc <__fp_splitA+0x2a>
     fde:	87 95       	ror	r24
     fe0:	08 95       	ret
     fe2:	12 16       	cp	r1, r18
     fe4:	13 06       	cpc	r1, r19
     fe6:	14 06       	cpc	r1, r20
     fe8:	55 1f       	adc	r21, r21
     fea:	f2 cf       	rjmp	.-28     	; 0xfd0 <__fp_split3+0xe>
     fec:	46 95       	lsr	r20
     fee:	f1 df       	rcall	.-30     	; 0xfd2 <__fp_splitA>
     ff0:	08 c0       	rjmp	.+16     	; 0x1002 <__fp_splitA+0x30>
     ff2:	16 16       	cp	r1, r22
     ff4:	17 06       	cpc	r1, r23
     ff6:	18 06       	cpc	r1, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	f1 cf       	rjmp	.-30     	; 0xfde <__fp_splitA+0xc>
     ffc:	86 95       	lsr	r24
     ffe:	71 05       	cpc	r23, r1
    1000:	61 05       	cpc	r22, r1
    1002:	08 94       	sec
    1004:	08 95       	ret

00001006 <__fp_zero>:
    1006:	e8 94       	clt

00001008 <__fp_szero>:
    1008:	bb 27       	eor	r27, r27
    100a:	66 27       	eor	r22, r22
    100c:	77 27       	eor	r23, r23
    100e:	cb 01       	movw	r24, r22
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret

00001014 <__mulsf3>:
    1014:	0e 94 1d 08 	call	0x103a	; 0x103a <__mulsf3x>
    1018:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__fp_round>
    101c:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_pscA>
    1020:	38 f0       	brcs	.+14     	; 0x1030 <__mulsf3+0x1c>
    1022:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fp_pscB>
    1026:	20 f0       	brcs	.+8      	; 0x1030 <__mulsf3+0x1c>
    1028:	95 23       	and	r25, r21
    102a:	11 f0       	breq	.+4      	; 0x1030 <__mulsf3+0x1c>
    102c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_inf>
    1030:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_nan>
    1034:	11 24       	eor	r1, r1
    1036:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_szero>

0000103a <__mulsf3x>:
    103a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_split3>
    103e:	70 f3       	brcs	.-36     	; 0x101c <__mulsf3+0x8>

00001040 <__mulsf3_pse>:
    1040:	95 9f       	mul	r25, r21
    1042:	c1 f3       	breq	.-16     	; 0x1034 <__mulsf3+0x20>
    1044:	95 0f       	add	r25, r21
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	55 1f       	adc	r21, r21
    104a:	62 9f       	mul	r22, r18
    104c:	f0 01       	movw	r30, r0
    104e:	72 9f       	mul	r23, r18
    1050:	bb 27       	eor	r27, r27
    1052:	f0 0d       	add	r31, r0
    1054:	b1 1d       	adc	r27, r1
    1056:	63 9f       	mul	r22, r19
    1058:	aa 27       	eor	r26, r26
    105a:	f0 0d       	add	r31, r0
    105c:	b1 1d       	adc	r27, r1
    105e:	aa 1f       	adc	r26, r26
    1060:	64 9f       	mul	r22, r20
    1062:	66 27       	eor	r22, r22
    1064:	b0 0d       	add	r27, r0
    1066:	a1 1d       	adc	r26, r1
    1068:	66 1f       	adc	r22, r22
    106a:	82 9f       	mul	r24, r18
    106c:	22 27       	eor	r18, r18
    106e:	b0 0d       	add	r27, r0
    1070:	a1 1d       	adc	r26, r1
    1072:	62 1f       	adc	r22, r18
    1074:	73 9f       	mul	r23, r19
    1076:	b0 0d       	add	r27, r0
    1078:	a1 1d       	adc	r26, r1
    107a:	62 1f       	adc	r22, r18
    107c:	83 9f       	mul	r24, r19
    107e:	a0 0d       	add	r26, r0
    1080:	61 1d       	adc	r22, r1
    1082:	22 1f       	adc	r18, r18
    1084:	74 9f       	mul	r23, r20
    1086:	33 27       	eor	r19, r19
    1088:	a0 0d       	add	r26, r0
    108a:	61 1d       	adc	r22, r1
    108c:	23 1f       	adc	r18, r19
    108e:	84 9f       	mul	r24, r20
    1090:	60 0d       	add	r22, r0
    1092:	21 1d       	adc	r18, r1
    1094:	82 2f       	mov	r24, r18
    1096:	76 2f       	mov	r23, r22
    1098:	6a 2f       	mov	r22, r26
    109a:	11 24       	eor	r1, r1
    109c:	9f 57       	subi	r25, 0x7F	; 127
    109e:	50 40       	sbci	r21, 0x00	; 0
    10a0:	9a f0       	brmi	.+38     	; 0x10c8 <__mulsf3_pse+0x88>
    10a2:	f1 f0       	breq	.+60     	; 0x10e0 <__mulsf3_pse+0xa0>
    10a4:	88 23       	and	r24, r24
    10a6:	4a f0       	brmi	.+18     	; 0x10ba <__mulsf3_pse+0x7a>
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	bb 1f       	adc	r27, r27
    10ae:	66 1f       	adc	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	91 50       	subi	r25, 0x01	; 1
    10b6:	50 40       	sbci	r21, 0x00	; 0
    10b8:	a9 f7       	brne	.-22     	; 0x10a4 <__mulsf3_pse+0x64>
    10ba:	9e 3f       	cpi	r25, 0xFE	; 254
    10bc:	51 05       	cpc	r21, r1
    10be:	80 f0       	brcs	.+32     	; 0x10e0 <__mulsf3_pse+0xa0>
    10c0:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__fp_inf>
    10c4:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__fp_szero>
    10c8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ca:	e4 f3       	brlt	.-8      	; 0x10c4 <__mulsf3_pse+0x84>
    10cc:	98 3e       	cpi	r25, 0xE8	; 232
    10ce:	d4 f3       	brlt	.-12     	; 0x10c4 <__mulsf3_pse+0x84>
    10d0:	86 95       	lsr	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	b7 95       	ror	r27
    10d8:	f7 95       	ror	r31
    10da:	e7 95       	ror	r30
    10dc:	9f 5f       	subi	r25, 0xFF	; 255
    10de:	c1 f7       	brne	.-16     	; 0x10d0 <__mulsf3_pse+0x90>
    10e0:	fe 2b       	or	r31, r30
    10e2:	88 0f       	add	r24, r24
    10e4:	91 1d       	adc	r25, r1
    10e6:	96 95       	lsr	r25
    10e8:	87 95       	ror	r24
    10ea:	97 f9       	bld	r25, 7
    10ec:	08 95       	ret

000010ee <__udivmodsi4>:
    10ee:	a1 e2       	ldi	r26, 0x21	; 33
    10f0:	1a 2e       	mov	r1, r26
    10f2:	aa 1b       	sub	r26, r26
    10f4:	bb 1b       	sub	r27, r27
    10f6:	fd 01       	movw	r30, r26
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <__udivmodsi4_ep>

000010fa <__udivmodsi4_loop>:
    10fa:	aa 1f       	adc	r26, r26
    10fc:	bb 1f       	adc	r27, r27
    10fe:	ee 1f       	adc	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	a2 17       	cp	r26, r18
    1104:	b3 07       	cpc	r27, r19
    1106:	e4 07       	cpc	r30, r20
    1108:	f5 07       	cpc	r31, r21
    110a:	20 f0       	brcs	.+8      	; 0x1114 <__udivmodsi4_ep>
    110c:	a2 1b       	sub	r26, r18
    110e:	b3 0b       	sbc	r27, r19
    1110:	e4 0b       	sbc	r30, r20
    1112:	f5 0b       	sbc	r31, r21

00001114 <__udivmodsi4_ep>:
    1114:	66 1f       	adc	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	1a 94       	dec	r1
    111e:	69 f7       	brne	.-38     	; 0x10fa <__udivmodsi4_loop>
    1120:	60 95       	com	r22
    1122:	70 95       	com	r23
    1124:	80 95       	com	r24
    1126:	90 95       	com	r25
    1128:	9b 01       	movw	r18, r22
    112a:	ac 01       	movw	r20, r24
    112c:	bd 01       	movw	r22, r26
    112e:	cf 01       	movw	r24, r30
    1130:	08 95       	ret

00001132 <_exit>:
    1132:	f8 94       	cli

00001134 <__stop_program>:
    1134:	ff cf       	rjmp	.-2      	; 0x1134 <__stop_program>
